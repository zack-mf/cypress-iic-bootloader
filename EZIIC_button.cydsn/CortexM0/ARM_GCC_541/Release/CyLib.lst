ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysClkImoStart,"ax",%progbits
  20              		.align	1
  21              		.global	CySysClkImoStart
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysClkImoStart, %function
  25              	CySysClkImoStart:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.80
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2018, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 2


  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  75:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  76:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  77:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim5 = 0u;
  78:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  79:Generated_Source\PSoC4/CyLib.c **** 
  80:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  81:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  82:Generated_Source\PSoC4/CyLib.c **** 
  83:Generated_Source\PSoC4/CyLib.c **** 
  84:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  85:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  86:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  87:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 3


  88:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  89:Generated_Source\PSoC4/CyLib.c **** *
  90:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC Analog 
  91:Generated_Source\PSoC4/CyLib.c **** * Coprocessor devices, this function will also enable WCO lock if selected in 
  92:Generated_Source\PSoC4/CyLib.c **** * the Design Wide Resources tab.
  93:Generated_Source\PSoC4/CyLib.c **** *
  94:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L devices, this function will also enable USB lock if selected
  95:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
  96:Generated_Source\PSoC4/CyLib.c **** *
  97:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  98:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
  99:Generated_Source\PSoC4/CyLib.c **** {
  28              		.loc 1 99 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 100:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
  33              		.loc 1 100 0
  34 0000 8021     		movs	r1, #128
  35 0002 034A     		ldr	r2, .L2
  36 0004 0906     		lsls	r1, r1, #24
  37 0006 1368     		ldr	r3, [r2]
 101:Generated_Source\PSoC4/CyLib.c **** 
 102:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 103:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 104:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 105:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 106:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 107:Generated_Source\PSoC4/CyLib.c **** 
 108:Generated_Source\PSoC4/CyLib.c **** 
 109:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 110:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 111:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 112:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 113:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 114:Generated_Source\PSoC4/CyLib.c **** 
 115:Generated_Source\PSoC4/CyLib.c **** }
  38              		.loc 1 115 0
  39              		@ sp needed
 100:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
  40              		.loc 1 100 0
  41 0008 0B43     		orrs	r3, r1
  42 000a 1360     		str	r3, [r2]
  43              		.loc 1 115 0
  44 000c 7047     		bx	lr
  45              	.L3:
  46 000e C046     		.align	2
  47              	.L2:
  48 0010 08010B40 		.word	1074462984
  49              		.cfi_endproc
  50              	.LFE1:
  51              		.size	CySysClkImoStart, .-CySysClkImoStart
  52              		.section	.text.CySysClkImoDisableWcoLock,"ax",%progbits
  53              		.align	1
  54              		.global	CySysClkImoDisableWcoLock
  55              		.code	16
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 4


  56              		.thumb_func
  57              		.type	CySysClkImoDisableWcoLock, %function
  58              	CySysClkImoDisableWcoLock:
  59              	.LFB4:
 116:Generated_Source\PSoC4/CyLib.c **** 
 117:Generated_Source\PSoC4/CyLib.c **** 
 118:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 119:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 120:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 121:Generated_Source\PSoC4/CyLib.c **** *
 122:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 123:Generated_Source\PSoC4/CyLib.c **** *
 124:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S / 
 125:Generated_Source\PSoC4/CyLib.c **** * PSoC Analog Coprocessor devices, this function will also disable WCO lock.
 126:Generated_Source\PSoC4/CyLib.c **** *
 127:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 128:Generated_Source\PSoC4/CyLib.c **** *
 129:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 130:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 131:Generated_Source\PSoC4/CyLib.c **** {
 132:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 133:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 134:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 135:Generated_Source\PSoC4/CyLib.c **** 
 136:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 137:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 138:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 139:Generated_Source\PSoC4/CyLib.c **** 
 140:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 141:Generated_Source\PSoC4/CyLib.c **** }
 142:Generated_Source\PSoC4/CyLib.c **** 
 143:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 144:Generated_Source\PSoC4/CyLib.c **** 
 145:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 146:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 147:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 148:Generated_Source\PSoC4/CyLib.c ****     *
 149:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 150:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 151:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 152:Generated_Source\PSoC4/CyLib.c ****     *
 153:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 154:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 155:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 156:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 157:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 158:Generated_Source\PSoC4/CyLib.c ****     *
 159:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 160:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 161:Generated_Source\PSoC4/CyLib.c ****     *
 162:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 163:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC Analog Coprocessor / PSoC 4200L.
 164:Generated_Source\PSoC4/CyLib.c ****     *
 165:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 166:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 167:Generated_Source\PSoC4/CyLib.c ****     {
 168:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 5


 169:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 170:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 171:Generated_Source\PSoC4/CyLib.c **** 
 172:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 173:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 174:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 175:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 176:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 177:Generated_Source\PSoC4/CyLib.c **** 
 178:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 179:Generated_Source\PSoC4/CyLib.c ****         {
 180:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 181:Generated_Source\PSoC4/CyLib.c **** 
 182:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 183:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 184:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 185:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 186:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 187:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 188:Generated_Source\PSoC4/CyLib.c **** 
 189:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 190:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 191:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 192:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 193:Generated_Source\PSoC4/CyLib.c ****                 {
 194:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 195:Generated_Source\PSoC4/CyLib.c ****                     {
 196:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 197:Generated_Source\PSoC4/CyLib.c ****                         break;
 198:Generated_Source\PSoC4/CyLib.c ****                     }
 199:Generated_Source\PSoC4/CyLib.c ****                 }
 200:Generated_Source\PSoC4/CyLib.c ****             #else
 201:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 202:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 203:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 204:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 205:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 206:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 207:Generated_Source\PSoC4/CyLib.c ****                 #else
 208:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 209:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 210:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 211:Generated_Source\PSoC4/CyLib.c **** 
 212:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 213:Generated_Source\PSoC4/CyLib.c ****             
 214:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = 0;
 215:Generated_Source\PSoC4/CyLib.c ****             
 216:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 217:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 218:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 219:Generated_Source\PSoC4/CyLib.c ****                 {
 220:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 221:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 222:Generated_Source\PSoC4/CyLib.c ****                 }
 223:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 224:Generated_Source\PSoC4/CyLib.c **** 
 225:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 6


 226:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 227:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 228:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 229:Generated_Source\PSoC4/CyLib.c **** 
 230:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 231:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 232:Generated_Source\PSoC4/CyLib.c **** 
 233:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 234:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 235:Generated_Source\PSoC4/CyLib.c **** 
 236:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 237:Generated_Source\PSoC4/CyLib.c ****             
 238:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 239:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 240:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 241:Generated_Source\PSoC4/CyLib.c **** 
 242:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 243:Generated_Source\PSoC4/CyLib.c ****             
 244:Generated_Source\PSoC4/CyLib.c ****             while (lfLimit < (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX - CY_SYS_CLK_WCO_CONFIG_DPLL_
 245:Generated_Source\PSoC4/CyLib.c ****             {
 246:Generated_Source\PSoC4/CyLib.c ****                 CyDelay(CY_SYS_CLK_WCO_DPLL_TIMEOUT_MS);
 247:Generated_Source\PSoC4/CyLib.c ****                 lfLimit += CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_STEP;
 248:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_WCO_DPLL_REG = (regTmp | (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT
 249:Generated_Source\PSoC4/CyLib.c ****             }
 250:Generated_Source\PSoC4/CyLib.c **** 
 251:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_DPLL_TIMEOUT_MS);
 252:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = (regTmp | (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << 
 253:Generated_Source\PSoC4/CyLib.c ****                                                  CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT));
 254:Generated_Source\PSoC4/CyLib.c **** 
 255:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 256:Generated_Source\PSoC4/CyLib.c **** 
 257:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 258:Generated_Source\PSoC4/CyLib.c ****         }
 259:Generated_Source\PSoC4/CyLib.c ****     }
 260:Generated_Source\PSoC4/CyLib.c **** 
 261:Generated_Source\PSoC4/CyLib.c **** 
 262:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 263:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 264:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 265:Generated_Source\PSoC4/CyLib.c ****     *
 266:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 267:Generated_Source\PSoC4/CyLib.c ****     *
 268:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 269:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 270:Generated_Source\PSoC4/CyLib.c ****     *
 271:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 272:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC Analog Coprocessor / PSoC 4200L.
 273:Generated_Source\PSoC4/CyLib.c ****     *
 274:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 275:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 276:Generated_Source\PSoC4/CyLib.c ****     {
  60              		.loc 1 276 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL0:
 277:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 7


 278:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 279:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 280:Generated_Source\PSoC4/CyLib.c **** 
 281:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 282:Generated_Source\PSoC4/CyLib.c ****         
 283:Generated_Source\PSoC4/CyLib.c ****         /* Get current IMO frequency based on the register value */
 284:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 285:Generated_Source\PSoC4/CyLib.c ****             freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 286:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
  65              		.loc 1 286 0
  66 0000 0023     		movs	r3, #0
 287:Generated_Source\PSoC4/CyLib.c ****             {
 288:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
  67              		.loc 1 288 0
  68 0002 3F20     		movs	r0, #63
 276:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
  69              		.loc 1 276 0
  70 0004 30B5     		push	{r4, r5, lr}
  71              		.cfi_def_cfa_offset 12
  72              		.cfi_offset 4, -12
  73              		.cfi_offset 5, -8
  74              		.cfi_offset 14, -4
  75              		.loc 1 288 0
  76 0006 0C49     		ldr	r1, .L10
  77 0008 0C4C     		ldr	r4, .L10+4
  78              	.LVL1:
  79              	.L7:
  80 000a 0A68     		ldr	r2, [r1]
  81 000c 1D5D     		ldrb	r5, [r3, r4]
  82 000e 0240     		ands	r2, r0
  83 0010 AA42     		cmp	r2, r5
  84 0012 01D1     		bne	.L5
 289:Generated_Source\PSoC4/CyLib.c ****                 {
 290:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
  85              		.loc 1 290 0
  86 0014 0333     		adds	r3, r3, #3
  87              	.LVL2:
 291:Generated_Source\PSoC4/CyLib.c ****                     break;
  88              		.loc 1 291 0
  89 0016 03E0     		b	.L6
  90              	.LVL3:
  91              	.L5:
 286:Generated_Source\PSoC4/CyLib.c ****             {
  92              		.loc 1 286 0 discriminator 2
  93 0018 0133     		adds	r3, r3, #1
  94              	.LVL4:
  95 001a 2E2B     		cmp	r3, #46
  96 001c F5D1     		bne	.L7
 285:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
  97              		.loc 1 285 0
  98 001e 2B3B     		subs	r3, r3, #43
  99              	.LVL5:
 100              	.L6:
 292:Generated_Source\PSoC4/CyLib.c ****                 }
 293:Generated_Source\PSoC4/CyLib.c ****             }
 294:Generated_Source\PSoC4/CyLib.c ****         #else
 295:Generated_Source\PSoC4/CyLib.c ****             /* Calculate frequency by shifting register field value and adding constant. */
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 8


 296:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSLT)
 297:Generated_Source\PSoC4/CyLib.c ****                 freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_FRE
 298:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_MHZ
 299:Generated_Source\PSoC4/CyLib.c ****                                   ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT) & 
 300:Generated_Source\PSoC4/CyLib.c ****                                    (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 301:Generated_Source\PSoC4/CyLib.c ****             #else
 302:Generated_Source\PSoC4/CyLib.c ****                 freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_FREQ
 303:Generated_Source\PSoC4/CyLib.c ****                                    CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 304:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSLT) */
 305:Generated_Source\PSoC4/CyLib.c **** 
 306:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 307:Generated_Source\PSoC4/CyLib.c **** 
 308:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 101              		.loc 1 308 0
 102 0020 0749     		ldr	r1, .L10+8
 103 0022 084A     		ldr	r2, .L10+12
 104 0024 0868     		ldr	r0, [r1]
 309:Generated_Source\PSoC4/CyLib.c ****         
 310:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSLT)
 311:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 312:Generated_Source\PSoC4/CyLib.c ****         #else
 313:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 314:Generated_Source\PSoC4/CyLib.c ****         #endif
 315:Generated_Source\PSoC4/CyLib.c ****     }
 105              		.loc 1 315 0
 106              		@ sp needed
 308:Generated_Source\PSoC4/CyLib.c ****         
 107              		.loc 1 308 0
 108 0026 0240     		ands	r2, r0
 109 0028 0A60     		str	r2, [r1]
 313:Generated_Source\PSoC4/CyLib.c ****         #endif
 110              		.loc 1 313 0
 111 002a 074A     		ldr	r2, .L10+16
 112 002c 9B18     		adds	r3, r3, r2
 113              	.LVL6:
 114 002e 1B78     		ldrb	r3, [r3]
 115              	.LVL7:
 116 0030 064A     		ldr	r2, .L10+20
 117 0032 DBB2     		uxtb	r3, r3
 118 0034 1360     		str	r3, [r2]
 119              		.loc 1 315 0
 120 0036 30BD     		pop	{r4, r5, pc}
 121              	.L11:
 122              		.align	2
 123              	.L10:
 124 0038 2CFF0B40 		.word	1074528044
 125 003c 00000000 		.word	.LANCHOR0
 126 0040 00002240 		.word	1075970048
 127 0044 FFFFFFBF 		.word	-1073741825
 128 0048 CDF1FF0F 		.word	268431821
 129 004c 28FF0B40 		.word	1074528040
 130              		.cfi_endproc
 131              	.LFE4:
 132              		.size	CySysClkImoDisableWcoLock, .-CySysClkImoDisableWcoLock
 133              		.section	.text.CySysClkImoStop,"ax",%progbits
 134              		.align	1
 135              		.global	CySysClkImoStop
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 9


 136              		.code	16
 137              		.thumb_func
 138              		.type	CySysClkImoStop, %function
 139              	CySysClkImoStop:
 140              	.LFB2:
 131:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 141              		.loc 1 131 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 10B5     		push	{r4, lr}
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 4, -8
 148              		.cfi_offset 14, -4
 133:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 149              		.loc 1 133 0
 150 0002 FFF7FEFF 		bl	CySysClkImoDisableWcoLock
 151              	.LVL8:
 140:Generated_Source\PSoC4/CyLib.c **** }
 152              		.loc 1 140 0
 153 0006 034A     		ldr	r2, .L13
 141:Generated_Source\PSoC4/CyLib.c **** 
 154              		.loc 1 141 0
 155              		@ sp needed
 140:Generated_Source\PSoC4/CyLib.c **** }
 156              		.loc 1 140 0
 157 0008 1368     		ldr	r3, [r2]
 158 000a 5B00     		lsls	r3, r3, #1
 159 000c 5B08     		lsrs	r3, r3, #1
 160 000e 1360     		str	r3, [r2]
 141:Generated_Source\PSoC4/CyLib.c **** 
 161              		.loc 1 141 0
 162 0010 10BD     		pop	{r4, pc}
 163              	.L14:
 164 0012 C046     		.align	2
 165              	.L13:
 166 0014 08010B40 		.word	1074462984
 167              		.cfi_endproc
 168              	.LFE2:
 169              		.size	CySysClkImoStop, .-CySysClkImoStop
 170              		.section	.text.CySysClkImoGetWcoLock,"ax",%progbits
 171              		.align	1
 172              		.global	CySysClkImoGetWcoLock
 173              		.code	16
 174              		.thumb_func
 175              		.type	CySysClkImoGetWcoLock, %function
 176              	CySysClkImoGetWcoLock:
 177              	.LFB5:
 316:Generated_Source\PSoC4/CyLib.c **** 
 317:Generated_Source\PSoC4/CyLib.c **** 
 318:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 319:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 320:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 321:Generated_Source\PSoC4/CyLib.c ****     *
 322:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 323:Generated_Source\PSoC4/CyLib.c ****     *
 324:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 10


 325:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC Analog Coprocessor / PSoC 4200L.
 326:Generated_Source\PSoC4/CyLib.c ****     *
 327:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 328:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 329:Generated_Source\PSoC4/CyLib.c ****     *
 330:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 331:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 332:Generated_Source\PSoC4/CyLib.c ****     {
 178              		.loc 1 332 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 333:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 183              		.loc 1 333 0
 184 0000 024B     		ldr	r3, .L16
 334:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 335:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 336:Generated_Source\PSoC4/CyLib.c ****     }
 185              		.loc 1 336 0
 186              		@ sp needed
 333:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 187              		.loc 1 333 0
 188 0002 1868     		ldr	r0, [r3]
 189 0004 4000     		lsls	r0, r0, #1
 190 0006 C00F     		lsrs	r0, r0, #31
 191              		.loc 1 336 0
 192 0008 7047     		bx	lr
 193              	.L17:
 194 000a C046     		.align	2
 195              	.L16:
 196 000c 00002240 		.word	1075970048
 197              		.cfi_endproc
 198              	.LFE5:
 199              		.size	CySysClkImoGetWcoLock, .-CySysClkImoGetWcoLock
 200              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
 201              		.align	1
 202              		.global	CySysClkWriteHfclkDirect
 203              		.code	16
 204              		.thumb_func
 205              		.type	CySysClkWriteHfclkDirect, %function
 206              	CySysClkWriteHfclkDirect:
 207              	.LFB6:
 337:Generated_Source\PSoC4/CyLib.c **** 
 338:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 339:Generated_Source\PSoC4/CyLib.c **** 
 340:Generated_Source\PSoC4/CyLib.c **** 
 341:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 342:Generated_Source\PSoC4/CyLib.c **** 
 343:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 344:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 345:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 346:Generated_Source\PSoC4/CyLib.c ****     *
 347:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 348:Generated_Source\PSoC4/CyLib.c ****     *
 349:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 350:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 11


 351:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 352:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 353:Generated_Source\PSoC4/CyLib.c ****     *
 354:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 355:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 356:Generated_Source\PSoC4/CyLib.c ****     *
 357:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 358:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 359:Generated_Source\PSoC4/CyLib.c ****     {
 360:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 361:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 362:Generated_Source\PSoC4/CyLib.c ****             
 363:Generated_Source\PSoC4/CyLib.c ****             /* Check for new trim algorithm */
 364:Generated_Source\PSoC4/CyLib.c ****             uint32 CySysClkUsbCuSortTrim = ((CY_SFLASH_S1_TESTPGM_OLD_REV < (CY_SFLASH_S1_TESTPGM_R
 365:Generated_Source\PSoC4/CyLib.c ****                                                                             CY_SFLASH_S1_TESTPGM_RE
 366:Generated_Source\PSoC4/CyLib.c **** 
 367:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 368:Generated_Source\PSoC4/CyLib.c ****             uint32 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 369:Generated_Source\PSoC4/CyLib.c **** 
 370:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 371:Generated_Source\PSoC4/CyLib.c ****             {
 372:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
 373:Generated_Source\PSoC4/CyLib.c ****                 {
 374:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 375:Generated_Source\PSoC4/CyLib.c ****                     break;
 376:Generated_Source\PSoC4/CyLib.c ****                 }
 377:Generated_Source\PSoC4/CyLib.c ****             }
 378:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 379:Generated_Source\PSoC4/CyLib.c ****         
 380:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 381:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 382:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 383:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 384:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 385:Generated_Source\PSoC4/CyLib.c **** 
 386:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 387:Generated_Source\PSoC4/CyLib.c ****            
 388:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 389:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG;
 390:Generated_Source\PSoC4/CyLib.c ****             
 391:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkUsbCuSortTrim)
 392:Generated_Source\PSoC4/CyLib.c ****             {
 393:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoTrim5 = CY_PWR_BG_TRIM5_REG;
 394:Generated_Source\PSoC4/CyLib.c ****                 
 395:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM4_REG = (CySysClkImoTrim4 & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_
 396:Generated_Source\PSoC4/CyLib.c ****                                             CY_SFLASH_USBMODE_IMO_GAIN_TRIM_REG;
 397:Generated_Source\PSoC4/CyLib.c ****                 CY_PWR_BG_TRIM5_REG = CY_SFLASH_USBMODE_IMO_TEMPCO_REG;
 398:Generated_Source\PSoC4/CyLib.c ****                 
 399:Generated_Source\PSoC4/CyLib.c ****             }
 400:Generated_Source\PSoC4/CyLib.c ****             else
 401:Generated_Source\PSoC4/CyLib.c ****             {
 402:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM4_REG = (CySysClkImoTrim4 & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_
 403:Generated_Source\PSoC4/CyLib.c ****                                             CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 404:Generated_Source\PSoC4/CyLib.c **** 
 405:Generated_Source\PSoC4/CyLib.c ****             }
 406:Generated_Source\PSoC4/CyLib.c **** 
 407:Generated_Source\PSoC4/CyLib.c ****             if (48u == freq)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 12


 408:Generated_Source\PSoC4/CyLib.c ****             {
 409:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (0u != CySysClkUsbCuSortTrim) ? 
 410:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_CU_IMO_TRIM_USBMODE_48_REG :
 411:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 412:Generated_Source\PSoC4/CyLib.c ****             }
 413:Generated_Source\PSoC4/CyLib.c ****             else if (24u == freq)
 414:Generated_Source\PSoC4/CyLib.c ****             {
 415:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (0u != CySysClkUsbCuSortTrim) ? 
 416:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_CU_IMO_TRIM_USBMODE_24_REG :
 417:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 418:Generated_Source\PSoC4/CyLib.c ****             }
 419:Generated_Source\PSoC4/CyLib.c ****             else
 420:Generated_Source\PSoC4/CyLib.c ****             {
 421:Generated_Source\PSoC4/CyLib.c ****                 /* Do nothing */
 422:Generated_Source\PSoC4/CyLib.c ****             }
 423:Generated_Source\PSoC4/CyLib.c ****             
 424:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 425:Generated_Source\PSoC4/CyLib.c **** 
 426:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 427:Generated_Source\PSoC4/CyLib.c ****     }
 428:Generated_Source\PSoC4/CyLib.c **** 
 429:Generated_Source\PSoC4/CyLib.c **** 
 430:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 431:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 432:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 433:Generated_Source\PSoC4/CyLib.c ****     *
 434:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 435:Generated_Source\PSoC4/CyLib.c ****     *
 436:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 437:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 438:Generated_Source\PSoC4/CyLib.c ****     *
 439:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 440:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 441:Generated_Source\PSoC4/CyLib.c ****     *
 442:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 443:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 444:Generated_Source\PSoC4/CyLib.c ****     {
 445:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 446:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 447:Generated_Source\PSoC4/CyLib.c ****             
 448:Generated_Source\PSoC4/CyLib.c ****             /* Check for new trim algorithm */
 449:Generated_Source\PSoC4/CyLib.c ****             uint32 CySysClkUsbCuSortTrim = ((CY_SFLASH_S1_TESTPGM_OLD_REV < (CY_SFLASH_S1_TESTPGM_R
 450:Generated_Source\PSoC4/CyLib.c ****                                                                             CY_SFLASH_S1_TESTPGM_RE
 451:Generated_Source\PSoC4/CyLib.c **** 
 452:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 453:Generated_Source\PSoC4/CyLib.c ****             uint32 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;;
 454:Generated_Source\PSoC4/CyLib.c **** 
 455:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 456:Generated_Source\PSoC4/CyLib.c ****             {
 457:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
 458:Generated_Source\PSoC4/CyLib.c ****                 {
 459:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 460:Generated_Source\PSoC4/CyLib.c ****                     break;
 461:Generated_Source\PSoC4/CyLib.c ****                 }
 462:Generated_Source\PSoC4/CyLib.c ****             }           
 463:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 464:Generated_Source\PSoC4/CyLib.c ****         
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 13


 465:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 466:Generated_Source\PSoC4/CyLib.c **** 
 467:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 468:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 469:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = ((CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_
 470:Generated_Source\PSoC4/CyLib.c ****                                         (CySysClkImoTrim4 & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK));
 471:Generated_Source\PSoC4/CyLib.c **** 
 472:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkUsbCuSortTrim)
 473:Generated_Source\PSoC4/CyLib.c ****             {
 474:Generated_Source\PSoC4/CyLib.c ****                 CY_PWR_BG_TRIM5_REG = CySysClkImoTrim5;
 475:Generated_Source\PSoC4/CyLib.c ****             }
 476:Generated_Source\PSoC4/CyLib.c ****             
 477:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 478:Generated_Source\PSoC4/CyLib.c ****             
 479:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 480:Generated_Source\PSoC4/CyLib.c ****     }
 481:Generated_Source\PSoC4/CyLib.c **** 
 482:Generated_Source\PSoC4/CyLib.c **** 
 483:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 484:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 485:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 486:Generated_Source\PSoC4/CyLib.c ****     *
 487:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 488:Generated_Source\PSoC4/CyLib.c ****     *
 489:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 490:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 491:Generated_Source\PSoC4/CyLib.c ****     *
 492:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 493:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 494:Generated_Source\PSoC4/CyLib.c ****     *
 495:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 496:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 497:Generated_Source\PSoC4/CyLib.c ****     {
 498:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 499:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 500:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 501:Generated_Source\PSoC4/CyLib.c ****     }
 502:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 503:Generated_Source\PSoC4/CyLib.c **** 
 504:Generated_Source\PSoC4/CyLib.c **** 
 505:Generated_Source\PSoC4/CyLib.c **** 
 506:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 507:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 508:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 509:Generated_Source\PSoC4/CyLib.c **** *
 510:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 511:Generated_Source\PSoC4/CyLib.c **** *
 512:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 513:Generated_Source\PSoC4/CyLib.c **** *
 514:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 515:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 516:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 517:Generated_Source\PSoC4/CyLib.c **** *
 518:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 519:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 520:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 521:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 14


 522:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 523:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 524:Generated_Source\PSoC4/CyLib.c **** *
 525:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 526:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 527:Generated_Source\PSoC4/CyLib.c **** *
 528:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 529:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 530:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 531:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 532:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L /
 533:Generated_Source\PSoC4/CyLib.c **** *                          4100S with ECO.
 534:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L /
 535:Generated_Source\PSoC4/CyLib.c **** *                          4100S with PLL.
 536:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 537:Generated_Source\PSoC4/CyLib.c **** *
 538:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 539:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 540:Generated_Source\PSoC4/CyLib.c **** {
 208              		.loc 1 540 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL9:
 213 0000 10B5     		push	{r4, lr}
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 4, -8
 216              		.cfi_offset 14, -4
 217              		.loc 1 540 0
 218 0002 0400     		movs	r4, r0
 541:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 542:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 543:Generated_Source\PSoC4/CyLib.c ****     
 544:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SRSSLT && CY_IP_PLL)
 545:Generated_Source\PSoC4/CyLib.c ****         uint8 i = 0u;
 546:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 547:Generated_Source\PSoC4/CyLib.c **** 
 548:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 219              		.loc 1 548 0
 220 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 221              	.LVL10:
 549:Generated_Source\PSoC4/CyLib.c **** 
 550:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSLT && CY_IP_PLL)
 551:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_ECO == clkSelect))
 552:Generated_Source\PSoC4/CyLib.c ****     {
 553:Generated_Source\PSoC4/CyLib.c ****         tmpReg = CY_SYS_CLK_SELECT_REG & ~CY_SYS_CLK_SELECT_DIRECT_SEL_MASK;
 554:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= CY_SYS_CLK_HFCLK_IMO;
 555:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = tmpReg;        
 556:Generated_Source\PSoC4/CyLib.c ****         
 557:Generated_Source\PSoC4/CyLib.c ****         /* SRSSLT block does not have registers to select PLL. It is part of EXCO */ 
 558:Generated_Source\PSoC4/CyLib.c ****         tmpReg = CY_SYS_ECO_CLK_SELECT_REG & ~CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK;
 559:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= ((clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_PLL_MASK) >> CY_SYS_CLK_SELECT_HFCLK_PL
 560:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_ECO_CLK_SELECT_REG = tmpReg;
 561:Generated_Source\PSoC4/CyLib.c ****         
 562:Generated_Source\PSoC4/CyLib.c ****         /* Generate clock sequence to change clock source in CY_SYS_ECO_CLK_SELECT_REG */
 563:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
 564:Generated_Source\PSoC4/CyLib.c ****         
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 15


 565:Generated_Source\PSoC4/CyLib.c ****         for(i = 0u; i < CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR; i++)
 566:Generated_Source\PSoC4/CyLib.c ****         {
 567:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
 568:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
 569:Generated_Source\PSoC4/CyLib.c ****         }
 570:Generated_Source\PSoC4/CyLib.c ****         
 571:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;    
 572:Generated_Source\PSoC4/CyLib.c ****     }
 573:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 574:Generated_Source\PSoC4/CyLib.c **** 
 575:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 222              		.loc 1 575 0
 223 0008 0723     		movs	r3, #7
 224 000a 0449     		ldr	r1, .L19
 576:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 577:Generated_Source\PSoC4/CyLib.c **** 
 578:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 579:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 580:Generated_Source\PSoC4/CyLib.c ****     {
 581:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 582:Generated_Source\PSoC4/CyLib.c ****     }
 583:Generated_Source\PSoC4/CyLib.c ****     else
 584:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 585:Generated_Source\PSoC4/CyLib.c ****     {
 586:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 587:Generated_Source\PSoC4/CyLib.c ****     }   
 588:Generated_Source\PSoC4/CyLib.c ****     
 589:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 590:Generated_Source\PSoC4/CyLib.c ****     
 591:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 592:Generated_Source\PSoC4/CyLib.c **** }
 225              		.loc 1 592 0
 226              		@ sp needed
 575:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 227              		.loc 1 575 0
 228 000c 0A68     		ldr	r2, [r1]
 229 000e 9A43     		bics	r2, r3
 230              	.LVL11:
 586:Generated_Source\PSoC4/CyLib.c ****     }   
 231              		.loc 1 586 0
 232 0010 2340     		ands	r3, r4
 233 0012 1343     		orrs	r3, r2
 234              	.LVL12:
 589:Generated_Source\PSoC4/CyLib.c ****     
 235              		.loc 1 589 0
 236 0014 0B60     		str	r3, [r1]
 591:Generated_Source\PSoC4/CyLib.c **** }
 237              		.loc 1 591 0
 238 0016 FFF7FEFF 		bl	CyExitCriticalSection
 239              	.LVL13:
 240              	.LVL14:
 241              		.loc 1 592 0
 242 001a 10BD     		pop	{r4, pc}
 243              	.L20:
 244              		.align	2
 245              	.L19:
 246 001c 00010B40 		.word	1074462976
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 16


 247              		.cfi_endproc
 248              	.LFE6:
 249              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 250              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 251              		.align	1
 252              		.global	CySysEnablePumpClock
 253              		.code	16
 254              		.thumb_func
 255              		.type	CySysEnablePumpClock, %function
 256              	CySysEnablePumpClock:
 257              	.LFB7:
 593:Generated_Source\PSoC4/CyLib.c **** 
 594:Generated_Source\PSoC4/CyLib.c **** 
 595:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 596:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 597:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 598:Generated_Source\PSoC4/CyLib.c **** *
 599:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
 600:Generated_Source\PSoC4/CyLib.c **** *
 601:Generated_Source\PSoC4/CyLib.c **** * \param enable  
 602:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 603:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of 
 604:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 605:Generated_Source\PSoC4/CyLib.c **** *
 606:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 607:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation 
 608:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 609:Generated_Source\PSoC4/CyLib.c **** *
 610:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 611:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 612:Generated_Source\PSoC4/CyLib.c **** {
 258              		.loc 1 612 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL15:
 263 0000 10B5     		push	{r4, lr}
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
 267 0002 094B     		ldr	r3, .L25
 268 0004 094C     		ldr	r4, .L25+4
 613:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 614:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 269              		.loc 1 614 0
 270 0006 C207     		lsls	r2, r0, #31
 271 0008 04D5     		bpl	.L22
 615:Generated_Source\PSoC4/CyLib.c ****         {
 616:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 272              		.loc 1 616 0
 273 000a 2268     		ldr	r2, [r4]
 274 000c 1968     		ldr	r1, [r3]
 275 000e 5206     		lsls	r2, r2, #25
 276 0010 0A43     		orrs	r2, r1
 277 0012 06E0     		b	.L24
 278              	.L22:
 617:Generated_Source\PSoC4/CyLib.c ****         }
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 17


 618:Generated_Source\PSoC4/CyLib.c ****         else
 619:Generated_Source\PSoC4/CyLib.c ****         {
 620:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 279              		.loc 1 620 0
 280 0014 1A68     		ldr	r2, [r3]
 281 0016 1201     		lsls	r2, r2, #4
 282 0018 520F     		lsrs	r2, r2, #29
 283 001a 2260     		str	r2, [r4]
 621:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 622:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 284              		.loc 1 622 0
 285 001c 1968     		ldr	r1, [r3]
 286 001e 044A     		ldr	r2, .L25+8
 287 0020 0A40     		ands	r2, r1
 288              	.L24:
 289 0022 1A60     		str	r2, [r3]
 623:Generated_Source\PSoC4/CyLib.c ****         }
 624:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 625:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 626:Generated_Source\PSoC4/CyLib.c ****         {
 627:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 628:Generated_Source\PSoC4/CyLib.c ****         }
 629:Generated_Source\PSoC4/CyLib.c ****         else
 630:Generated_Source\PSoC4/CyLib.c ****         {
 631:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) & 
 632:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 633:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 634:Generated_Source\PSoC4/CyLib.c ****         }
 635:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 636:Generated_Source\PSoC4/CyLib.c **** }
 290              		.loc 1 636 0
 291              		@ sp needed
 292 0024 10BD     		pop	{r4, pc}
 293              	.L26:
 294 0026 C046     		.align	2
 295              	.L25:
 296 0028 08010B40 		.word	1074462984
 297 002c 00000000 		.word	.LANCHOR1
 298 0030 FFFFFFF1 		.word	-234881025
 299              		.cfi_endproc
 300              	.LFE7:
 301              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 302              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 303              		.align	1
 304              		.global	CySysClkGetSysclkSource
 305              		.code	16
 306              		.thumb_func
 307              		.type	CySysClkGetSysclkSource, %function
 308              	CySysClkGetSysclkSource:
 309              	.LFB8:
 637:Generated_Source\PSoC4/CyLib.c **** 
 638:Generated_Source\PSoC4/CyLib.c **** 
 639:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 640:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 641:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 642:Generated_Source\PSoC4/CyLib.c **** *
 643:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 18


 644:Generated_Source\PSoC4/CyLib.c **** *
 645:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 646:Generated_Source\PSoC4/CyLib.c **** *
 647:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 648:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 649:Generated_Source\PSoC4/CyLib.c **** {
 310              		.loc 1 649 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314 0000 10B5     		push	{r4, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 4, -8
 317              		.cfi_offset 14, -4
 650:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 651:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 652:Generated_Source\PSoC4/CyLib.c **** 
 653:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 318              		.loc 1 653 0
 319 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 320              	.LVL16:
 654:Generated_Source\PSoC4/CyLib.c **** 
 655:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 656:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 657:Generated_Source\PSoC4/CyLib.c ****     {
 658:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 659:Generated_Source\PSoC4/CyLib.c ****     }
 660:Generated_Source\PSoC4/CyLib.c ****     else
 661:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 662:Generated_Source\PSoC4/CyLib.c ****     {
 663:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 321              		.loc 1 663 0
 322 0006 034B     		ldr	r3, .L28
 664:Generated_Source\PSoC4/CyLib.c **** 
 665:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SRSSLT && CY_IP_PLL)
 666:Generated_Source\PSoC4/CyLib.c ****         sysclkSource |= (((uint32)(CY_SYS_ECO_CLK_SELECT_REG & CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK))
 667:Generated_Source\PSoC4/CyLib.c ****                          CY_SYS_CLK_SELECT_HFCLK_PLL_SHIFT);
 668:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 669:Generated_Source\PSoC4/CyLib.c ****         
 670:Generated_Source\PSoC4/CyLib.c ****     }
 671:Generated_Source\PSoC4/CyLib.c **** 
 672:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 673:Generated_Source\PSoC4/CyLib.c **** 
 674:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 675:Generated_Source\PSoC4/CyLib.c **** }
 323              		.loc 1 675 0
 324              		@ sp needed
 663:Generated_Source\PSoC4/CyLib.c **** 
 325              		.loc 1 663 0
 326 0008 1C68     		ldr	r4, [r3]
 327              	.LVL17:
 672:Generated_Source\PSoC4/CyLib.c **** 
 328              		.loc 1 672 0
 329 000a FFF7FEFF 		bl	CyExitCriticalSection
 330              	.LVL18:
 674:Generated_Source\PSoC4/CyLib.c **** }
 331              		.loc 1 674 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 19


 332 000e 0720     		movs	r0, #7
 333 0010 2040     		ands	r0, r4
 334              	.LVL19:
 335              		.loc 1 675 0
 336 0012 10BD     		pop	{r4, pc}
 337              	.L29:
 338              		.align	2
 339              	.L28:
 340 0014 00010B40 		.word	1074462976
 341              		.cfi_endproc
 342              	.LFE8:
 343              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 344              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 345              		.align	1
 346              		.global	CySysClkWriteSysclkDiv
 347              		.code	16
 348              		.thumb_func
 349              		.type	CySysClkWriteSysclkDiv, %function
 350              	CySysClkWriteSysclkDiv:
 351              	.LFB9:
 676:Generated_Source\PSoC4/CyLib.c **** 
 677:Generated_Source\PSoC4/CyLib.c **** 
 678:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 679:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 680:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 681:Generated_Source\PSoC4/CyLib.c **** *
 682:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 683:Generated_Source\PSoC4/CyLib.c **** *
 684:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 685:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 686:Generated_Source\PSoC4/CyLib.c **** *
 687:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 688:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 689:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 690:Generated_Source\PSoC4/CyLib.c **** *
 691:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 692:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 693:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 694:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 695:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 696:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 697:Generated_Source\PSoC4/CyLib.c **** *
 698:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 699:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 700:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 701:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 702:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 703:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 704:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 705:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 706:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 707:Generated_Source\PSoC4/CyLib.c **** *
 708:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 709:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 710:Generated_Source\PSoC4/CyLib.c **** {
 352              		.loc 1 710 0
 353              		.cfi_startproc
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 20


 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL20:
 357 0000 70B5     		push	{r4, r5, r6, lr}
 358              		.cfi_def_cfa_offset 16
 359              		.cfi_offset 4, -16
 360              		.cfi_offset 5, -12
 361              		.cfi_offset 6, -8
 362              		.cfi_offset 14, -4
 363              		.loc 1 710 0
 364 0002 0400     		movs	r4, r0
 711:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 712:Generated_Source\PSoC4/CyLib.c **** 
 713:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 365              		.loc 1 713 0
 366 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 367              	.LVL21:
 714:Generated_Source\PSoC4/CyLib.c **** 
 715:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 716:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 368              		.loc 1 716 0
 369 0008 E104     		lsls	r1, r4, #19
 370 000a E024     		movs	r4, #224
 371              	.LVL22:
 717:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 372              		.loc 1 717 0
 373 000c 054D     		ldr	r5, .L31
 716:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 374              		.loc 1 716 0
 375 000e A403     		lsls	r4, r4, #14
 376              		.loc 1 717 0
 377 0010 2B68     		ldr	r3, [r5]
 716:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 378              		.loc 1 716 0
 379 0012 054A     		ldr	r2, .L31+4
 380 0014 2140     		ands	r1, r4
 381 0016 1A40     		ands	r2, r3
 382 0018 0B00     		movs	r3, r1
 383 001a 1343     		orrs	r3, r2
 715:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 384              		.loc 1 715 0
 385 001c 2B60     		str	r3, [r5]
 718:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 719:Generated_Source\PSoC4/CyLib.c **** 
 720:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 386              		.loc 1 720 0
 387 001e FFF7FEFF 		bl	CyExitCriticalSection
 388              	.LVL23:
 721:Generated_Source\PSoC4/CyLib.c **** }
 389              		.loc 1 721 0
 390              		@ sp needed
 391 0022 70BD     		pop	{r4, r5, r6, pc}
 392              	.L32:
 393              		.align	2
 394              	.L31:
 395 0024 00010B40 		.word	1074462976
 396 0028 FFFFC7FF 		.word	-3670017
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 21


 397              		.cfi_endproc
 398              	.LFE9:
 399              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 400              		.section	.text.CySysLvdDisable,"ax",%progbits
 401              		.align	1
 402              		.global	CySysLvdDisable
 403              		.code	16
 404              		.thumb_func
 405              		.type	CySysLvdDisable, %function
 406              	CySysLvdDisable:
 407              	.LFB12:
 722:Generated_Source\PSoC4/CyLib.c **** 
 723:Generated_Source\PSoC4/CyLib.c **** 
 724:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 725:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 726:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 727:Generated_Source\PSoC4/CyLib.c **** *
 728:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 729:Generated_Source\PSoC4/CyLib.c **** *
 730:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 731:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 732:Generated_Source\PSoC4/CyLib.c **** *
 733:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 734:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 735:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 736:Generated_Source\PSoC4/CyLib.c **** *
 737:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 738:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 739:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 740:Generated_Source\PSoC4/CyLib.c **** *
 741:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 742:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 743:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 744:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 745:Generated_Source\PSoC4/CyLib.c **** *
 746:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 747:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 748:Generated_Source\PSoC4/CyLib.c **** *
 749:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 750:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 751:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 752:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 753:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 754:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 755:Generated_Source\PSoC4/CyLib.c **** *
 756:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 757:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 758:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 759:Generated_Source\PSoC4/CyLib.c **** *
 760:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 761:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 762:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor: Valid range [24-48] with 
 763:Generated_Source\PSoC4/CyLib.c **** * step size equals 4.
 764:Generated_Source\PSoC4/CyLib.c **** *
 765:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 766:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 767:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 22


 768:Generated_Source\PSoC4/CyLib.c ****     {
 769:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 770:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 771:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 772:Generated_Source\PSoC4/CyLib.c ****         #else
 773:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 774:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 775:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 776:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 777:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 778:Generated_Source\PSoC4/CyLib.c **** 
 779:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 780:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 781:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 782:Generated_Source\PSoC4/CyLib.c **** 
 783:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 784:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 785:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 786:Generated_Source\PSoC4/CyLib.c **** 
 787:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 788:Generated_Source\PSoC4/CyLib.c **** 
 789:Generated_Source\PSoC4/CyLib.c **** 
 790:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 791:Generated_Source\PSoC4/CyLib.c **** 
 792:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 793:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 794:Generated_Source\PSoC4/CyLib.c ****             {
 795:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 796:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 797:Generated_Source\PSoC4/CyLib.c ****             }
 798:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 799:Generated_Source\PSoC4/CyLib.c **** 
 800:Generated_Source\PSoC4/CyLib.c **** 
 801:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 802:Generated_Source\PSoC4/CyLib.c **** 
 803:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 804:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 805:Generated_Source\PSoC4/CyLib.c ****                 {
 806:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 807:Generated_Source\PSoC4/CyLib.c **** 
 808:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 809:Generated_Source\PSoC4/CyLib.c ****                 {
 810:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 811:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
 812:Generated_Source\PSoC4/CyLib.c ****                 }
 813:Generated_Source\PSoC4/CyLib.c **** 
 814:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 815:Generated_Source\PSoC4/CyLib.c ****                 }
 816:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 817:Generated_Source\PSoC4/CyLib.c **** 
 818:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 819:Generated_Source\PSoC4/CyLib.c **** 
 820:Generated_Source\PSoC4/CyLib.c **** 
 821:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 822:Generated_Source\PSoC4/CyLib.c **** 
 823:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 824:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 23


 825:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 826:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 827:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 828:Generated_Source\PSoC4/CyLib.c **** 
 829:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 830:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 831:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 832:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 833:Generated_Source\PSoC4/CyLib.c **** 
 834:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 835:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 836:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 837:Generated_Source\PSoC4/CyLib.c **** 
 838:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 839:Generated_Source\PSoC4/CyLib.c **** 
 840:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 841:Generated_Source\PSoC4/CyLib.c ****         {
 842:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 843:Generated_Source\PSoC4/CyLib.c ****             {
 844:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 845:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 846:Generated_Source\PSoC4/CyLib.c ****             }
 847:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 848:Generated_Source\PSoC4/CyLib.c ****             {
 849:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 850:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 851:Generated_Source\PSoC4/CyLib.c ****             }
 852:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 853:Generated_Source\PSoC4/CyLib.c ****             {
 854:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 855:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 856:Generated_Source\PSoC4/CyLib.c ****             }
 857:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 858:Generated_Source\PSoC4/CyLib.c ****             {
 859:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 860:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 861:Generated_Source\PSoC4/CyLib.c ****             }
 862:Generated_Source\PSoC4/CyLib.c ****             else
 863:Generated_Source\PSoC4/CyLib.c ****             {
 864:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 865:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 866:Generated_Source\PSoC4/CyLib.c ****             }
 867:Generated_Source\PSoC4/CyLib.c **** 
 868:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 869:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 870:Generated_Source\PSoC4/CyLib.c **** 
 871:Generated_Source\PSoC4/CyLib.c **** 
 872:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 873:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 874:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 875:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 876:Generated_Source\PSoC4/CyLib.c ****             *
 877:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 878:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 879:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 880:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 881:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 24


 882:Generated_Source\PSoC4/CyLib.c ****             {
 883:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 884:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 885:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 886:Generated_Source\PSoC4/CyLib.c **** 
 887:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 888:Generated_Source\PSoC4/CyLib.c **** 
 889:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 890:Generated_Source\PSoC4/CyLib.c ****             }
 891:Generated_Source\PSoC4/CyLib.c ****             else
 892:Generated_Source\PSoC4/CyLib.c ****             {
 893:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 894:Generated_Source\PSoC4/CyLib.c ****             }
 895:Generated_Source\PSoC4/CyLib.c **** 
 896:Generated_Source\PSoC4/CyLib.c **** 
 897:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 898:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 899:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 900:Generated_Source\PSoC4/CyLib.c ****             *
 901:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 902:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 903:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 904:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 905:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 906:Generated_Source\PSoC4/CyLib.c ****             {
 907:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 908:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 909:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 910:Generated_Source\PSoC4/CyLib.c ****             }
 911:Generated_Source\PSoC4/CyLib.c **** 
 912:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 913:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_T
 914:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 915:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 916:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 917:Generated_Source\PSoC4/CyLib.c **** 
 918:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 919:Generated_Source\PSoC4/CyLib.c ****             {
 920:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 921:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 922:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 923:Generated_Source\PSoC4/CyLib.c ****             }
 924:Generated_Source\PSoC4/CyLib.c ****         }
 925:Generated_Source\PSoC4/CyLib.c ****         else
 926:Generated_Source\PSoC4/CyLib.c ****         {
 927:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 928:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 929:Generated_Source\PSoC4/CyLib.c ****         }
 930:Generated_Source\PSoC4/CyLib.c **** 
 931:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 932:Generated_Source\PSoC4/CyLib.c **** 
 933:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 934:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 935:Generated_Source\PSoC4/CyLib.c ****             {
 936:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 937:Generated_Source\PSoC4/CyLib.c ****             }
 938:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 25


 939:Generated_Source\PSoC4/CyLib.c **** 
 940:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 941:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 942:Generated_Source\PSoC4/CyLib.c ****             {
 943:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 944:Generated_Source\PSoC4/CyLib.c ****             }
 945:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 946:Generated_Source\PSoC4/CyLib.c **** 
 947:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 948:Generated_Source\PSoC4/CyLib.c ****     }
 949:Generated_Source\PSoC4/CyLib.c **** 
 950:Generated_Source\PSoC4/CyLib.c **** #else
 951:Generated_Source\PSoC4/CyLib.c **** 
 952:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 953:Generated_Source\PSoC4/CyLib.c ****     {
 954:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 955:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 956:Generated_Source\PSoC4/CyLib.c **** 
 957:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 958:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 959:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 960:Generated_Source\PSoC4/CyLib.c ****         
 961:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 962:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 963:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 964:Generated_Source\PSoC4/CyLib.c **** 
 965:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 966:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 967:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
 968:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
 969:Generated_Source\PSoC4/CyLib.c ****         #else
 970:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 971:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 972:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 973:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 974:Generated_Source\PSoC4/CyLib.c ****         {
 975:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 976:Generated_Source\PSoC4/CyLib.c **** 
 977:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 978:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 979:Generated_Source\PSoC4/CyLib.c ****                 {
 980:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 981:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 982:Generated_Source\PSoC4/CyLib.c ****                 }
 983:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 984:Generated_Source\PSoC4/CyLib.c **** 
 985:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 986:Generated_Source\PSoC4/CyLib.c **** 
 987:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 988:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 989:Generated_Source\PSoC4/CyLib.c ****                     {
 990:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 991:Generated_Source\PSoC4/CyLib.c **** 
 992:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 993:Generated_Source\PSoC4/CyLib.c ****                     {
 994:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 995:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 26


 996:Generated_Source\PSoC4/CyLib.c ****                     }
 997:Generated_Source\PSoC4/CyLib.c **** 
 998:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 999:Generated_Source\PSoC4/CyLib.c ****                     }
1000:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
1001:Generated_Source\PSoC4/CyLib.c **** 
1002:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
1003:Generated_Source\PSoC4/CyLib.c **** 
1004:Generated_Source\PSoC4/CyLib.c **** 
1005:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
1006:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
1007:Generated_Source\PSoC4/CyLib.c **** 
1008:Generated_Source\PSoC4/CyLib.c **** 
1009:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
1010:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1011:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
1012:Generated_Source\PSoC4/CyLib.c ****                 {
1013:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
1014:Generated_Source\PSoC4/CyLib.c ****                 }
1015:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
1016:Generated_Source\PSoC4/CyLib.c ****                 {
1017:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
1018:Generated_Source\PSoC4/CyLib.c ****                 }
1019:Generated_Source\PSoC4/CyLib.c ****                 else
1020:Generated_Source\PSoC4/CyLib.c ****                 {
1021:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
1022:Generated_Source\PSoC4/CyLib.c ****                 }
1023:Generated_Source\PSoC4/CyLib.c ****             #else
1024:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
1025:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1026:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
1027:Generated_Source\PSoC4/CyLib.c **** 
1028:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
1029:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
1030:Generated_Source\PSoC4/CyLib.c **** 
1031:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
1032:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
1033:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
1036:Generated_Source\PSoC4/CyLib.c **** 
1037:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
1038:Generated_Source\PSoC4/CyLib.c ****             {
1039:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
1040:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
1041:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
1042:Generated_Source\PSoC4/CyLib.c **** 
1043:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
1044:Generated_Source\PSoC4/CyLib.c **** 
1045:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
1046:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
1047:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
1048:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
1049:Generated_Source\PSoC4/CyLib.c ****             }
1050:Generated_Source\PSoC4/CyLib.c **** 
1051:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
1052:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 27


1053:Generated_Source\PSoC4/CyLib.c ****                 {
1054:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
1055:Generated_Source\PSoC4/CyLib.c ****                 }
1056:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
1057:Generated_Source\PSoC4/CyLib.c ****         
1058:Generated_Source\PSoC4/CyLib.c ****         
1059:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1060:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
1061:Generated_Source\PSoC4/CyLib.c ****                 {
1062:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
1063:Generated_Source\PSoC4/CyLib.c ****                 }
1064:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1065:Generated_Source\PSoC4/CyLib.c **** 
1066:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1067:Generated_Source\PSoC4/CyLib.c ****         }
1068:Generated_Source\PSoC4/CyLib.c ****         else
1069:Generated_Source\PSoC4/CyLib.c ****         {
1070:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
1071:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
1072:Generated_Source\PSoC4/CyLib.c ****         }
1073:Generated_Source\PSoC4/CyLib.c ****     }
1074:Generated_Source\PSoC4/CyLib.c **** 
1075:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
1076:Generated_Source\PSoC4/CyLib.c **** 
1077:Generated_Source\PSoC4/CyLib.c **** 
1078:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
1079:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1080:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
1081:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1082:Generated_Source\PSoC4/CyLib.c ****     *
1083:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
1084:Generated_Source\PSoC4/CyLib.c ****     *
1085:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
1086:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
1087:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
1088:Generated_Source\PSoC4/CyLib.c ****     *
1089:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
1090:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
1091:Generated_Source\PSoC4/CyLib.c ****     *
1092:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
1093:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
1094:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
1095:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
1096:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
1097:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
1098:Generated_Source\PSoC4/CyLib.c ****     *
1099:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
1100:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
1101:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
1102:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
1103:Generated_Source\PSoC4/CyLib.c ****     *
1104:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1105:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
1106:Generated_Source\PSoC4/CyLib.c ****     {
1107:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1108:Generated_Source\PSoC4/CyLib.c **** 
1109:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 28


1110:Generated_Source\PSoC4/CyLib.c **** 
1111:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
1112:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
1113:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
1114:Generated_Source\PSoC4/CyLib.c **** 
1115:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1116:Generated_Source\PSoC4/CyLib.c ****     }
1117:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
1118:Generated_Source\PSoC4/CyLib.c **** 
1119:Generated_Source\PSoC4/CyLib.c **** 
1120:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
1121:Generated_Source\PSoC4/CyLib.c **** 
1122:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1123:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
1124:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1125:Generated_Source\PSoC4/CyLib.c ****     *
1126:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1127:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1128:Generated_Source\PSoC4/CyLib.c ****     *
1129:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1130:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1131:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1132:Generated_Source\PSoC4/CyLib.c ****     * called.
1133:Generated_Source\PSoC4/CyLib.c ****     *
1134:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1135:Generated_Source\PSoC4/CyLib.c ****     *
1136:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1137:Generated_Source\PSoC4/CyLib.c ****     *
1138:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1139:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1140:Generated_Source\PSoC4/CyLib.c ****     *
1141:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1142:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1143:Generated_Source\PSoC4/CyLib.c ****     *
1144:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1145:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1146:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1147:Generated_Source\PSoC4/CyLib.c ****     *
1148:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1149:Generated_Source\PSoC4/CyLib.c ****     *
1150:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1151:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1152:Generated_Source\PSoC4/CyLib.c ****     {
1153:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1154:Generated_Source\PSoC4/CyLib.c **** 
1155:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1156:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1157:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1158:Generated_Source\PSoC4/CyLib.c **** 
1159:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1160:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
1161:Generated_Source\PSoC4/CyLib.c **** 
1162:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1163:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1164:Generated_Source\PSoC4/CyLib.c ****         
1165:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1166:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 29


1167:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1168:Generated_Source\PSoC4/CyLib.c ****             
1169:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1170:Generated_Source\PSoC4/CyLib.c ****             {
1171:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1172:Generated_Source\PSoC4/CyLib.c ****             }
1173:Generated_Source\PSoC4/CyLib.c ****             else
1174:Generated_Source\PSoC4/CyLib.c ****             {
1175:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1176:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1177:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1178:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1179:Generated_Source\PSoC4/CyLib.c ****             
1180:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
1181:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1182:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1183:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
1184:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1185:Generated_Source\PSoC4/CyLib.c ****                 
1186:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1187:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1188:Generated_Source\PSoC4/CyLib.c ****                 {
1189:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1190:Generated_Source\PSoC4/CyLib.c ****                 }
1191:Generated_Source\PSoC4/CyLib.c ****                 
1192:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1193:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1194:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1195:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1196:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1197:Generated_Source\PSoC4/CyLib.c **** 
1198:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1199:Generated_Source\PSoC4/CyLib.c ****                 {
1200:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
1201:Generated_Source\PSoC4/CyLib.c ****                 }
1202:Generated_Source\PSoC4/CyLib.c **** 
1203:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1204:Generated_Source\PSoC4/CyLib.c ****                 {
1205:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1206:Generated_Source\PSoC4/CyLib.c ****                 }
1207:Generated_Source\PSoC4/CyLib.c ****                 
1208:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1209:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1210:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1211:Generated_Source\PSoC4/CyLib.c ****                 
1212:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1213:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1214:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1215:Generated_Source\PSoC4/CyLib.c ****                 #else
1216:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1217:Generated_Source\PSoC4/CyLib.c ****                 #endif
1218:Generated_Source\PSoC4/CyLib.c ****                 
1219:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1220:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1221:Generated_Source\PSoC4/CyLib.c ****                 {
1222:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1223:Generated_Source\PSoC4/CyLib.c ****                 }
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 30


1224:Generated_Source\PSoC4/CyLib.c ****                 
1225:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1226:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD | 
1227:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1228:Generated_Source\PSoC4/CyLib.c ****                                             
1229:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1230:Generated_Source\PSoC4/CyLib.c ****                 {
1231:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1232:Generated_Source\PSoC4/CyLib.c ****                 }
1233:Generated_Source\PSoC4/CyLib.c **** 
1234:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1235:Generated_Source\PSoC4/CyLib.c ****                 
1236:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1237:Generated_Source\PSoC4/CyLib.c ****                 
1238:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1239:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1240:Generated_Source\PSoC4/CyLib.c ****                 
1241:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1242:Generated_Source\PSoC4/CyLib.c ****                 {
1243:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
1244:Generated_Source\PSoC4/CyLib.c ****                 }
1245:Generated_Source\PSoC4/CyLib.c ****                 
1246:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1247:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1248:Generated_Source\PSoC4/CyLib.c ****                 
1249:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1250:Generated_Source\PSoC4/CyLib.c ****                 {
1251:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1252:Generated_Source\PSoC4/CyLib.c ****                 }
1253:Generated_Source\PSoC4/CyLib.c ****                 
1254:Generated_Source\PSoC4/CyLib.c ****             }
1255:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT */
1256:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1257:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
1258:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1259:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1260:Generated_Source\PSoC4/CyLib.c **** 
1261:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
1262:Generated_Source\PSoC4/CyLib.c ****         {
1263:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
1264:Generated_Source\PSoC4/CyLib.c **** 
1265:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
1266:Generated_Source\PSoC4/CyLib.c ****             {
1267:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
1268:Generated_Source\PSoC4/CyLib.c **** 
1269:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
1270:Generated_Source\PSoC4/CyLib.c ****                 {
1271:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
1272:Generated_Source\PSoC4/CyLib.c ****                     break;
1273:Generated_Source\PSoC4/CyLib.c ****                 }
1274:Generated_Source\PSoC4/CyLib.c ****             }
1275:Generated_Source\PSoC4/CyLib.c **** 
1276:Generated_Source\PSoC4/CyLib.c ****         }
1277:Generated_Source\PSoC4/CyLib.c **** 
1278:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
1279:Generated_Source\PSoC4/CyLib.c ****     }
1280:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 31


1281:Generated_Source\PSoC4/CyLib.c **** 
1282:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1283:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1284:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1285:Generated_Source\PSoC4/CyLib.c ****     *
1286:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1287:Generated_Source\PSoC4/CyLib.c ****     *
1288:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1289:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1290:Generated_Source\PSoC4/CyLib.c ****     * functioning.
1291:Generated_Source\PSoC4/CyLib.c ****     *
1292:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1293:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1294:Generated_Source\PSoC4/CyLib.c ****     {
1295:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1296:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1297:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1298:Generated_Source\PSoC4/CyLib.c **** 
1299:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1300:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1301:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1302:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1303:Generated_Source\PSoC4/CyLib.c ****         #else
1304:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1305:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1306:Generated_Source\PSoC4/CyLib.c ****     }
1307:Generated_Source\PSoC4/CyLib.c **** 
1308:Generated_Source\PSoC4/CyLib.c **** 
1309:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1310:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1311:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1312:Generated_Source\PSoC4/CyLib.c ****     *
1313:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1314:Generated_Source\PSoC4/CyLib.c ****     *
1315:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1316:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1317:Generated_Source\PSoC4/CyLib.c ****     *
1318:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L / 4100S with ECO devices, the error status bit is the 
1319:Generated_Source\PSoC4/CyLib.c ****     * WATCHDOG_ERROR bit in ECO_STATUS register.
1320:Generated_Source\PSoC4/CyLib.c ****     *
1321:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1322:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1323:Generated_Source\PSoC4/CyLib.c ****     *
1324:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L / 4100S with ECO: Non-zero indicates that ECO is running.
1325:Generated_Source\PSoC4/CyLib.c ****     *
1326:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1327:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1328:Generated_Source\PSoC4/CyLib.c ****     {
1329:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1330:Generated_Source\PSoC4/CyLib.c **** 
1331:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1332:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
1333:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1334:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1335:Generated_Source\PSoC4/CyLib.c **** 
1336:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) || 
1337:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 32


1338:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1339:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
1340:Generated_Source\PSoC4/CyLib.c ****         #else
1341:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1342:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1343:Generated_Source\PSoC4/CyLib.c **** 
1344:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1345:Generated_Source\PSoC4/CyLib.c ****     }
1346:Generated_Source\PSoC4/CyLib.c **** 
1347:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1348:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1349:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1350:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1351:Generated_Source\PSoC4/CyLib.c ****         *
1352:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1353:Generated_Source\PSoC4/CyLib.c ****         *
1354:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1355:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1356:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1357:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1358:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1359:Generated_Source\PSoC4/CyLib.c ****         *
1360:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1361:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1362:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1363:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1364:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1365:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1366:Generated_Source\PSoC4/CyLib.c ****         *
1367:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1368:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1369:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1370:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1371:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1372:Generated_Source\PSoC4/CyLib.c ****         *
1373:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1374:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1375:Generated_Source\PSoC4/CyLib.c ****         {
1376:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1377:Generated_Source\PSoC4/CyLib.c **** 
1378:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
1379:Generated_Source\PSoC4/CyLib.c ****             {
1380:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
1381:Generated_Source\PSoC4/CyLib.c **** 
1382:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
1383:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
1384:Generated_Source\PSoC4/CyLib.c **** 
1385:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
1386:Generated_Source\PSoC4/CyLib.c ****             }
1387:Generated_Source\PSoC4/CyLib.c ****             else
1388:Generated_Source\PSoC4/CyLib.c ****             {
1389:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1390:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
1391:Generated_Source\PSoC4/CyLib.c ****             }
1392:Generated_Source\PSoC4/CyLib.c ****         }
1393:Generated_Source\PSoC4/CyLib.c **** 
1394:Generated_Source\PSoC4/CyLib.c ****     #else
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 33


1395:Generated_Source\PSoC4/CyLib.c **** 
1396:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1397:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1398:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1399:Generated_Source\PSoC4/CyLib.c ****         *
1400:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1401:Generated_Source\PSoC4/CyLib.c ****         * 4200L / 4100S with ECO devices only.
1402:Generated_Source\PSoC4/CyLib.c ****         *
1403:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1404:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1405:Generated_Source\PSoC4/CyLib.c ****         *
1406:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1407:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1408:Generated_Source\PSoC4/CyLib.c ****         *
1409:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1410:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1411:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1412:Generated_Source\PSoC4/CyLib.c ****         *
1413:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1414:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1415:Generated_Source\PSoC4/CyLib.c ****         *
1416:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1417:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1418:Generated_Source\PSoC4/CyLib.c ****         *
1419:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1420:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1421:Generated_Source\PSoC4/CyLib.c ****         *
1422:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1423:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1424:Generated_Source\PSoC4/CyLib.c ****         *
1425:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1426:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1427:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1428:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1429:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1430:Generated_Source\PSoC4/CyLib.c ****         *
1431:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1432:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1433:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1434:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1435:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1436:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1437:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1438:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1439:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1440:Generated_Source\PSoC4/CyLib.c ****         *
1441:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1442:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1443:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1444:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1445:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1446:Generated_Source\PSoC4/CyLib.c ****         *
1447:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1448:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1449:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1450:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1451:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 34


1452:Generated_Source\PSoC4/CyLib.c ****         *
1453:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1454:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1455:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1456:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1457:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1458:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1459:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1460:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1461:Generated_Source\PSoC4/CyLib.c ****         *
1462:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1463:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1464:Generated_Source\PSoC4/CyLib.c ****         {
1465:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1466:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1467:Generated_Source\PSoC4/CyLib.c **** 
1468:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1469:Generated_Source\PSoC4/CyLib.c **** 
1470:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1471:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1472:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1473:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1474:Generated_Source\PSoC4/CyLib.c **** 
1475:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1476:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1477:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1478:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1479:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1480:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1481:Generated_Source\PSoC4/CyLib.c **** 
1482:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1483:Generated_Source\PSoC4/CyLib.c **** 
1484:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1485:Generated_Source\PSoC4/CyLib.c ****         }
1486:Generated_Source\PSoC4/CyLib.c **** 
1487:Generated_Source\PSoC4/CyLib.c **** 
1488:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1489:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1490:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1491:Generated_Source\PSoC4/CyLib.c ****         *
1492:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1493:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1494:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1495:Generated_Source\PSoC4/CyLib.c ****         *
1496:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L / 4100S with ECO devices only.
1497:Generated_Source\PSoC4/CyLib.c ****         *
1498:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1499:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1500:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1501:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1502:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1503:Generated_Source\PSoC4/CyLib.c ****         *
1504:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1505:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1506:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1507:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1508:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 35


1509:Generated_Source\PSoC4/CyLib.c ****         *
1510:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1511:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1512:Generated_Source\PSoC4/CyLib.c ****         *
1513:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1514:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1515:Generated_Source\PSoC4/CyLib.c ****         {
1516:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1517:Generated_Source\PSoC4/CyLib.c **** 
1518:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1519:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1520:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1521:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1522:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1523:Generated_Source\PSoC4/CyLib.c **** 
1524:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1525:Generated_Source\PSoC4/CyLib.c **** 
1526:Generated_Source\PSoC4/CyLib.c **** 
1527:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1528:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1529:Generated_Source\PSoC4/CyLib.c ****             {
1530:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1531:Generated_Source\PSoC4/CyLib.c ****             }
1532:Generated_Source\PSoC4/CyLib.c ****             else
1533:Generated_Source\PSoC4/CyLib.c ****             {
1534:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1535:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1536:Generated_Source\PSoC4/CyLib.c **** 
1537:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1538:Generated_Source\PSoC4/CyLib.c ****                 {
1539:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1540:Generated_Source\PSoC4/CyLib.c ****                 }
1541:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1542:Generated_Source\PSoC4/CyLib.c ****                 {
1543:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1544:Generated_Source\PSoC4/CyLib.c ****                 }
1545:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1546:Generated_Source\PSoC4/CyLib.c ****                 {
1547:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1548:Generated_Source\PSoC4/CyLib.c ****                 }
1549:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1550:Generated_Source\PSoC4/CyLib.c ****                 {
1551:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1552:Generated_Source\PSoC4/CyLib.c ****                 }
1553:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1554:Generated_Source\PSoC4/CyLib.c ****                 {
1555:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1556:Generated_Source\PSoC4/CyLib.c ****                 }
1557:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1558:Generated_Source\PSoC4/CyLib.c ****                 {
1559:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1560:Generated_Source\PSoC4/CyLib.c ****                 }
1561:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1562:Generated_Source\PSoC4/CyLib.c ****                 {
1563:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1564:Generated_Source\PSoC4/CyLib.c ****                 }
1565:Generated_Source\PSoC4/CyLib.c ****                 else
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 36


1566:Generated_Source\PSoC4/CyLib.c ****                 {
1567:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1568:Generated_Source\PSoC4/CyLib.c ****                 }
1569:Generated_Source\PSoC4/CyLib.c **** 
1570:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1571:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1572:Generated_Source\PSoC4/CyLib.c **** 
1573:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1574:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1575:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1576:Generated_Source\PSoC4/CyLib.c ****                 {
1577:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1578:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1579:Generated_Source\PSoC4/CyLib.c ****                 }
1580:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1581:Generated_Source\PSoC4/CyLib.c ****                 {
1582:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1583:Generated_Source\PSoC4/CyLib.c ****                 }
1584:Generated_Source\PSoC4/CyLib.c ****                 else
1585:Generated_Source\PSoC4/CyLib.c ****                 {
1586:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1587:Generated_Source\PSoC4/CyLib.c ****                 }
1588:Generated_Source\PSoC4/CyLib.c **** 
1589:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1590:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1591:Generated_Source\PSoC4/CyLib.c ****                 {
1592:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1593:Generated_Source\PSoC4/CyLib.c ****                 }
1594:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1595:Generated_Source\PSoC4/CyLib.c ****                 {
1596:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1597:Generated_Source\PSoC4/CyLib.c ****                 }
1598:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1599:Generated_Source\PSoC4/CyLib.c ****                 {
1600:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1601:Generated_Source\PSoC4/CyLib.c ****                 }
1602:Generated_Source\PSoC4/CyLib.c ****                 else
1603:Generated_Source\PSoC4/CyLib.c ****                 {
1604:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1605:Generated_Source\PSoC4/CyLib.c ****                 }
1606:Generated_Source\PSoC4/CyLib.c **** 
1607:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1608:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1609:Generated_Source\PSoC4/CyLib.c **** 
1610:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1611:Generated_Source\PSoC4/CyLib.c **** 
1612:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1613:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1614:Generated_Source\PSoC4/CyLib.c ****                 {
1615:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1616:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1617:Generated_Source\PSoC4/CyLib.c ****                 }
1618:Generated_Source\PSoC4/CyLib.c ****                 else
1619:Generated_Source\PSoC4/CyLib.c ****                 {
1620:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1621:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1622:Generated_Source\PSoC4/CyLib.c ****                     */
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 37


1623:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1624:Generated_Source\PSoC4/CyLib.c ****                 }
1625:Generated_Source\PSoC4/CyLib.c ****             }
1626:Generated_Source\PSoC4/CyLib.c **** 
1627:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1628:Generated_Source\PSoC4/CyLib.c ****         }
1629:Generated_Source\PSoC4/CyLib.c **** 
1630:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1631:Generated_Source\PSoC4/CyLib.c **** 
1632:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1633:Generated_Source\PSoC4/CyLib.c **** 
1634:Generated_Source\PSoC4/CyLib.c **** 
1635:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_PLL)
1636:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1637:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1638:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1639:Generated_Source\PSoC4/CyLib.c ****     *
1640:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1641:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1642:Generated_Source\PSoC4/CyLib.c ****     *
1643:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1644:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1645:Generated_Source\PSoC4/CyLib.c ****     *
1646:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1647:Generated_Source\PSoC4/CyLib.c ****     *
1648:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1649:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1650:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1 (available only for PSoC 4200L)
1651:Generated_Source\PSoC4/CyLib.c ****     *
1652:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1653:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1654:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1655:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1656:Generated_Source\PSoC4/CyLib.c ****     *
1657:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1658:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1659:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1660:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1661:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1662:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1663:Generated_Source\PSoC4/CyLib.c ****     *
1664:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1665:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1666:Generated_Source\PSoC4/CyLib.c ****     {
1667:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1668:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1669:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1670:Generated_Source\PSoC4/CyLib.c **** 
1671:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1672:Generated_Source\PSoC4/CyLib.c ****         {
1673:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1674:Generated_Source\PSoC4/CyLib.c **** 
1675:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1676:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1677:Generated_Source\PSoC4/CyLib.c **** 
1678:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1679:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 38


1680:Generated_Source\PSoC4/CyLib.c **** 
1681:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1682:Generated_Source\PSoC4/CyLib.c **** 
1683:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1684:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1685:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1686:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1687:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1688:Generated_Source\PSoC4/CyLib.c **** 
1689:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1690:Generated_Source\PSoC4/CyLib.c ****             {
1691:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1692:Generated_Source\PSoC4/CyLib.c **** 
1693:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1694:Generated_Source\PSoC4/CyLib.c ****                 {
1695:Generated_Source\PSoC4/CyLib.c **** 
1696:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1697:Generated_Source\PSoC4/CyLib.c ****                     {
1698:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1699:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1700:Generated_Source\PSoC4/CyLib.c ****                         break;
1701:Generated_Source\PSoC4/CyLib.c ****                     }
1702:Generated_Source\PSoC4/CyLib.c **** 
1703:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1704:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1705:Generated_Source\PSoC4/CyLib.c ****                 }
1706:Generated_Source\PSoC4/CyLib.c ****             }
1707:Generated_Source\PSoC4/CyLib.c ****         }
1708:Generated_Source\PSoC4/CyLib.c ****         else
1709:Generated_Source\PSoC4/CyLib.c ****         {
1710:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1711:Generated_Source\PSoC4/CyLib.c ****         }
1712:Generated_Source\PSoC4/CyLib.c **** 
1713:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1714:Generated_Source\PSoC4/CyLib.c ****     }
1715:Generated_Source\PSoC4/CyLib.c **** 
1716:Generated_Source\PSoC4/CyLib.c **** 
1717:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1718:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1719:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1720:Generated_Source\PSoC4/CyLib.c ****     *
1721:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1722:Generated_Source\PSoC4/CyLib.c ****     *
1723:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1724:Generated_Source\PSoC4/CyLib.c ****     *
1725:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1726:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1727:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1728:Generated_Source\PSoC4/CyLib.c ****     *
1729:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1730:Generated_Source\PSoC4/CyLib.c ****     *
1731:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1732:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1733:Generated_Source\PSoC4/CyLib.c ****     {
1734:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1735:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1736:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 39


1737:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1738:Generated_Source\PSoC4/CyLib.c **** 
1739:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1740:Generated_Source\PSoC4/CyLib.c **** 
1741:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1742:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1743:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1744:Generated_Source\PSoC4/CyLib.c ****         {
1745:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1746:Generated_Source\PSoC4/CyLib.c ****         }
1747:Generated_Source\PSoC4/CyLib.c **** 
1748:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1749:Generated_Source\PSoC4/CyLib.c **** 
1750:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1751:Generated_Source\PSoC4/CyLib.c ****     }
1752:Generated_Source\PSoC4/CyLib.c **** 
1753:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1754:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1755:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1756:Generated_Source\PSoC4/CyLib.c ****     *
1757:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1758:Generated_Source\PSoC4/CyLib.c ****     *
1759:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1760:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1761:Generated_Source\PSoC4/CyLib.c ****     *
1762:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1763:Generated_Source\PSoC4/CyLib.c ****     *
1764:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1765:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1766:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1767:Generated_Source\PSoC4/CyLib.c ****     *
1768:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1769:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1770:Generated_Source\PSoC4/CyLib.c ****     {
1771:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1772:Generated_Source\PSoC4/CyLib.c **** 
1773:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1774:Generated_Source\PSoC4/CyLib.c ****         {
1775:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1776:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1777:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1778:Generated_Source\PSoC4/CyLib.c ****         }
1779:Generated_Source\PSoC4/CyLib.c ****     }
1780:Generated_Source\PSoC4/CyLib.c **** 
1781:Generated_Source\PSoC4/CyLib.c **** 
1782:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1783:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1784:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1785:Generated_Source\PSoC4/CyLib.c ****     *
1786:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1787:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1788:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1789:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1790:Generated_Source\PSoC4/CyLib.c ****     *
1791:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1792:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1793:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 40


1794:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1795:Generated_Source\PSoC4/CyLib.c ****     *
1796:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1797:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1798:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1799:Generated_Source\PSoC4/CyLib.c ****     *
1800:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1801:Generated_Source\PSoC4/CyLib.c ****     * divider.
1802:Generated_Source\PSoC4/CyLib.c ****     *
1803:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1804:Generated_Source\PSoC4/CyLib.c ****     *
1805:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1806:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1807:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1808:Generated_Source\PSoC4/CyLib.c ****     *
1809:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1810:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1811:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1812:Generated_Source\PSoC4/CyLib.c ****     *
1813:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1814:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1815:Generated_Source\PSoC4/CyLib.c ****     {
1816:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1817:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1818:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1819:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1820:Generated_Source\PSoC4/CyLib.c **** 
1821:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1822:Generated_Source\PSoC4/CyLib.c **** 
1823:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1824:Generated_Source\PSoC4/CyLib.c **** 
1825:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1826:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1827:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1828:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1829:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1830:Generated_Source\PSoC4/CyLib.c ****         {
1831:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1832:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1833:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1834:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1835:Generated_Source\PSoC4/CyLib.c **** 
1836:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1837:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1838:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1839:Generated_Source\PSoC4/CyLib.c **** 
1840:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1841:Generated_Source\PSoC4/CyLib.c **** 
1842:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1843:Generated_Source\PSoC4/CyLib.c ****         }
1844:Generated_Source\PSoC4/CyLib.c **** 
1845:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1846:Generated_Source\PSoC4/CyLib.c **** 
1847:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1848:Generated_Source\PSoC4/CyLib.c ****     }
1849:Generated_Source\PSoC4/CyLib.c **** 
1850:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 41


1851:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1852:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1853:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1856:Generated_Source\PSoC4/CyLib.c ****     *
1857:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1858:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1859:Generated_Source\PSoC4/CyLib.c ****     *
1860:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1861:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1862:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1863:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1864:Generated_Source\PSoC4/CyLib.c ****     *
1865:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1866:Generated_Source\PSoC4/CyLib.c ****     *
1867:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1868:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1869:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1870:Generated_Source\PSoC4/CyLib.c ****     *
1871:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1872:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1873:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1874:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1875:Generated_Source\PSoC4/CyLib.c ****     *
1876:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1877:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1878:Generated_Source\PSoC4/CyLib.c ****     *
1879:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1880:Generated_Source\PSoC4/CyLib.c ****     *
1881:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1882:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1883:Generated_Source\PSoC4/CyLib.c ****     {
1884:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1885:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1886:Generated_Source\PSoC4/CyLib.c **** 
1887:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1888:Generated_Source\PSoC4/CyLib.c **** 
1889:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1890:Generated_Source\PSoC4/CyLib.c ****         {
1891:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1892:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1893:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1894:Generated_Source\PSoC4/CyLib.c ****         }
1895:Generated_Source\PSoC4/CyLib.c **** 
1896:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1897:Generated_Source\PSoC4/CyLib.c ****     }
1898:Generated_Source\PSoC4/CyLib.c **** 
1899:Generated_Source\PSoC4/CyLib.c **** 
1900:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1901:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1902:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1903:Generated_Source\PSoC4/CyLib.c ****     *
1904:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1905:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
1906:Generated_Source\PSoC4/CyLib.c ****     *
1907:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 42


1908:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1909:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1910:Generated_Source\PSoC4/CyLib.c ****     *
1911:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1912:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1913:Generated_Source\PSoC4/CyLib.c ****     *
1914:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1915:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1916:Generated_Source\PSoC4/CyLib.c ****     {
1917:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1918:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1919:Generated_Source\PSoC4/CyLib.c **** 
1920:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1921:Generated_Source\PSoC4/CyLib.c **** 
1922:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1923:Generated_Source\PSoC4/CyLib.c **** 
1924:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1925:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1926:Generated_Source\PSoC4/CyLib.c **** 
1927:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1928:Generated_Source\PSoC4/CyLib.c **** 
1929:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1930:Generated_Source\PSoC4/CyLib.c ****     }
1931:Generated_Source\PSoC4/CyLib.c **** 
1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1934:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1935:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1936:Generated_Source\PSoC4/CyLib.c ****     *
1937:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1938:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1939:Generated_Source\PSoC4/CyLib.c ****     *
1940:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
1941:Generated_Source\PSoC4/CyLib.c ****     *
1942:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1943:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1944:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1945:Generated_Source\PSoC4/CyLib.c ****     *
1946:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1947:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1948:Generated_Source\PSoC4/CyLib.c ****     *
1949:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1950:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1951:Generated_Source\PSoC4/CyLib.c ****     {
1952:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1953:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1954:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_INVALID_STATE;
1955:Generated_Source\PSoC4/CyLib.c **** 
1956:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1957:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1958:Generated_Source\PSoC4/CyLib.c **** 
1959:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1960:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll))
1961:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_SRSSV2)
1962:Generated_Source\PSoC4/CyLib.c ****             || ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll))
1963:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_SRSSV2) */
1964:Generated_Source\PSoC4/CyLib.c ****             )
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 43


1965:Generated_Source\PSoC4/CyLib.c ****         {
1966:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1967:Generated_Source\PSoC4/CyLib.c ****         }
1968:Generated_Source\PSoC4/CyLib.c **** 
1969:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1970:Generated_Source\PSoC4/CyLib.c ****     }
1971:Generated_Source\PSoC4/CyLib.c **** 
1972:Generated_Source\PSoC4/CyLib.c **** 
1973:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1974:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1975:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1976:Generated_Source\PSoC4/CyLib.c ****     *
1977:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1978:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1979:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1980:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1981:Generated_Source\PSoC4/CyLib.c ****     *
1982:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
1983:Generated_Source\PSoC4/CyLib.c ****     *
1984:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1985:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1986:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1987:Generated_Source\PSoC4/CyLib.c ****     *
1988:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1989:Generated_Source\PSoC4/CyLib.c ****     *
1990:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1991:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1992:Generated_Source\PSoC4/CyLib.c ****     {
1993:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1994:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1995:Generated_Source\PSoC4/CyLib.c **** 
1996:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1997:Generated_Source\PSoC4/CyLib.c **** 
1998:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1999:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
2000:Generated_Source\PSoC4/CyLib.c **** 
2001:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2002:Generated_Source\PSoC4/CyLib.c **** 
2003:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2004:Generated_Source\PSoC4/CyLib.c ****     }
2005:Generated_Source\PSoC4/CyLib.c **** 
2006:Generated_Source\PSoC4/CyLib.c **** 
2007:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2008:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
2009:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2010:Generated_Source\PSoC4/CyLib.c ****     *
2011:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
2012:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
2013:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
2014:Generated_Source\PSoC4/CyLib.c ****     *
2015:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
2016:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
2017:Generated_Source\PSoC4/CyLib.c ****     *
2018:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
2019:Generated_Source\PSoC4/CyLib.c ****     *
2020:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
2021:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 44


2022:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
2023:Generated_Source\PSoC4/CyLib.c ****     *
2024:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
2025:Generated_Source\PSoC4/CyLib.c ****     *
2026:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
2027:Generated_Source\PSoC4/CyLib.c ****     *
2028:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
2029:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
2030:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2031:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2032:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2033:Generated_Source\PSoC4/CyLib.c ****     *
2034:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
2035:Generated_Source\PSoC4/CyLib.c ****     *
2036:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
2037:Generated_Source\PSoC4/CyLib.c ****     * frequency.
2038:Generated_Source\PSoC4/CyLib.c ****     *
2039:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
2040:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
2041:Generated_Source\PSoC4/CyLib.c ****     *
2042:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2043:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
2044:Generated_Source\PSoC4/CyLib.c ****     {
2045:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
2046:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
2047:Generated_Source\PSoC4/CyLib.c **** 
2048:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
2049:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
2050:Generated_Source\PSoC4/CyLib.c **** 
2051:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
2052:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
2053:Generated_Source\PSoC4/CyLib.c **** 
2054:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
2055:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
2056:Generated_Source\PSoC4/CyLib.c **** 
2057:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2058:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2059:Generated_Source\PSoC4/CyLib.c **** 
2060:Generated_Source\PSoC4/CyLib.c **** 
2061:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2062:Generated_Source\PSoC4/CyLib.c **** 
2063:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
2064:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
2065:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
2066:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
2067:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
2068:Generated_Source\PSoC4/CyLib.c ****         {
2069:Generated_Source\PSoC4/CyLib.c **** 
2070:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
2071:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
2072:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
2073:Generated_Source\PSoC4/CyLib.c **** 
2074:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
2075:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
2076:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
2077:Generated_Source\PSoC4/CyLib.c **** 
2078:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 45


2079:Generated_Source\PSoC4/CyLib.c ****             {
2080:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
2081:Generated_Source\PSoC4/CyLib.c ****                 {
2082:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
2083:Generated_Source\PSoC4/CyLib.c **** 
2084:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
2085:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
2086:Generated_Source\PSoC4/CyLib.c **** 
2087:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
2088:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
2089:Generated_Source\PSoC4/CyLib.c **** 
2090:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
2091:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
2092:Generated_Source\PSoC4/CyLib.c **** 
2093:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
2094:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
2095:Generated_Source\PSoC4/CyLib.c ****                     {
2096:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
2097:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
2098:Generated_Source\PSoC4/CyLib.c ****                         break;
2099:Generated_Source\PSoC4/CyLib.c ****                     }
2100:Generated_Source\PSoC4/CyLib.c ****                 }
2101:Generated_Source\PSoC4/CyLib.c **** 
2102:Generated_Source\PSoC4/CyLib.c **** 
2103:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
2104:Generated_Source\PSoC4/CyLib.c ****                 {
2105:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
2106:Generated_Source\PSoC4/CyLib.c ****                     {
2107:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
2108:Generated_Source\PSoC4/CyLib.c ****                     }
2109:Generated_Source\PSoC4/CyLib.c ****                 }
2110:Generated_Source\PSoC4/CyLib.c ****             }
2111:Generated_Source\PSoC4/CyLib.c **** 
2112:Generated_Source\PSoC4/CyLib.c ****         }
2113:Generated_Source\PSoC4/CyLib.c **** 
2114:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2115:Generated_Source\PSoC4/CyLib.c ****     }
2116:Generated_Source\PSoC4/CyLib.c **** 
2117:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2118:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
2119:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2120:Generated_Source\PSoC4/CyLib.c ****     *
2121:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
2122:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
2123:Generated_Source\PSoC4/CyLib.c ****     *
2124:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
2125:Generated_Source\PSoC4/CyLib.c ****     *
2126:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2127:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2128:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
2129:Generated_Source\PSoC4/CyLib.c ****     *
2130:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2131:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2132:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock (available only for PSoC 4200L)
2133:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2134:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0] (available only for PSoC 4200L)
2135:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1] (available only for PSoC 4200L)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 46


2136:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2] (available only for PSoC 4200L)
2137:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3] (available only for PSoC 4200L)
2138:Generated_Source\PSoC4/CyLib.c ****     *
2139:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2140:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2141:Generated_Source\PSoC4/CyLib.c ****     {
2142:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2143:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2144:Generated_Source\PSoC4/CyLib.c ****         
2145:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_SRSSLT)
2146:Generated_Source\PSoC4/CyLib.c ****             uint8 i = 0u;
2147:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_SRSSLT) */
2148:Generated_Source\PSoC4/CyLib.c **** 
2149:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2150:Generated_Source\PSoC4/CyLib.c **** 
2151:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2152:Generated_Source\PSoC4/CyLib.c ****         {
2153:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
2154:Generated_Source\PSoC4/CyLib.c ****                 regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2155:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MAS
2156:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_SELECT_REG = regTmp;
2157:Generated_Source\PSoC4/CyLib.c ****             #else
2158:Generated_Source\PSoC4/CyLib.c ****                 regTmp = CY_SYS_ECO_CLK_SELECT_REG & (uint32) ~CY_SYS_ECO_CLK_SELECT_PLL0_MASK;
2159:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= ((source << CY_SYS_ECO_CLK_SELECT_PLL0_SHIFT) & CY_SYS_ECO_CLK_SELECT_PLL
2160:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_ECO_CLK_SELECT_REG = regTmp;
2161:Generated_Source\PSoC4/CyLib.c ****                 
2162:Generated_Source\PSoC4/CyLib.c ****                 /* Generate clock sequence to change clock source in CY_SYS_ECO_CLK_SELECT_REG */
2163:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
2164:Generated_Source\PSoC4/CyLib.c ****                 
2165:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR; i++)
2166:Generated_Source\PSoC4/CyLib.c ****                 {
2167:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
2168:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
2169:Generated_Source\PSoC4/CyLib.c ****                 }
2170:Generated_Source\PSoC4/CyLib.c ****                 
2171:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
2172:Generated_Source\PSoC4/CyLib.c **** 
2173:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
2174:Generated_Source\PSoC4/CyLib.c ****         }
2175:Generated_Source\PSoC4/CyLib.c **** 
2176:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2177:Generated_Source\PSoC4/CyLib.c ****     }
2178:Generated_Source\PSoC4/CyLib.c **** 
2179:Generated_Source\PSoC4/CyLib.c ****     
2180:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2181:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2182:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2183:Generated_Source\PSoC4/CyLib.c ****     *
2184:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2185:Generated_Source\PSoC4/CyLib.c ****     *
2186:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2187:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2188:Generated_Source\PSoC4/CyLib.c ****     *
2189:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
2190:Generated_Source\PSoC4/CyLib.c ****     *
2191:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2192:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 47


2193:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
2194:Generated_Source\PSoC4/CyLib.c ****     *
2195:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2196:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2197:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2198:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2199:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2200:Generated_Source\PSoC4/CyLib.c ****     *
2201:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2202:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2203:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2204:Generated_Source\PSoC4/CyLib.c ****     *
2205:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2206:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
2207:Generated_Source\PSoC4/CyLib.c ****     {
2208:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2209:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2210:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2211:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2212:Generated_Source\PSoC4/CyLib.c **** 
2213:Generated_Source\PSoC4/CyLib.c **** 
2214:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2215:Generated_Source\PSoC4/CyLib.c **** 
2216:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2217:Generated_Source\PSoC4/CyLib.c **** 
2218:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2219:Generated_Source\PSoC4/CyLib.c ****         {
2220:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2221:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2222:Generated_Source\PSoC4/CyLib.c **** 
2223:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2224:Generated_Source\PSoC4/CyLib.c **** 
2225:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2226:Generated_Source\PSoC4/CyLib.c ****         }
2227:Generated_Source\PSoC4/CyLib.c **** 
2228:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2229:Generated_Source\PSoC4/CyLib.c **** 
2230:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2231:Generated_Source\PSoC4/CyLib.c ****     }
2232:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_PLL) */
2233:Generated_Source\PSoC4/CyLib.c **** 
2234:Generated_Source\PSoC4/CyLib.c **** 
2235:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2236:Generated_Source\PSoC4/CyLib.c **** 
2237:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2238:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2239:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2240:Generated_Source\PSoC4/CyLib.c ****     *
2241:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2242:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2243:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2244:Generated_Source\PSoC4/CyLib.c ****     *
2245:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2246:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2247:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2248:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2249:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 48


2250:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
2251:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2252:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2253:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2254:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
2255:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2256:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2257:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2258:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2259:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2260:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2261:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2262:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2263:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
2264:Generated_Source\PSoC4/CyLib.c ****     *
2265:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2266:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2267:Generated_Source\PSoC4/CyLib.c ****     {
2268:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2269:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
2270:Generated_Source\PSoC4/CyLib.c **** 
2271:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2272:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
2273:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
2274:Generated_Source\PSoC4/CyLib.c **** 
2275:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2276:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
2277:Generated_Source\PSoC4/CyLib.c **** 
2278:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2279:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
2280:Generated_Source\PSoC4/CyLib.c **** 
2281:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2282:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
2283:Generated_Source\PSoC4/CyLib.c **** 
2284:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2285:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
2286:Generated_Source\PSoC4/CyLib.c ****     }
2287:Generated_Source\PSoC4/CyLib.c **** 
2288:Generated_Source\PSoC4/CyLib.c **** 
2289:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2290:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2291:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2292:Generated_Source\PSoC4/CyLib.c ****     *
2293:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2294:Generated_Source\PSoC4/CyLib.c ****     *
2295:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2296:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2297:Generated_Source\PSoC4/CyLib.c ****     {
 408              		.loc 1 2297 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
2298:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 413              		.loc 1 2298 0
 414 0000 0221     		movs	r1, #2
 415 0002 054A     		ldr	r2, .L34
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 49


2299:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
2300:Generated_Source\PSoC4/CyLib.c ****     }
 416              		.loc 1 2300 0
 417              		@ sp needed
2298:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 418              		.loc 1 2298 0
 419 0004 1368     		ldr	r3, [r2]
 420 0006 8B43     		bics	r3, r1
 421 0008 1360     		str	r3, [r2]
2299:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 422              		.loc 1 2299 0
 423 000a 044A     		ldr	r2, .L34+4
 424 000c 0139     		subs	r1, r1, #1
 425 000e 1368     		ldr	r3, [r2]
 426 0010 8B43     		bics	r3, r1
 427 0012 1360     		str	r3, [r2]
 428              		.loc 1 2300 0
 429 0014 7047     		bx	lr
 430              	.L35:
 431 0016 C046     		.align	2
 432              	.L34:
 433 0018 08000B40 		.word	1074462728
 434 001c 18000B40 		.word	1074462744
 435              		.cfi_endproc
 436              	.LFE12:
 437              		.size	CySysLvdDisable, .-CySysLvdDisable
 438              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 439              		.align	1
 440              		.global	CySysLvdGetInterruptSource
 441              		.code	16
 442              		.thumb_func
 443              		.type	CySysLvdGetInterruptSource, %function
 444              	CySysLvdGetInterruptSource:
 445              	.LFB13:
2301:Generated_Source\PSoC4/CyLib.c **** 
2302:Generated_Source\PSoC4/CyLib.c **** 
2303:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2304:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2305:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2306:Generated_Source\PSoC4/CyLib.c ****     *
2307:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2308:Generated_Source\PSoC4/CyLib.c ****     *
2309:Generated_Source\PSoC4/CyLib.c ****     * \return
2310:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2311:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2312:Generated_Source\PSoC4/CyLib.c ****     *
2313:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2314:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2315:Generated_Source\PSoC4/CyLib.c ****     {
 446              		.loc 1 2315 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
2316:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 451              		.loc 1 2316 0
 452 0000 024B     		ldr	r3, .L37
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 50


2317:Generated_Source\PSoC4/CyLib.c ****     }
 453              		.loc 1 2317 0
 454              		@ sp needed
2316:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 455              		.loc 1 2316 0
 456 0002 1868     		ldr	r0, [r3]
 457 0004 0223     		movs	r3, #2
 458 0006 1840     		ands	r0, r3
 459              		.loc 1 2317 0
 460 0008 7047     		bx	lr
 461              	.L38:
 462 000a C046     		.align	2
 463              	.L37:
 464 000c 04000B40 		.word	1074462724
 465              		.cfi_endproc
 466              	.LFE13:
 467              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 468              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 469              		.align	1
 470              		.global	CySysLvdClearInterrupt
 471              		.code	16
 472              		.thumb_func
 473              		.type	CySysLvdClearInterrupt, %function
 474              	CySysLvdClearInterrupt:
 475              	.LFB14:
2318:Generated_Source\PSoC4/CyLib.c **** 
2319:Generated_Source\PSoC4/CyLib.c **** 
2320:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2321:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2322:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2323:Generated_Source\PSoC4/CyLib.c ****     *
2324:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2325:Generated_Source\PSoC4/CyLib.c ****     *
2326:Generated_Source\PSoC4/CyLib.c ****     * \return
2327:Generated_Source\PSoC4/CyLib.c ****     *  None
2328:Generated_Source\PSoC4/CyLib.c ****     *
2329:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2330:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2331:Generated_Source\PSoC4/CyLib.c ****     {
 476              		.loc 1 2331 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		@ link register save eliminated.
2332:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 481              		.loc 1 2332 0
 482 0000 0222     		movs	r2, #2
 483 0002 014B     		ldr	r3, .L40
2333:Generated_Source\PSoC4/CyLib.c ****     }
 484              		.loc 1 2333 0
 485              		@ sp needed
2332:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 486              		.loc 1 2332 0
 487 0004 1A60     		str	r2, [r3]
 488              		.loc 1 2333 0
 489 0006 7047     		bx	lr
 490              	.L41:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 51


 491              		.align	2
 492              	.L40:
 493 0008 04000B40 		.word	1074462724
 494              		.cfi_endproc
 495              	.LFE14:
 496              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 497              		.section	.text.CySysGetResetReason,"ax",%progbits
 498              		.align	1
 499              		.global	CySysGetResetReason
 500              		.code	16
 501              		.thumb_func
 502              		.type	CySysGetResetReason, %function
 503              	CySysGetResetReason:
 504              	.LFB15:
2334:Generated_Source\PSoC4/CyLib.c **** 
2335:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2336:Generated_Source\PSoC4/CyLib.c **** 
2337:Generated_Source\PSoC4/CyLib.c **** 
2338:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2339:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2340:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2341:Generated_Source\PSoC4/CyLib.c **** *
2342:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2343:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2344:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2345:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2346:Generated_Source\PSoC4/CyLib.c **** *
2347:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2348:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2349:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2350:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2351:Generated_Source\PSoC4/CyLib.c **** *
2352:Generated_Source\PSoC4/CyLib.c **** * \return
2353:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2354:Generated_Source\PSoC4/CyLib.c **** *
2355:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2356:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2357:Generated_Source\PSoC4/CyLib.c **** {
 505              		.loc 1 2357 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510              	.LVL24:
2358:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2359:Generated_Source\PSoC4/CyLib.c **** 
2360:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 511              		.loc 1 2360 0
 512 0000 1923     		movs	r3, #25
 513 0002 0200     		movs	r2, r0
2361:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 514              		.loc 1 2361 0
 515 0004 0249     		ldr	r1, .L43
2360:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 516              		.loc 1 2360 0
 517 0006 1A40     		ands	r2, r3
 518              	.LVL25:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 52


 519              		.loc 1 2361 0
 520 0008 0868     		ldr	r0, [r1]
 521              	.LVL26:
2362:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2363:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
2364:Generated_Source\PSoC4/CyLib.c **** 
2365:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
2366:Generated_Source\PSoC4/CyLib.c **** }
 522              		.loc 1 2366 0
 523              		@ sp needed
2365:Generated_Source\PSoC4/CyLib.c **** }
 524              		.loc 1 2365 0
 525 000a 1840     		ands	r0, r3
 526              	.LVL27:
2363:Generated_Source\PSoC4/CyLib.c **** 
 527              		.loc 1 2363 0
 528 000c 0A60     		str	r2, [r1]
 529              		.loc 1 2366 0
 530 000e 7047     		bx	lr
 531              	.L44:
 532              		.align	2
 533              	.L43:
 534 0010 00030B40 		.word	1074463488
 535              		.cfi_endproc
 536              	.LFE15:
 537              		.size	CySysGetResetReason, .-CySysGetResetReason
 538              		.section	.text.CyDisableInts,"ax",%progbits
 539              		.align	1
 540              		.global	CyDisableInts
 541              		.code	16
 542              		.thumb_func
 543              		.type	CyDisableInts, %function
 544              	CyDisableInts:
 545              	.LFB16:
2367:Generated_Source\PSoC4/CyLib.c **** 
2368:Generated_Source\PSoC4/CyLib.c **** 
2369:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2370:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2371:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2372:Generated_Source\PSoC4/CyLib.c **** *
2373:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2374:Generated_Source\PSoC4/CyLib.c **** *
2375:Generated_Source\PSoC4/CyLib.c **** * \return
2376:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2377:Generated_Source\PSoC4/CyLib.c **** *
2378:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2379:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2380:Generated_Source\PSoC4/CyLib.c **** {
 546              		.loc 1 2380 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              		@ link register save eliminated.
2381:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2382:Generated_Source\PSoC4/CyLib.c **** 
2383:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2384:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 53


2385:Generated_Source\PSoC4/CyLib.c **** 
2386:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2387:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 551              		.loc 1 2387 0
 552 0000 0122     		movs	r2, #1
2384:Generated_Source\PSoC4/CyLib.c **** 
 553              		.loc 1 2384 0
 554 0002 024B     		ldr	r3, .L46
 555              		.loc 1 2387 0
 556 0004 5242     		rsbs	r2, r2, #0
2384:Generated_Source\PSoC4/CyLib.c **** 
 557              		.loc 1 2384 0
 558 0006 1868     		ldr	r0, [r3]
 559              	.LVL28:
2388:Generated_Source\PSoC4/CyLib.c **** 
2389:Generated_Source\PSoC4/CyLib.c ****     return (intState);
2390:Generated_Source\PSoC4/CyLib.c **** }
 560              		.loc 1 2390 0
 561              		@ sp needed
2387:Generated_Source\PSoC4/CyLib.c **** 
 562              		.loc 1 2387 0
 563 0008 1A60     		str	r2, [r3]
 564              		.loc 1 2390 0
 565 000a 7047     		bx	lr
 566              	.L47:
 567              		.align	2
 568              	.L46:
 569 000c 80E100E0 		.word	-536813184
 570              		.cfi_endproc
 571              	.LFE16:
 572              		.size	CyDisableInts, .-CyDisableInts
 573              		.section	.text.CyEnableInts,"ax",%progbits
 574              		.align	1
 575              		.global	CyEnableInts
 576              		.code	16
 577              		.thumb_func
 578              		.type	CyEnableInts, %function
 579              	CyEnableInts:
 580              	.LFB17:
2391:Generated_Source\PSoC4/CyLib.c **** 
2392:Generated_Source\PSoC4/CyLib.c **** 
2393:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2394:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2395:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2396:Generated_Source\PSoC4/CyLib.c **** *
2397:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2398:Generated_Source\PSoC4/CyLib.c **** *
2399:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2400:Generated_Source\PSoC4/CyLib.c **** *
2401:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2402:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2403:Generated_Source\PSoC4/CyLib.c **** {
 581              		.loc 1 2403 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 54


 586              	.LVL29:
2404:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 587              		.loc 1 2404 0
 588 0000 014B     		ldr	r3, .L49
2405:Generated_Source\PSoC4/CyLib.c **** }
 589              		.loc 1 2405 0
 590              		@ sp needed
2404:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 591              		.loc 1 2404 0
 592 0002 1860     		str	r0, [r3]
 593              		.loc 1 2405 0
 594 0004 7047     		bx	lr
 595              	.L50:
 596 0006 C046     		.align	2
 597              	.L49:
 598 0008 00E100E0 		.word	-536813312
 599              		.cfi_endproc
 600              	.LFE17:
 601              		.size	CyEnableInts, .-CyEnableInts
 602              		.section	.text.CyIntSetSysVector,"ax",%progbits
 603              		.align	1
 604              		.global	CyIntSetSysVector
 605              		.code	16
 606              		.thumb_func
 607              		.type	CyIntSetSysVector, %function
 608              	CyIntSetSysVector:
 609              	.LFB18:
2406:Generated_Source\PSoC4/CyLib.c **** 
2407:Generated_Source\PSoC4/CyLib.c **** 
2408:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2409:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2410:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2411:Generated_Source\PSoC4/CyLib.c **** *
2412:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2413:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2414:Generated_Source\PSoC4/CyLib.c **** *
2415:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2416:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2417:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2418:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2419:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2420:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2421:Generated_Source\PSoC4/CyLib.c **** *
2422:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2423:Generated_Source\PSoC4/CyLib.c **** *
2424:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2425:Generated_Source\PSoC4/CyLib.c **** *
2426:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2427:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2428:Generated_Source\PSoC4/CyLib.c **** {
 610              		.loc 1 2428 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
 615              	.LVL30:
2429:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 55


2430:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2431:Generated_Source\PSoC4/CyLib.c **** 
2432:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
2433:Generated_Source\PSoC4/CyLib.c **** 
2434:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2435:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 616              		.loc 1 2435 0
 617 0000 8023     		movs	r3, #128
 618 0002 8000     		lsls	r0, r0, #2
 619              	.LVL31:
 620 0004 9B05     		lsls	r3, r3, #22
 621 0006 C318     		adds	r3, r0, r3
 622 0008 1868     		ldr	r0, [r3]
 623              	.LVL32:
2436:Generated_Source\PSoC4/CyLib.c **** 
2437:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2438:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
2439:Generated_Source\PSoC4/CyLib.c **** 
2440:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
2441:Generated_Source\PSoC4/CyLib.c **** }
 624              		.loc 1 2441 0
 625              		@ sp needed
2438:Generated_Source\PSoC4/CyLib.c **** 
 626              		.loc 1 2438 0
 627 000a 1960     		str	r1, [r3]
 628              		.loc 1 2441 0
 629 000c 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE18:
 632              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 633              		.section	.text.CyIntGetSysVector,"ax",%progbits
 634              		.align	1
 635              		.global	CyIntGetSysVector
 636              		.code	16
 637              		.thumb_func
 638              		.type	CyIntGetSysVector, %function
 639              	CyIntGetSysVector:
 640              	.LFB19:
2442:Generated_Source\PSoC4/CyLib.c **** 
2443:Generated_Source\PSoC4/CyLib.c **** 
2444:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2445:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2446:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2447:Generated_Source\PSoC4/CyLib.c **** *
2448:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2449:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2450:Generated_Source\PSoC4/CyLib.c **** *
2451:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2452:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2453:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2454:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2455:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2456:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2457:Generated_Source\PSoC4/CyLib.c **** *
2458:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2459:Generated_Source\PSoC4/CyLib.c **** *
2460:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 56


2461:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2462:Generated_Source\PSoC4/CyLib.c **** {
 641              		.loc 1 2462 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              	.LVL33:
2463:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2464:Generated_Source\PSoC4/CyLib.c **** 
2465:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
2466:Generated_Source\PSoC4/CyLib.c **** 
2467:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 647              		.loc 1 2467 0
 648 0000 8023     		movs	r3, #128
 649 0002 8000     		lsls	r0, r0, #2
 650              	.LVL34:
 651 0004 9B05     		lsls	r3, r3, #22
 652 0006 C018     		adds	r0, r0, r3
 653 0008 0068     		ldr	r0, [r0]
2468:Generated_Source\PSoC4/CyLib.c **** }
 654              		.loc 1 2468 0
 655              		@ sp needed
 656 000a 7047     		bx	lr
 657              		.cfi_endproc
 658              	.LFE19:
 659              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 660              		.section	.text.CyIntSetVector,"ax",%progbits
 661              		.align	1
 662              		.global	CyIntSetVector
 663              		.code	16
 664              		.thumb_func
 665              		.type	CyIntSetVector, %function
 666              	CyIntSetVector:
 667              	.LFB20:
2469:Generated_Source\PSoC4/CyLib.c **** 
2470:Generated_Source\PSoC4/CyLib.c **** 
2471:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2472:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2473:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2474:Generated_Source\PSoC4/CyLib.c **** *
2475:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2476:Generated_Source\PSoC4/CyLib.c **** *
2477:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2478:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2479:Generated_Source\PSoC4/CyLib.c **** *
2480:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2481:Generated_Source\PSoC4/CyLib.c **** *
2482:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2483:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2484:Generated_Source\PSoC4/CyLib.c **** {
 668              		.loc 1 2484 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 673              	.LVL35:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 57


2485:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2486:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2487:Generated_Source\PSoC4/CyLib.c **** 
2488:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2489:Generated_Source\PSoC4/CyLib.c **** 
2490:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2491:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 674              		.loc 1 2491 0
 675 0000 024B     		ldr	r3, .L54
 676 0002 8000     		lsls	r0, r0, #2
 677              	.LVL36:
 678 0004 C318     		adds	r3, r0, r3
 679 0006 1868     		ldr	r0, [r3]
 680              	.LVL37:
2492:Generated_Source\PSoC4/CyLib.c **** 
2493:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2494:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
2495:Generated_Source\PSoC4/CyLib.c **** 
2496:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
2497:Generated_Source\PSoC4/CyLib.c **** }
 681              		.loc 1 2497 0
 682              		@ sp needed
2494:Generated_Source\PSoC4/CyLib.c **** 
 683              		.loc 1 2494 0
 684 0008 1960     		str	r1, [r3]
 685              		.loc 1 2497 0
 686 000a 7047     		bx	lr
 687              	.L55:
 688              		.align	2
 689              	.L54:
 690 000c 40000020 		.word	536870976
 691              		.cfi_endproc
 692              	.LFE20:
 693              		.size	CyIntSetVector, .-CyIntSetVector
 694              		.section	.text.CyIntGetVector,"ax",%progbits
 695              		.align	1
 696              		.global	CyIntGetVector
 697              		.code	16
 698              		.thumb_func
 699              		.type	CyIntGetVector, %function
 700              	CyIntGetVector:
 701              	.LFB21:
2498:Generated_Source\PSoC4/CyLib.c **** 
2499:Generated_Source\PSoC4/CyLib.c **** 
2500:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2501:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2502:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2503:Generated_Source\PSoC4/CyLib.c **** *
2504:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2505:Generated_Source\PSoC4/CyLib.c **** *
2506:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2507:Generated_Source\PSoC4/CyLib.c **** *
2508:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2509:Generated_Source\PSoC4/CyLib.c **** *
2510:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2511:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2512:Generated_Source\PSoC4/CyLib.c **** {
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 58


 702              		.loc 1 2512 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707              	.LVL38:
2513:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2514:Generated_Source\PSoC4/CyLib.c **** 
2515:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2516:Generated_Source\PSoC4/CyLib.c **** 
2517:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 708              		.loc 1 2517 0
 709 0000 024B     		ldr	r3, .L57
 710 0002 8000     		lsls	r0, r0, #2
 711              	.LVL39:
 712 0004 C018     		adds	r0, r0, r3
 713 0006 0068     		ldr	r0, [r0]
2518:Generated_Source\PSoC4/CyLib.c **** }
 714              		.loc 1 2518 0
 715              		@ sp needed
 716 0008 7047     		bx	lr
 717              	.L58:
 718 000a C046     		.align	2
 719              	.L57:
 720 000c 40000020 		.word	536870976
 721              		.cfi_endproc
 722              	.LFE21:
 723              		.size	CyIntGetVector, .-CyIntGetVector
 724              		.section	.text.CyIntSetPriority,"ax",%progbits
 725              		.align	1
 726              		.global	CyIntSetPriority
 727              		.code	16
 728              		.thumb_func
 729              		.type	CyIntSetPriority, %function
 730              	CyIntSetPriority:
 731              	.LFB22:
2519:Generated_Source\PSoC4/CyLib.c **** 
2520:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2521:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2522:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2523:Generated_Source\PSoC4/CyLib.c **** *
2524:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2525:Generated_Source\PSoC4/CyLib.c **** *
2526:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2527:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2528:Generated_Source\PSoC4/CyLib.c **** *
2529:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2530:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2531:Generated_Source\PSoC4/CyLib.c **** {
 732              		.loc 1 2531 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              	.LVL40:
 737 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 738              		.cfi_def_cfa_offset 24
 739              		.cfi_offset 3, -24
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 59


 740              		.cfi_offset 4, -20
 741              		.cfi_offset 5, -16
 742              		.cfi_offset 6, -12
 743              		.cfi_offset 7, -8
 744              		.cfi_offset 14, -4
2532:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2533:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2534:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2535:Generated_Source\PSoC4/CyLib.c **** 
2536:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
2537:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2538:Generated_Source\PSoC4/CyLib.c **** 
2539:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 745              		.loc 1 2539 0
 746 0002 0326     		movs	r6, #3
 747 0004 0500     		movs	r5, r0
 748 0006 3540     		ands	r5, r6
 749 0008 B540     		lsls	r5, r5, r6
2531:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
 750              		.loc 1 2531 0
 751 000a 0F00     		movs	r7, r1
 752 000c 0400     		movs	r4, r0
 753              		.loc 1 2539 0
 754 000e 0635     		adds	r5, r5, #6
 755              	.LVL41:
2540:Generated_Source\PSoC4/CyLib.c **** 
2541:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
2542:Generated_Source\PSoC4/CyLib.c **** 
2543:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
2544:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 756              		.loc 1 2544 0
 757 0010 AE40     		lsls	r6, r6, r5
2545:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 758              		.loc 1 2545 0
 759 0012 AF40     		lsls	r7, r7, r5
2541:Generated_Source\PSoC4/CyLib.c **** 
 760              		.loc 1 2541 0
 761 0014 FFF7FEFF 		bl	CyEnterCriticalSection
 762              	.LVL42:
2543:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 763              		.loc 1 2543 0
 764 0018 A408     		lsrs	r4, r4, #2
 765 001a 054B     		ldr	r3, .L60
 766 001c A400     		lsls	r4, r4, #2
 767 001e E418     		adds	r4, r4, r3
 768 0020 2368     		ldr	r3, [r4]
 769              	.LVL43:
2546:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
2547:Generated_Source\PSoC4/CyLib.c **** 
2548:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
2549:Generated_Source\PSoC4/CyLib.c **** }
 770              		.loc 1 2549 0
 771              		@ sp needed
2544:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 772              		.loc 1 2544 0
 773 0022 B343     		bics	r3, r6
 774              	.LVL44:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 60


2545:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 775              		.loc 1 2545 0
 776 0024 1F43     		orrs	r7, r3
 777              	.LVL45:
2546:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 778              		.loc 1 2546 0
 779 0026 2760     		str	r7, [r4]
2548:Generated_Source\PSoC4/CyLib.c **** }
 780              		.loc 1 2548 0
 781 0028 FFF7FEFF 		bl	CyExitCriticalSection
 782              	.LVL46:
 783              	.LVL47:
 784              	.LVL48:
 785              		.loc 1 2549 0
 786 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 787              	.L61:
 788 002e C046     		.align	2
 789              	.L60:
 790 0030 00E400E0 		.word	-536812544
 791              		.cfi_endproc
 792              	.LFE22:
 793              		.size	CyIntSetPriority, .-CyIntSetPriority
 794              		.section	.text.CyIntGetPriority,"ax",%progbits
 795              		.align	1
 796              		.global	CyIntGetPriority
 797              		.code	16
 798              		.thumb_func
 799              		.type	CyIntGetPriority, %function
 800              	CyIntGetPriority:
 801              	.LFB23:
2550:Generated_Source\PSoC4/CyLib.c **** 
2551:Generated_Source\PSoC4/CyLib.c **** 
2552:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2553:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2554:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2555:Generated_Source\PSoC4/CyLib.c **** *
2556:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2557:Generated_Source\PSoC4/CyLib.c **** *
2558:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2559:Generated_Source\PSoC4/CyLib.c **** *
2560:Generated_Source\PSoC4/CyLib.c **** * \return
2561:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2562:Generated_Source\PSoC4/CyLib.c **** *
2563:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2564:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2565:Generated_Source\PSoC4/CyLib.c **** {
 802              		.loc 1 2565 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              		@ link register save eliminated.
 807              	.LVL49:
2566:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2567:Generated_Source\PSoC4/CyLib.c **** 
2568:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2569:Generated_Source\PSoC4/CyLib.c **** 
2570:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 61


 808              		.loc 1 2570 0
 809 0000 8308     		lsrs	r3, r0, #2
 810 0002 064A     		ldr	r2, .L63
 811 0004 9B00     		lsls	r3, r3, #2
 812 0006 9B18     		adds	r3, r3, r2
 813 0008 1968     		ldr	r1, [r3]
 814              	.LVL50:
2571:Generated_Source\PSoC4/CyLib.c **** 
2572:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 815              		.loc 1 2572 0
 816 000a 0322     		movs	r2, #3
 817 000c 0300     		movs	r3, r0
 818 000e 1340     		ands	r3, r2
 819 0010 9340     		lsls	r3, r3, r2
 820 0012 0633     		adds	r3, r3, #6
 821 0014 D940     		lsrs	r1, r1, r3
 822              	.LVL51:
 823 0016 0800     		movs	r0, r1
 824              	.LVL52:
2573:Generated_Source\PSoC4/CyLib.c **** }
 825              		.loc 1 2573 0
 826              		@ sp needed
2572:Generated_Source\PSoC4/CyLib.c **** }
 827              		.loc 1 2572 0
 828 0018 1040     		ands	r0, r2
 829              		.loc 1 2573 0
 830 001a 7047     		bx	lr
 831              	.L64:
 832              		.align	2
 833              	.L63:
 834 001c 00E400E0 		.word	-536812544
 835              		.cfi_endproc
 836              	.LFE23:
 837              		.size	CyIntGetPriority, .-CyIntGetPriority
 838              		.section	.text.CyIntEnable,"ax",%progbits
 839              		.align	1
 840              		.global	CyIntEnable
 841              		.code	16
 842              		.thumb_func
 843              		.type	CyIntEnable, %function
 844              	CyIntEnable:
 845              	.LFB24:
2574:Generated_Source\PSoC4/CyLib.c **** 
2575:Generated_Source\PSoC4/CyLib.c **** 
2576:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2577:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2578:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2579:Generated_Source\PSoC4/CyLib.c **** *
2580:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2581:Generated_Source\PSoC4/CyLib.c **** *
2582:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2583:Generated_Source\PSoC4/CyLib.c **** *
2584:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2585:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2586:Generated_Source\PSoC4/CyLib.c **** {
 846              		.loc 1 2586 0
 847              		.cfi_startproc
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 62


 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850              		@ link register save eliminated.
 851              	.LVL53:
2587:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 852              		.loc 1 2587 0
 853 0000 1F23     		movs	r3, #31
 854 0002 1840     		ands	r0, r3
 855              	.LVL54:
 856 0004 1E3B     		subs	r3, r3, #30
 857 0006 8340     		lsls	r3, r3, r0
 858 0008 014A     		ldr	r2, .L66
2588:Generated_Source\PSoC4/CyLib.c **** }
 859              		.loc 1 2588 0
 860              		@ sp needed
2587:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 861              		.loc 1 2587 0
 862 000a 1360     		str	r3, [r2]
 863              		.loc 1 2588 0
 864 000c 7047     		bx	lr
 865              	.L67:
 866 000e C046     		.align	2
 867              	.L66:
 868 0010 00E100E0 		.word	-536813312
 869              		.cfi_endproc
 870              	.LFE24:
 871              		.size	CyIntEnable, .-CyIntEnable
 872              		.section	.text.CyIntGetState,"ax",%progbits
 873              		.align	1
 874              		.global	CyIntGetState
 875              		.code	16
 876              		.thumb_func
 877              		.type	CyIntGetState, %function
 878              	CyIntGetState:
 879              	.LFB25:
2589:Generated_Source\PSoC4/CyLib.c **** 
2590:Generated_Source\PSoC4/CyLib.c **** 
2591:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2592:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2593:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2594:Generated_Source\PSoC4/CyLib.c **** *
2595:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2596:Generated_Source\PSoC4/CyLib.c **** *
2597:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2598:Generated_Source\PSoC4/CyLib.c **** *
2599:Generated_Source\PSoC4/CyLib.c **** * \return
2600:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2601:Generated_Source\PSoC4/CyLib.c **** *
2602:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2603:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2604:Generated_Source\PSoC4/CyLib.c **** {
 880              		.loc 1 2604 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 885              	.LVL55:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 63


2605:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2606:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 886              		.loc 1 2606 0
 887 0000 1F22     		movs	r2, #31
 888 0002 044B     		ldr	r3, .L69
 889 0004 1040     		ands	r0, r2
 890              	.LVL56:
 891 0006 1B68     		ldr	r3, [r3]
2607:Generated_Source\PSoC4/CyLib.c **** }
 892              		.loc 1 2607 0
 893              		@ sp needed
2606:Generated_Source\PSoC4/CyLib.c **** }
 894              		.loc 1 2606 0
 895 0008 C340     		lsrs	r3, r3, r0
 896 000a 1800     		movs	r0, r3
 897 000c 0123     		movs	r3, #1
 898 000e 1840     		ands	r0, r3
 899              		.loc 1 2607 0
 900 0010 7047     		bx	lr
 901              	.L70:
 902 0012 C046     		.align	2
 903              	.L69:
 904 0014 00E100E0 		.word	-536813312
 905              		.cfi_endproc
 906              	.LFE25:
 907              		.size	CyIntGetState, .-CyIntGetState
 908              		.section	.text.CyIntDisable,"ax",%progbits
 909              		.align	1
 910              		.global	CyIntDisable
 911              		.code	16
 912              		.thumb_func
 913              		.type	CyIntDisable, %function
 914              	CyIntDisable:
 915              	.LFB26:
2608:Generated_Source\PSoC4/CyLib.c **** 
2609:Generated_Source\PSoC4/CyLib.c **** 
2610:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2611:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2612:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2613:Generated_Source\PSoC4/CyLib.c **** *
2614:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2615:Generated_Source\PSoC4/CyLib.c **** *
2616:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2617:Generated_Source\PSoC4/CyLib.c **** *
2618:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2619:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2620:Generated_Source\PSoC4/CyLib.c **** {
 916              		.loc 1 2620 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 0
 919              		@ frame_needed = 0, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921              	.LVL57:
2621:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 922              		.loc 1 2621 0
 923 0000 1F23     		movs	r3, #31
 924 0002 1840     		ands	r0, r3
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 64


 925              	.LVL58:
 926 0004 1E3B     		subs	r3, r3, #30
 927 0006 8340     		lsls	r3, r3, r0
 928 0008 014A     		ldr	r2, .L72
2622:Generated_Source\PSoC4/CyLib.c **** }
 929              		.loc 1 2622 0
 930              		@ sp needed
2621:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 931              		.loc 1 2621 0
 932 000a 1360     		str	r3, [r2]
 933              		.loc 1 2622 0
 934 000c 7047     		bx	lr
 935              	.L73:
 936 000e C046     		.align	2
 937              	.L72:
 938 0010 80E100E0 		.word	-536813184
 939              		.cfi_endproc
 940              	.LFE26:
 941              		.size	CyIntDisable, .-CyIntDisable
 942              		.section	.text.CyIntSetPending,"ax",%progbits
 943              		.align	1
 944              		.global	CyIntSetPending
 945              		.code	16
 946              		.thumb_func
 947              		.type	CyIntSetPending, %function
 948              	CyIntSetPending:
 949              	.LFB27:
2623:Generated_Source\PSoC4/CyLib.c **** 
2624:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2625:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2626:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2627:Generated_Source\PSoC4/CyLib.c **** *
2628:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2629:Generated_Source\PSoC4/CyLib.c **** *
2630:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2631:Generated_Source\PSoC4/CyLib.c **** *
2632:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2633:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2634:Generated_Source\PSoC4/CyLib.c **** {
 950              		.loc 1 2634 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955              	.LVL59:
2635:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 956              		.loc 1 2635 0
 957 0000 1F23     		movs	r3, #31
 958 0002 1840     		ands	r0, r3
 959              	.LVL60:
 960 0004 1E3B     		subs	r3, r3, #30
 961 0006 8340     		lsls	r3, r3, r0
 962 0008 014A     		ldr	r2, .L75
2636:Generated_Source\PSoC4/CyLib.c **** }
 963              		.loc 1 2636 0
 964              		@ sp needed
2635:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 65


 965              		.loc 1 2635 0
 966 000a 1360     		str	r3, [r2]
 967              		.loc 1 2636 0
 968 000c 7047     		bx	lr
 969              	.L76:
 970 000e C046     		.align	2
 971              	.L75:
 972 0010 00E200E0 		.word	-536813056
 973              		.cfi_endproc
 974              	.LFE27:
 975              		.size	CyIntSetPending, .-CyIntSetPending
 976              		.section	.text.CyIntClearPending,"ax",%progbits
 977              		.align	1
 978              		.global	CyIntClearPending
 979              		.code	16
 980              		.thumb_func
 981              		.type	CyIntClearPending, %function
 982              	CyIntClearPending:
 983              	.LFB28:
2637:Generated_Source\PSoC4/CyLib.c **** 
2638:Generated_Source\PSoC4/CyLib.c **** 
2639:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2640:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2641:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2642:Generated_Source\PSoC4/CyLib.c **** *
2643:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2644:Generated_Source\PSoC4/CyLib.c **** *
2645:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2646:Generated_Source\PSoC4/CyLib.c **** *
2647:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2648:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2649:Generated_Source\PSoC4/CyLib.c **** {
 984              		.loc 1 2649 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 0
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 988              		@ link register save eliminated.
 989              	.LVL61:
2650:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 990              		.loc 1 2650 0
 991 0000 1F23     		movs	r3, #31
 992 0002 1840     		ands	r0, r3
 993              	.LVL62:
 994 0004 1E3B     		subs	r3, r3, #30
 995 0006 8340     		lsls	r3, r3, r0
 996 0008 014A     		ldr	r2, .L78
2651:Generated_Source\PSoC4/CyLib.c **** }
 997              		.loc 1 2651 0
 998              		@ sp needed
2650:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 999              		.loc 1 2650 0
 1000 000a 1360     		str	r3, [r2]
 1001              		.loc 1 2651 0
 1002 000c 7047     		bx	lr
 1003              	.L79:
 1004 000e C046     		.align	2
 1005              	.L78:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 66


 1006 0010 80E200E0 		.word	-536812928
 1007              		.cfi_endproc
 1008              	.LFE28:
 1009              		.size	CyIntClearPending, .-CyIntClearPending
 1010              		.section	.text.CyHalt,"ax",%progbits
 1011              		.align	1
 1012              		.global	CyHalt
 1013              		.code	16
 1014              		.thumb_func
 1015              		.type	CyHalt, %function
 1016              	CyHalt:
 1017              	.LFB29:
2652:Generated_Source\PSoC4/CyLib.c **** 
2653:Generated_Source\PSoC4/CyLib.c **** 
2654:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2655:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2656:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2657:Generated_Source\PSoC4/CyLib.c **** *
2658:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2659:Generated_Source\PSoC4/CyLib.c **** *
2660:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2661:Generated_Source\PSoC4/CyLib.c **** *
2662:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2663:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2664:Generated_Source\PSoC4/CyLib.c **** {
 1018              		.loc 1 2664 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 0
 1021              		@ frame_needed = 0, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023              	.LVL63:
2665:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2666:Generated_Source\PSoC4/CyLib.c ****     {
2667:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2668:Generated_Source\PSoC4/CyLib.c ****     }
2669:Generated_Source\PSoC4/CyLib.c **** 
2670:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2671:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2672:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2673:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1024              		.loc 1 2673 0
 1025              		.syntax divided
 1026              	@ 2673 "Generated_Source\PSoC4\CyLib.c" 1
 1027 0000 01BE     		    bkpt    1
 1028              	@ 0 "" 2
2674:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2675:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2676:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2677:Generated_Source\PSoC4/CyLib.c **** }
 1029              		.loc 1 2677 0
 1030              		.thumb
 1031              		.syntax unified
 1032              		@ sp needed
 1033 0002 7047     		bx	lr
 1034              		.cfi_endproc
 1035              	.LFE29:
 1036              		.size	CyHalt, .-CyHalt
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 67


 1037              		.section	.text.CySoftwareReset,"ax",%progbits
 1038              		.align	1
 1039              		.global	CySoftwareReset
 1040              		.code	16
 1041              		.thumb_func
 1042              		.type	CySoftwareReset, %function
 1043              	CySoftwareReset:
 1044              	.LFB30:
2678:Generated_Source\PSoC4/CyLib.c **** 
2679:Generated_Source\PSoC4/CyLib.c **** 
2680:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2681:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2682:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2683:Generated_Source\PSoC4/CyLib.c **** *
2684:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2685:Generated_Source\PSoC4/CyLib.c **** *
2686:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2687:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2688:Generated_Source\PSoC4/CyLib.c **** {
 1045              		.loc 1 2688 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              		@ link register save eliminated.
2689:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2690:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
2691:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2692:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2693:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1050              		.loc 1 2693 0
 1051 0000 034A     		ldr	r2, .L82
2694:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1052              		.loc 1 2694 0
 1053 0002 0449     		ldr	r1, .L82+4
2693:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1054              		.loc 1 2693 0
 1055 0004 1368     		ldr	r3, [r2]
2695:Generated_Source\PSoC4/CyLib.c **** }
 1056              		.loc 1 2695 0
 1057              		@ sp needed
2694:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1058              		.loc 1 2694 0
 1059 0006 9BB2     		uxth	r3, r3
 1060 0008 0B43     		orrs	r3, r1
2693:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1061              		.loc 1 2693 0
 1062 000a 1360     		str	r3, [r2]
 1063              		.loc 1 2695 0
 1064 000c 7047     		bx	lr
 1065              	.L83:
 1066 000e C046     		.align	2
 1067              	.L82:
 1068 0010 0CED00E0 		.word	-536810228
 1069 0014 0400FA05 		.word	100270084
 1070              		.cfi_endproc
 1071              	.LFE30:
 1072              		.size	CySoftwareReset, .-CySoftwareReset
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 68


 1073              		.section	.text.CyDelay,"ax",%progbits
 1074              		.align	1
 1075              		.global	CyDelay
 1076              		.code	16
 1077              		.thumb_func
 1078              		.type	CyDelay, %function
 1079              	CyDelay:
 1080              	.LFB31:
2696:Generated_Source\PSoC4/CyLib.c **** 
2697:Generated_Source\PSoC4/CyLib.c **** 
2698:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2699:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2700:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2701:Generated_Source\PSoC4/CyLib.c **** *
2702:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2703:Generated_Source\PSoC4/CyLib.c **** *
2704:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2705:Generated_Source\PSoC4/CyLib.c **** *
2706:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2707:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2708:Generated_Source\PSoC4/CyLib.c **** {
 1081              		.loc 1 2708 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              	.LVL64:
 1086 0000 70B5     		push	{r4, r5, r6, lr}
 1087              		.cfi_def_cfa_offset 16
 1088              		.cfi_offset 4, -16
 1089              		.cfi_offset 5, -12
 1090              		.cfi_offset 6, -8
 1091              		.cfi_offset 14, -4
2709:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1092              		.loc 1 2709 0
 1093 0002 8025     		movs	r5, #128
2708:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1094              		.loc 1 2708 0
 1095 0004 0400     		movs	r4, r0
 1096              		.loc 1 2709 0
 1097 0006 2D02     		lsls	r5, r5, #8
 1098              	.LVL65:
 1099              	.L85:
 1100 0008 064B     		ldr	r3, .L88
 1101 000a AC42     		cmp	r4, r5
 1102 000c 05D9     		bls	.L87
2710:Generated_Source\PSoC4/CyLib.c ****     {
2711:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2712:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2713:Generated_Source\PSoC4/CyLib.c ****          */
2714:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1103              		.loc 1 2714 0
 1104 000e 5868     		ldr	r0, [r3, #4]
 1105 0010 FFF7FEFF 		bl	CyDelayCycles
 1106              	.LVL66:
2715:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1107              		.loc 1 2715 0
 1108 0014 044B     		ldr	r3, .L88+4
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 69


 1109 0016 E418     		adds	r4, r4, r3
 1110              	.LVL67:
 1111 0018 F6E7     		b	.L85
 1112              	.L87:
2716:Generated_Source\PSoC4/CyLib.c ****     }
2717:Generated_Source\PSoC4/CyLib.c **** 
2718:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1113              		.loc 1 2718 0
 1114 001a 9868     		ldr	r0, [r3, #8]
2719:Generated_Source\PSoC4/CyLib.c **** }
 1115              		.loc 1 2719 0
 1116              		@ sp needed
2718:Generated_Source\PSoC4/CyLib.c **** }
 1117              		.loc 1 2718 0
 1118 001c 6043     		muls	r0, r4
 1119 001e FFF7FEFF 		bl	CyDelayCycles
 1120              	.LVL68:
 1121              	.LVL69:
 1122              		.loc 1 2719 0
 1123 0022 70BD     		pop	{r4, r5, r6, pc}
 1124              	.L89:
 1125              		.align	2
 1126              	.L88:
 1127 0024 00000000 		.word	.LANCHOR1
 1128 0028 0080FFFF 		.word	-32768
 1129              		.cfi_endproc
 1130              	.LFE31:
 1131              		.size	CyDelay, .-CyDelay
 1132              		.section	.text.CySysClkImoEnableWcoLock,"ax",%progbits
 1133              		.align	1
 1134              		.global	CySysClkImoEnableWcoLock
 1135              		.code	16
 1136              		.thumb_func
 1137              		.type	CySysClkImoEnableWcoLock, %function
 1138              	CySysClkImoEnableWcoLock:
 1139              	.LFB3:
 167:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 1140              		.loc 1 167 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 16
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144              	.LVL70:
 1145 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1146              		.cfi_def_cfa_offset 20
 1147              		.cfi_offset 4, -20
 1148              		.cfi_offset 5, -16
 1149              		.cfi_offset 6, -12
 1150              		.cfi_offset 7, -8
 1151              		.cfi_offset 14, -4
 1152 0002 85B0     		sub	sp, sp, #20
 1153              		.cfi_def_cfa_offset 40
 178:Generated_Source\PSoC4/CyLib.c ****         {
 1154              		.loc 1 178 0
 1155 0004 FFF7FEFF 		bl	CySysClkWcoEnabled
 1156              	.LVL71:
 1157 0008 0028     		cmp	r0, #0
 1158 000a 55D0     		beq	.L90
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 70


 1159              	.LBB14:
 1160              	.LBB15:
 180:Generated_Source\PSoC4/CyLib.c **** 
 1161              		.loc 1 180 0
 1162 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1163              	.LVL72:
 192:Generated_Source\PSoC4/CyLib.c ****                 {
 1164              		.loc 1 192 0
 1165 0010 0023     		movs	r3, #0
 180:Generated_Source\PSoC4/CyLib.c **** 
 1166              		.loc 1 180 0
 1167 0012 0190     		str	r0, [sp, #4]
 1168              	.LVL73:
 194:Generated_Source\PSoC4/CyLib.c ****                     {
 1169              		.loc 1 194 0
 1170 0014 3F20     		movs	r0, #63
 1171 0016 2949     		ldr	r1, .L102
 1172 0018 294C     		ldr	r4, .L102+4
 1173              	.LVL74:
 1174              	.L94:
 1175 001a 0A68     		ldr	r2, [r1]
 1176 001c 1D5D     		ldrb	r5, [r3, r4]
 1177 001e 0240     		ands	r2, r0
 1178 0020 AA42     		cmp	r2, r5
 1179 0022 01D1     		bne	.L92
 196:Generated_Source\PSoC4/CyLib.c ****                         break;
 1180              		.loc 1 196 0
 1181 0024 0333     		adds	r3, r3, #3
 1182              	.LVL75:
 1183 0026 03E0     		b	.L93
 1184              	.LVL76:
 1185              	.L92:
 192:Generated_Source\PSoC4/CyLib.c ****                 {
 1186              		.loc 1 192 0
 1187 0028 0133     		adds	r3, r3, #1
 1188              	.LVL77:
 1189 002a 2E2B     		cmp	r3, #46
 1190 002c F5D1     		bne	.L94
 191:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 1191              		.loc 1 191 0
 1192 002e 2B3B     		subs	r3, r3, #43
 1193              	.LVL78:
 1194              	.L93:
 214:Generated_Source\PSoC4/CyLib.c ****             
 1195              		.loc 1 214 0
 1196 0030 0021     		movs	r1, #0
 218:Generated_Source\PSoC4/CyLib.c ****                 {
 1197              		.loc 1 218 0
 1198 0032 1F20     		movs	r0, #31
 214:Generated_Source\PSoC4/CyLib.c ****             
 1199              		.loc 1 214 0
 1200 0034 234A     		ldr	r2, .L102+8
 1201 0036 1160     		str	r1, [r2]
 218:Generated_Source\PSoC4/CyLib.c ****                 {
 1202              		.loc 1 218 0
 1203 0038 2349     		ldr	r1, .L102+12
 1204 003a 0A68     		ldr	r2, [r1]
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 71


 1205 003c 0242     		tst	r2, r0
 1206 003e 04D1     		bne	.L95
 220:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 1207              		.loc 1 220 0
 1208 0040 0A68     		ldr	r2, [r1]
 1209 0042 8243     		bics	r2, r0
 1210 0044 1338     		subs	r0, r0, #19
 1211 0046 0243     		orrs	r2, r0
 1212 0048 0A60     		str	r2, [r1]
 1213              	.L95:
 225:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 1214              		.loc 1 225 0
 1215 004a 204C     		ldr	r4, .L102+16
 1216 004c 204A     		ldr	r2, .L102+20
 1217 004e 2168     		ldr	r1, [r4]
 1218              	.LVL79:
 238:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 1219              		.loc 1 238 0
 1220 0050 204E     		ldr	r6, .L102+24
 1221 0052 1140     		ands	r1, r2
 1222              	.LVL80:
 1223 0054 A022     		movs	r2, #160
 1224 0056 5203     		lsls	r2, r2, #13
 1225 0058 1143     		orrs	r1, r2
 1226              	.LVL81:
 234:Generated_Source\PSoC4/CyLib.c **** 
 1227              		.loc 1 234 0
 1228 005a 1F4A     		ldr	r2, .L102+28
 239:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 1229              		.loc 1 239 0
 1230 005c 3020     		movs	r0, #48
 234:Generated_Source\PSoC4/CyLib.c **** 
 1231              		.loc 1 234 0
 1232 005e 5343     		muls	r3, r2
 1233              	.LVL82:
 1234 0060 8022     		movs	r2, #128
 1235 0062 D201     		lsls	r2, r2, #7
 1236 0064 9B18     		adds	r3, r3, r2
 1237 0066 DB0B     		lsrs	r3, r3, #15
 1238 0068 013B     		subs	r3, r3, #1
 1239 006a 0B43     		orrs	r3, r1
 1240              	.LVL83:
 236:Generated_Source\PSoC4/CyLib.c ****             
 1241              		.loc 1 236 0
 1242 006c 2360     		str	r3, [r4]
 238:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 1243              		.loc 1 238 0
 1244 006e 3368     		ldr	r3, [r6]
 1245              	.LVL84:
 175:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 1246              		.loc 1 175 0
 1247 0070 0025     		movs	r5, #0
 238:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 1248              		.loc 1 238 0
 1249 0072 0393     		str	r3, [sp, #12]
 1250              	.LVL85:
 239:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 72


 1251              		.loc 1 239 0
 1252 0074 FFF7FEFF 		bl	CySysFlashSetWaitCycles
 1253              	.LVL86:
 240:Generated_Source\PSoC4/CyLib.c **** 
 1254              		.loc 1 240 0
 1255 0078 8021     		movs	r1, #128
 1256 007a 184A     		ldr	r2, .L102+32
 1257 007c C905     		lsls	r1, r1, #23
 1258 007e 1368     		ldr	r3, [r2]
 1259 0080 0B43     		orrs	r3, r1
 1260 0082 1360     		str	r3, [r2]
 242:Generated_Source\PSoC4/CyLib.c ****             
 1261              		.loc 1 242 0
 1262 0084 2268     		ldr	r2, [r4]
 1263 0086 164B     		ldr	r3, .L102+36
 1264 0088 1A40     		ands	r2, r3
 1265 008a 1700     		movs	r7, r2
 1266              	.LVL87:
 1267              	.L96:
 246:Generated_Source\PSoC4/CyLib.c ****                 lfLimit += CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_STEP;
 1268              		.loc 1 246 0
 1269 008c 0120     		movs	r0, #1
 247:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_WCO_DPLL_REG = (regTmp | (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT
 1270              		.loc 1 247 0
 1271 008e 1035     		adds	r5, r5, #16
 1272              	.LVL88:
 246:Generated_Source\PSoC4/CyLib.c ****                 lfLimit += CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_STEP;
 1273              		.loc 1 246 0
 1274 0090 FFF7FEFF 		bl	CyDelay
 1275              	.LVL89:
 248:Generated_Source\PSoC4/CyLib.c ****             }
 1276              		.loc 1 248 0
 1277 0094 AB05     		lsls	r3, r5, #22
 1278 0096 3B43     		orrs	r3, r7
 1279 0098 2360     		str	r3, [r4]
 244:Generated_Source\PSoC4/CyLib.c ****             {
 1280              		.loc 1 244 0
 1281 009a F02D     		cmp	r5, #240
 1282 009c F6D1     		bne	.L96
 251:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = (regTmp | (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << 
 1283              		.loc 1 251 0
 1284 009e 0120     		movs	r0, #1
 1285 00a0 FFF7FEFF 		bl	CyDelay
 1286              	.LVL90:
 252:Generated_Source\PSoC4/CyLib.c ****                                                  CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT));
 1287              		.loc 1 252 0
 1288 00a4 FF23     		movs	r3, #255
 1289 00a6 094A     		ldr	r2, .L102+16
 1290 00a8 9B05     		lsls	r3, r3, #22
 1291 00aa 3B43     		orrs	r3, r7
 1292 00ac 1360     		str	r3, [r2]
 255:Generated_Source\PSoC4/CyLib.c **** 
 1293              		.loc 1 255 0
 1294 00ae 039B     		ldr	r3, [sp, #12]
 257:Generated_Source\PSoC4/CyLib.c ****         }
 1295              		.loc 1 257 0
 1296 00b0 0198     		ldr	r0, [sp, #4]
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 73


 255:Generated_Source\PSoC4/CyLib.c **** 
 1297              		.loc 1 255 0
 1298 00b2 3360     		str	r3, [r6]
 257:Generated_Source\PSoC4/CyLib.c ****         }
 1299              		.loc 1 257 0
 1300 00b4 FFF7FEFF 		bl	CyExitCriticalSection
 1301              	.LVL91:
 1302              	.L90:
 1303              	.LBE15:
 1304              	.LBE14:
 259:Generated_Source\PSoC4/CyLib.c **** 
 1305              		.loc 1 259 0
 1306 00b8 05B0     		add	sp, sp, #20
 1307              		@ sp needed
 1308 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 1309              	.L103:
 1310              		.align	2
 1311              	.L102:
 1312 00bc 2CFF0B40 		.word	1074528044
 1313 00c0 00000000 		.word	.LANCHOR0
 1314 00c4 28FF0B40 		.word	1074528040
 1315 00c8 34FF0B40 		.word	1074528052
 1316 00cc 08002240 		.word	1075970056
 1317 00d0 00F800C0 		.word	-1073678336
 1318 00d4 30001040 		.word	1074790448
 1319 00d8 40420F00 		.word	1000000
 1320 00dc 00002240 		.word	1075970048
 1321 00e0 FFFF3FC0 		.word	-1069547521
 1322              		.cfi_endproc
 1323              	.LFE3:
 1324              		.size	CySysClkImoEnableWcoLock, .-CySysClkImoEnableWcoLock
 1325              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 1326              		.align	1
 1327              		.global	CySysClkWriteImoFreq
 1328              		.code	16
 1329              		.thumb_func
 1330              		.type	CySysClkWriteImoFreq, %function
 1331              	CySysClkWriteImoFreq:
 1332              	.LFB10:
 768:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 1333              		.loc 1 768 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 24
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337              	.LVL92:
 1338 0000 30B5     		push	{r4, r5, lr}
 1339              		.cfi_def_cfa_offset 12
 1340              		.cfi_offset 4, -12
 1341              		.cfi_offset 5, -8
 1342              		.cfi_offset 14, -4
 1343 0002 87B0     		sub	sp, sp, #28
 1344              		.cfi_def_cfa_offset 40
 768:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 1345              		.loc 1 768 0
 1346 0004 0400     		movs	r4, r0
 790:Generated_Source\PSoC4/CyLib.c **** 
 1347              		.loc 1 790 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 74


 1348 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1349              	.LVL93:
 1350 000a 0500     		movs	r5, r0
 1351              	.LVL94:
 793:Generated_Source\PSoC4/CyLib.c ****             {
 1352              		.loc 1 793 0
 1353 000c FFF7FEFF 		bl	CySysClkImoGetWcoLock
 1354              	.LVL95:
 780:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 1355              		.loc 1 780 0
 1356 0010 0022     		movs	r2, #0
 793:Generated_Source\PSoC4/CyLib.c ****             {
 1357              		.loc 1 793 0
 1358 0012 9042     		cmp	r0, r2
 1359 0014 02D0     		beq	.L105
 1360              	.LVL96:
 796:Generated_Source\PSoC4/CyLib.c ****             }
 1361              		.loc 1 796 0
 1362 0016 FFF7FEFF 		bl	CySysClkImoDisableWcoLock
 1363              	.LVL97:
 795:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 1364              		.loc 1 795 0
 1365 001a 0122     		movs	r2, #1
 1366              	.LVL98:
 1367              	.L105:
 824:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 1368              		.loc 1 824 0
 1369 001c 104B     		ldr	r3, .L109
 835:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 1370              		.loc 1 835 0
 1371 001e 1148     		ldr	r0, .L109+4
 824:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 1372              		.loc 1 824 0
 1373 0020 1968     		ldr	r1, [r3]
 1374 0022 02AB     		add	r3, sp, #8
 1375 0024 0291     		str	r1, [sp, #8]
 825:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 1376              		.loc 1 825 0
 1377 0026 1049     		ldr	r1, .L109+8
 1378 0028 0968     		ldr	r1, [r1]
 1379 002a 0391     		str	r1, [sp, #12]
 826:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 1380              		.loc 1 826 0
 1381 002c 0F49     		ldr	r1, .L109+12
 1382 002e 0C19     		adds	r4, r1, r4
 1383              	.LVL99:
 1384 0030 033C     		subs	r4, r4, #3
 1385 0032 2178     		ldrb	r1, [r4]
 1386 0034 0491     		str	r1, [sp, #16]
 827:Generated_Source\PSoC4/CyLib.c **** 
 1387              		.loc 1 827 0
 1388 0036 0E49     		ldr	r1, .L109+16
 1389 0038 0968     		ldr	r1, [r1]
 1390 003a 0591     		str	r1, [sp, #20]
 829:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 1391              		.loc 1 829 0
 1392 003c 0D49     		ldr	r1, .L109+20
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 75


 1393 003e 0091     		str	r1, [sp]
 834:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 1394              		.loc 1 834 0
 1395 0040 6946     		mov	r1, sp
 832:Generated_Source\PSoC4/CyLib.c **** 
 1396              		.loc 1 832 0
 1397 0042 0193     		str	r3, [sp, #4]
 834:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 1398              		.loc 1 834 0
 1399 0044 0C4B     		ldr	r3, .L109+24
 1400 0046 1960     		str	r1, [r3]
 835:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 1401              		.loc 1 835 0
 1402 0048 0C49     		ldr	r1, .L109+28
 1403 004a 0860     		str	r0, [r1]
 836:Generated_Source\PSoC4/CyLib.c **** 
 1404              		.loc 1 836 0
 1405 004c 1B68     		ldr	r3, [r3]
 934:Generated_Source\PSoC4/CyLib.c ****             {
 1406              		.loc 1 934 0
 1407 004e 012A     		cmp	r2, #1
 1408 0050 01D1     		bne	.L106
 936:Generated_Source\PSoC4/CyLib.c ****             }
 1409              		.loc 1 936 0
 1410 0052 FFF7FEFF 		bl	CySysClkImoEnableWcoLock
 1411              	.LVL100:
 1412              	.L106:
 947:Generated_Source\PSoC4/CyLib.c ****     }
 1413              		.loc 1 947 0
 1414 0056 2800     		movs	r0, r5
 1415 0058 FFF7FEFF 		bl	CyExitCriticalSection
 1416              	.LVL101:
 948:Generated_Source\PSoC4/CyLib.c **** 
 1417              		.loc 1 948 0
 1418 005c 07B0     		add	sp, sp, #28
 1419              		@ sp needed
 1420              	.LVL102:
 1421 005e 30BD     		pop	{r4, r5, pc}
 1422              	.L110:
 1423              		.align	2
 1424              	.L109:
 1425 0060 08010B40 		.word	1074462984
 1426 0064 17000080 		.word	-2147483625
 1427 0068 00010B40 		.word	1074462976
 1428 006c 00000000 		.word	.LANCHOR0
 1429 0070 30001040 		.word	1074790448
 1430 0074 B6EA0000 		.word	60086
 1431 0078 08001040 		.word	1074790408
 1432 007c 04001040 		.word	1074790404
 1433              		.cfi_endproc
 1434              	.LFE10:
 1435              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 1436              		.section	.text.CyDelayUs,"ax",%progbits
 1437              		.align	1
 1438              		.global	CyDelayUs
 1439              		.code	16
 1440              		.thumb_func
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 76


 1441              		.type	CyDelayUs, %function
 1442              	CyDelayUs:
 1443              	.LFB32:
2720:Generated_Source\PSoC4/CyLib.c **** 
2721:Generated_Source\PSoC4/CyLib.c **** 
2722:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2723:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2724:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2725:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2726:Generated_Source\PSoC4/CyLib.c **** *
2727:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2728:Generated_Source\PSoC4/CyLib.c **** *
2729:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2730:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2731:Generated_Source\PSoC4/CyLib.c **** {
 1444              		.loc 1 2731 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              	.LVL103:
 1449 0000 10B5     		push	{r4, lr}
 1450              		.cfi_def_cfa_offset 8
 1451              		.cfi_offset 4, -8
 1452              		.cfi_offset 14, -4
2732:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1453              		.loc 1 2732 0
 1454 0002 034B     		ldr	r3, .L112
2733:Generated_Source\PSoC4/CyLib.c **** }
 1455              		.loc 1 2733 0
 1456              		@ sp needed
2732:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1457              		.loc 1 2732 0
 1458 0004 1B7B     		ldrb	r3, [r3, #12]
 1459 0006 5843     		muls	r0, r3
 1460              	.LVL104:
 1461 0008 FFF7FEFF 		bl	CyDelayCycles
 1462              	.LVL105:
 1463              		.loc 1 2733 0
 1464 000c 10BD     		pop	{r4, pc}
 1465              	.L113:
 1466 000e C046     		.align	2
 1467              	.L112:
 1468 0010 00000000 		.word	.LANCHOR1
 1469              		.cfi_endproc
 1470              	.LFE32:
 1471              		.size	CyDelayUs, .-CyDelayUs
 1472              		.section	.text.CySysLvdEnable,"ax",%progbits
 1473              		.align	1
 1474              		.global	CySysLvdEnable
 1475              		.code	16
 1476              		.thumb_func
 1477              		.type	CySysLvdEnable, %function
 1478              	CySysLvdEnable:
 1479              	.LFB11:
2267:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
 1480              		.loc 1 2267 0
 1481              		.cfi_startproc
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 77


 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              	.LVL106:
 1485 0000 70B5     		push	{r4, r5, r6, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 4, -16
 1488              		.cfi_offset 5, -12
 1489              		.cfi_offset 6, -8
 1490              		.cfi_offset 14, -4
2269:Generated_Source\PSoC4/CyLib.c **** 
 1491              		.loc 1 2269 0
 1492 0002 0225     		movs	r5, #2
2272:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 1493              		.loc 1 2272 0
 1494 0004 1E21     		movs	r1, #30
2269:Generated_Source\PSoC4/CyLib.c **** 
 1495              		.loc 1 2269 0
 1496 0006 0C4C     		ldr	r4, .L115
2272:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 1497              		.loc 1 2272 0
 1498 0008 0C4A     		ldr	r2, .L115+4
2269:Generated_Source\PSoC4/CyLib.c **** 
 1499              		.loc 1 2269 0
 1500 000a 2368     		ldr	r3, [r4]
2272:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 1501              		.loc 1 2272 0
 1502 000c 4000     		lsls	r0, r0, #1
 1503              	.LVL107:
2269:Generated_Source\PSoC4/CyLib.c **** 
 1504              		.loc 1 2269 0
 1505 000e AB43     		bics	r3, r5
 1506 0010 2360     		str	r3, [r4]
2272:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 1507              		.loc 1 2272 0
 1508 0012 1368     		ldr	r3, [r2]
 1509 0014 0840     		ands	r0, r1
 1510 0016 8B43     		bics	r3, r1
 1511 0018 1843     		orrs	r0, r3
 1512 001a 1060     		str	r0, [r2]
2279:Generated_Source\PSoC4/CyLib.c **** 
 1513              		.loc 1 2279 0
 1514 001c FA20     		movs	r0, #250
2276:Generated_Source\PSoC4/CyLib.c **** 
 1515              		.loc 1 2276 0
 1516 001e 1368     		ldr	r3, [r2]
 1517 0020 1D39     		subs	r1, r1, #29
 1518 0022 0B43     		orrs	r3, r1
 1519 0024 1360     		str	r3, [r2]
2279:Generated_Source\PSoC4/CyLib.c **** 
 1520              		.loc 1 2279 0
 1521 0026 8000     		lsls	r0, r0, #2
 1522 0028 FFF7FEFF 		bl	CyDelayUs
 1523              	.LVL108:
 1524              	.LBB16:
 1525              	.LBB17:
2332:Generated_Source\PSoC4/CyLib.c ****     }
 1526              		.loc 1 2332 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 78


 1527 002c 044B     		ldr	r3, .L115+8
 1528              	.LBE17:
 1529              	.LBE16:
2286:Generated_Source\PSoC4/CyLib.c **** 
 1530              		.loc 1 2286 0
 1531              		@ sp needed
 1532              	.LBB19:
 1533              	.LBB18:
2332:Generated_Source\PSoC4/CyLib.c ****     }
 1534              		.loc 1 2332 0
 1535 002e 1D60     		str	r5, [r3]
 1536              	.LBE18:
 1537              	.LBE19:
2285:Generated_Source\PSoC4/CyLib.c ****     }
 1538              		.loc 1 2285 0
 1539 0030 2368     		ldr	r3, [r4]
 1540 0032 1D43     		orrs	r5, r3
 1541 0034 2560     		str	r5, [r4]
2286:Generated_Source\PSoC4/CyLib.c **** 
 1542              		.loc 1 2286 0
 1543 0036 70BD     		pop	{r4, r5, r6, pc}
 1544              	.L116:
 1545              		.align	2
 1546              	.L115:
 1547 0038 08000B40 		.word	1074462728
 1548 003c 18000B40 		.word	1074462744
 1549 0040 04000B40 		.word	1074462724
 1550              		.cfi_endproc
 1551              	.LFE11:
 1552              		.size	CySysLvdEnable, .-CySysLvdEnable
 1553              		.global	__aeabi_uidiv
 1554              		.section	.text.CyDelayFreq,"ax",%progbits
 1555              		.align	1
 1556              		.global	CyDelayFreq
 1557              		.code	16
 1558              		.thumb_func
 1559              		.type	CyDelayFreq, %function
 1560              	CyDelayFreq:
 1561              	.LFB33:
2734:Generated_Source\PSoC4/CyLib.c **** 
2735:Generated_Source\PSoC4/CyLib.c **** 
2736:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2737:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2738:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2739:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2740:Generated_Source\PSoC4/CyLib.c **** *
2741:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2742:Generated_Source\PSoC4/CyLib.c **** *
2743:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2744:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2745:Generated_Source\PSoC4/CyLib.c **** {
 1562              		.loc 1 2745 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
 1566              	.LVL109:
 1567 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 79


 1568              		.cfi_def_cfa_offset 16
 1569              		.cfi_offset 4, -16
 1570              		.cfi_offset 5, -12
 1571              		.cfi_offset 6, -8
 1572              		.cfi_offset 14, -4
 1573 0002 0C4C     		ldr	r4, .L120
2746:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1574              		.loc 1 2746 0
 1575 0004 0028     		cmp	r0, #0
 1576 0006 01D0     		beq	.L118
2747:Generated_Source\PSoC4/CyLib.c ****     {
2748:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1577              		.loc 1 2748 0
 1578 0008 2061     		str	r0, [r4, #16]
 1579 000a 01E0     		b	.L119
 1580              	.L118:
2749:Generated_Source\PSoC4/CyLib.c ****     }
2750:Generated_Source\PSoC4/CyLib.c ****     else
2751:Generated_Source\PSoC4/CyLib.c ****     {
2752:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 1581              		.loc 1 2752 0
 1582 000c 0A4B     		ldr	r3, .L120+4
 1583 000e 2361     		str	r3, [r4, #16]
 1584              	.L119:
2753:Generated_Source\PSoC4/CyLib.c ****     }
2754:Generated_Source\PSoC4/CyLib.c **** 
2755:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 1585              		.loc 1 2755 0
 1586 0010 2569     		ldr	r5, [r4, #16]
 1587 0012 0A4B     		ldr	r3, .L120+8
 1588 0014 0A49     		ldr	r1, .L120+12
 1589 0016 E818     		adds	r0, r5, r3
 1590              	.LVL110:
 1591 0018 FFF7FEFF 		bl	__aeabi_uidiv
 1592              	.LVL111:
2756:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 1593              		.loc 1 2756 0
 1594 001c FA21     		movs	r1, #250
 1595 001e 094B     		ldr	r3, .L120+16
2755:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 1596              		.loc 1 2755 0
 1597 0020 2073     		strb	r0, [r4, #12]
 1598              		.loc 1 2756 0
 1599 0022 8900     		lsls	r1, r1, #2
 1600 0024 E818     		adds	r0, r5, r3
 1601 0026 FFF7FEFF 		bl	__aeabi_uidiv
 1602              	.LVL112:
 1603 002a A060     		str	r0, [r4, #8]
2757:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 1604              		.loc 1 2757 0
 1605 002c C003     		lsls	r0, r0, #15
 1606 002e 6060     		str	r0, [r4, #4]
2758:Generated_Source\PSoC4/CyLib.c **** }
 1607              		.loc 1 2758 0
 1608              		@ sp needed
 1609 0030 70BD     		pop	{r4, r5, r6, pc}
 1610              	.L121:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 80


 1611 0032 C046     		.align	2
 1612              	.L120:
 1613 0034 00000000 		.word	.LANCHOR1
 1614 0038 00366E01 		.word	24000000
 1615 003c 3F420F00 		.word	999999
 1616 0040 40420F00 		.word	1000000
 1617 0044 E7030000 		.word	999
 1618              		.cfi_endproc
 1619              	.LFE33:
 1620              		.size	CyDelayFreq, .-CyDelayFreq
 1621              		.section	.text.CySysTickInit,"ax",%progbits
 1622              		.align	1
 1623              		.global	CySysTickInit
 1624              		.code	16
 1625              		.thumb_func
 1626              		.type	CySysTickInit, %function
 1627              	CySysTickInit:
 1628              	.LFB35:
2759:Generated_Source\PSoC4/CyLib.c **** 
2760:Generated_Source\PSoC4/CyLib.c **** 
2761:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2762:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2763:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2764:Generated_Source\PSoC4/CyLib.c **** *
2765:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2766:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2767:Generated_Source\PSoC4/CyLib.c **** *
2768:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2769:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2770:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2771:Generated_Source\PSoC4/CyLib.c **** *
2772:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2773:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2774:Generated_Source\PSoC4/CyLib.c **** *
2775:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2776:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2777:Generated_Source\PSoC4/CyLib.c **** {
2778:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
2779:Generated_Source\PSoC4/CyLib.c ****     {
2780:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
2781:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
2782:Generated_Source\PSoC4/CyLib.c ****     }
2783:Generated_Source\PSoC4/CyLib.c **** 
2784:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
2785:Generated_Source\PSoC4/CyLib.c **** }
2786:Generated_Source\PSoC4/CyLib.c **** 
2787:Generated_Source\PSoC4/CyLib.c **** 
2788:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2789:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2790:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2791:Generated_Source\PSoC4/CyLib.c **** *
2792:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2793:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2794:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2795:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2796:Generated_Source\PSoC4/CyLib.c **** *
2797:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 81


2798:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2799:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2800:Generated_Source\PSoC4/CyLib.c **** *
2801:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2802:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2803:Generated_Source\PSoC4/CyLib.c **** *
2804:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2805:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2806:Generated_Source\PSoC4/CyLib.c **** {
 1629              		.loc 1 2806 0
 1630              		.cfi_startproc
 1631              		@ args = 0, pretend = 0, frame = 0
 1632              		@ frame_needed = 0, uses_anonymous_args = 0
 1633              	.LVL113:
 1634 0000 10B5     		push	{r4, lr}
 1635              		.cfi_def_cfa_offset 8
 1636              		.cfi_offset 4, -8
 1637              		.cfi_offset 14, -4
2807:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2808:Generated_Source\PSoC4/CyLib.c **** 
2809:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
2810:Generated_Source\PSoC4/CyLib.c ****     {
2811:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 1638              		.loc 1 2811 0
 1639 0002 0024     		movs	r4, #0
 1640              	.LBB30:
 1641              	.LBB31:
 1642              	.LBB32:
2812:Generated_Source\PSoC4/CyLib.c ****     }
2813:Generated_Source\PSoC4/CyLib.c **** 
2814:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
2815:Generated_Source\PSoC4/CyLib.c **** 
2816:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2817:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
2818:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2819:Generated_Source\PSoC4/CyLib.c **** 
2820:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
2821:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
2822:Generated_Source\PSoC4/CyLib.c **** }
2823:Generated_Source\PSoC4/CyLib.c **** 
2824:Generated_Source\PSoC4/CyLib.c **** 
2825:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2826:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2827:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2828:Generated_Source\PSoC4/CyLib.c **** *
2829:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2830:Generated_Source\PSoC4/CyLib.c **** *
2831:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2832:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2833:Generated_Source\PSoC4/CyLib.c **** *
2834:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2835:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2836:Generated_Source\PSoC4/CyLib.c **** {
2837:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
2838:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
2839:Generated_Source\PSoC4/CyLib.c **** }
2840:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 82


2841:Generated_Source\PSoC4/CyLib.c **** 
2842:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2843:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2844:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2845:Generated_Source\PSoC4/CyLib.c **** *
2846:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2847:Generated_Source\PSoC4/CyLib.c **** *
2848:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2849:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2850:Generated_Source\PSoC4/CyLib.c **** *
2851:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2852:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2853:Generated_Source\PSoC4/CyLib.c **** {
2854:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
2855:Generated_Source\PSoC4/CyLib.c **** }
2856:Generated_Source\PSoC4/CyLib.c **** 
2857:Generated_Source\PSoC4/CyLib.c **** 
2858:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2859:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2860:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2861:Generated_Source\PSoC4/CyLib.c **** *
2862:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2863:Generated_Source\PSoC4/CyLib.c **** *
2864:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2865:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2866:Generated_Source\PSoC4/CyLib.c **** *
2867:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2868:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2869:Generated_Source\PSoC4/CyLib.c **** {
2870:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
2871:Generated_Source\PSoC4/CyLib.c **** }
2872:Generated_Source\PSoC4/CyLib.c **** 
2873:Generated_Source\PSoC4/CyLib.c **** 
2874:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2875:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2876:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2877:Generated_Source\PSoC4/CyLib.c **** *
2878:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2879:Generated_Source\PSoC4/CyLib.c **** *
2880:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2881:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2882:Generated_Source\PSoC4/CyLib.c **** *
2883:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2884:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2885:Generated_Source\PSoC4/CyLib.c **** {
2886:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
2887:Generated_Source\PSoC4/CyLib.c **** }
2888:Generated_Source\PSoC4/CyLib.c **** 
2889:Generated_Source\PSoC4/CyLib.c **** 
2890:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2891:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2892:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2893:Generated_Source\PSoC4/CyLib.c **** *
2894:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2895:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2896:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2897:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 83


2898:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2899:Generated_Source\PSoC4/CyLib.c **** *
2900:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2901:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2902:Generated_Source\PSoC4/CyLib.c **** {
2903:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
2904:Generated_Source\PSoC4/CyLib.c **** }
2905:Generated_Source\PSoC4/CyLib.c **** 
2906:Generated_Source\PSoC4/CyLib.c **** 
2907:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2908:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2909:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2910:Generated_Source\PSoC4/CyLib.c **** *
2911:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2912:Generated_Source\PSoC4/CyLib.c **** *
2913:Generated_Source\PSoC4/CyLib.c **** * \return
2914:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2915:Generated_Source\PSoC4/CyLib.c **** *
2916:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2917:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2918:Generated_Source\PSoC4/CyLib.c **** {
2919:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
2920:Generated_Source\PSoC4/CyLib.c **** }
2921:Generated_Source\PSoC4/CyLib.c **** 
2922:Generated_Source\PSoC4/CyLib.c **** 
2923:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2924:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2925:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2926:Generated_Source\PSoC4/CyLib.c **** *
2927:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2928:Generated_Source\PSoC4/CyLib.c **** *
2929:Generated_Source\PSoC4/CyLib.c **** * \return
2930:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2931:Generated_Source\PSoC4/CyLib.c **** *
2932:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2933:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2934:Generated_Source\PSoC4/CyLib.c **** {
2935:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
2936:Generated_Source\PSoC4/CyLib.c **** }
2937:Generated_Source\PSoC4/CyLib.c **** 
2938:Generated_Source\PSoC4/CyLib.c **** 
2939:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2940:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2941:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2942:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2943:Generated_Source\PSoC4/CyLib.c ****     *
2944:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2945:Generated_Source\PSoC4/CyLib.c ****     *
2946:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2947:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2948:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2949:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2950:Generated_Source\PSoC4/CyLib.c ****     *
2951:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2952:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2953:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2954:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 84


2955:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2956:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2957:Generated_Source\PSoC4/CyLib.c ****     *
2958:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2959:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2960:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
2961:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2962:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2963:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2964:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2965:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2966:Generated_Source\PSoC4/CyLib.c ****     {
2967:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
2968:Generated_Source\PSoC4/CyLib.c ****         {
2969:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 1643              		.loc 1 2969 0
 1644 0004 0421     		movs	r1, #4
 1645              	.LBE32:
 1646              	.LBE31:
 1647              	.LBE30:
2811:Generated_Source\PSoC4/CyLib.c ****     }
 1648              		.loc 1 2811 0
 1649 0006 0C4B     		ldr	r3, .L123
 1650              	.LBB37:
 1651              	.LBB38:
2438:Generated_Source\PSoC4/CyLib.c **** 
 1652              		.loc 1 2438 0
 1653 0008 0C4A     		ldr	r2, .L123+4
 1654              	.LBE38:
 1655              	.LBE37:
2811:Generated_Source\PSoC4/CyLib.c ****     }
 1656              		.loc 1 2811 0
 1657 000a 1C60     		str	r4, [r3]
 1658              	.LVL114:
 1659 000c 1C61     		str	r4, [r3, #16]
 1660 000e 5C60     		str	r4, [r3, #4]
 1661              	.LVL115:
 1662 0010 9C60     		str	r4, [r3, #8]
 1663              	.LVL116:
 1664 0012 DC60     		str	r4, [r3, #12]
 1665              	.LVL117:
 1666              	.LBB41:
 1667              	.LBB39:
2438:Generated_Source\PSoC4/CyLib.c **** 
 1668              		.loc 1 2438 0
 1669 0014 0A4B     		ldr	r3, .L123+8
 1670              	.LVL118:
 1671              	.LBE39:
 1672              	.LBE41:
2822:Generated_Source\PSoC4/CyLib.c **** 
 1673              		.loc 1 2822 0
 1674              		@ sp needed
 1675              	.LBB42:
 1676              	.LBB40:
2438:Generated_Source\PSoC4/CyLib.c **** 
 1677              		.loc 1 2438 0
 1678 0016 1A60     		str	r2, [r3]
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 85


 1679              	.LVL119:
 1680              	.LBE40:
 1681              	.LBE42:
 1682              	.LBB43:
 1683              	.LBB35:
 1684              	.LBB33:
 1685              		.loc 1 2969 0
 1686 0018 0A4A     		ldr	r2, .L123+12
 1687 001a 1368     		ldr	r3, [r2]
 1688 001c 0B43     		orrs	r3, r1
 1689              	.LBE33:
 1690              	.LBE35:
 1691              	.LBE43:
2820:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 1692              		.loc 1 2820 0
 1693 001e FA21     		movs	r1, #250
 1694              	.LBB44:
 1695              	.LBB36:
 1696              	.LBB34:
 1697              		.loc 1 2969 0
 1698 0020 1360     		str	r3, [r2]
 1699              	.LVL120:
 1700              	.LBE34:
 1701              	.LBE36:
 1702              	.LBE44:
2820:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 1703              		.loc 1 2820 0
 1704 0022 094B     		ldr	r3, .L123+16
 1705 0024 8900     		lsls	r1, r1, #2
 1706 0026 1869     		ldr	r0, [r3, #16]
 1707 0028 FFF7FEFF 		bl	__aeabi_uidiv
 1708              	.LVL121:
 1709              	.LBB45:
 1710              	.LBB46:
2903:Generated_Source\PSoC4/CyLib.c **** }
 1711              		.loc 1 2903 0
 1712 002c 074B     		ldr	r3, .L123+20
 1713 002e 1860     		str	r0, [r3]
 1714              	.LVL122:
 1715              	.LBE46:
 1716              	.LBE45:
 1717              	.LBB47:
 1718              	.LBB48:
2970:Generated_Source\PSoC4/CyLib.c ****         }
2971:Generated_Source\PSoC4/CyLib.c ****         else
2972:Generated_Source\PSoC4/CyLib.c ****         {
2973:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
2974:Generated_Source\PSoC4/CyLib.c ****         }
2975:Generated_Source\PSoC4/CyLib.c ****     }
2976:Generated_Source\PSoC4/CyLib.c **** 
2977:Generated_Source\PSoC4/CyLib.c ****     
2978:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2979:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
2980:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2981:Generated_Source\PSoC4/CyLib.c ****     *
2982:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
2983:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 86


2984:Generated_Source\PSoC4/CyLib.c ****     *  \return 
2985:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2986:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2987:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2988:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2989:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2990:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
2991:Generated_Source\PSoC4/CyLib.c ****     {
2992:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
2993:Generated_Source\PSoC4/CyLib.c ****     }
2994:Generated_Source\PSoC4/CyLib.c ****     
2995:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2996:Generated_Source\PSoC4/CyLib.c **** 
2997:Generated_Source\PSoC4/CyLib.c **** 
2998:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2999:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
3000:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3001:Generated_Source\PSoC4/CyLib.c **** *
3002:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
3003:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
3004:Generated_Source\PSoC4/CyLib.c **** *
3005:Generated_Source\PSoC4/CyLib.c **** * \return
3006:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
3007:Generated_Source\PSoC4/CyLib.c **** *
3008:Generated_Source\PSoC4/CyLib.c **** *
3009:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3010:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
3011:Generated_Source\PSoC4/CyLib.c **** *
3012:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3013:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
3014:Generated_Source\PSoC4/CyLib.c **** {
3015:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
3016:Generated_Source\PSoC4/CyLib.c **** }
3017:Generated_Source\PSoC4/CyLib.c **** 
3018:Generated_Source\PSoC4/CyLib.c **** 
3019:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3020:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
3021:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3022:Generated_Source\PSoC4/CyLib.c **** *
3023:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
3024:Generated_Source\PSoC4/CyLib.c **** *
3025:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3026:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
3027:Generated_Source\PSoC4/CyLib.c **** {
3028:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 1719              		.loc 1 3028 0
 1720 0030 074B     		ldr	r3, .L123+24
 1721 0032 1C60     		str	r4, [r3]
 1722              	.LBE48:
 1723              	.LBE47:
2822:Generated_Source\PSoC4/CyLib.c **** 
 1724              		.loc 1 2822 0
 1725 0034 10BD     		pop	{r4, pc}
 1726              	.L124:
 1727 0036 C046     		.align	2
 1728              	.L123:
 1729 0038 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 87


 1730 003c 00000000 		.word	CySysTickServiceCallbacks
 1731 0040 3C000020 		.word	536870972
 1732 0044 10E000E0 		.word	-536813552
 1733 0048 00000000 		.word	.LANCHOR1
 1734 004c 14E000E0 		.word	-536813548
 1735 0050 18E000E0 		.word	-536813544
 1736              		.cfi_endproc
 1737              	.LFE35:
 1738              		.size	CySysTickInit, .-CySysTickInit
 1739              		.section	.text.CySysTickStop,"ax",%progbits
 1740              		.align	1
 1741              		.global	CySysTickStop
 1742              		.code	16
 1743              		.thumb_func
 1744              		.type	CySysTickStop, %function
 1745              	CySysTickStop:
 1746              	.LFB37:
2853:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 1747              		.loc 1 2853 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
2854:Generated_Source\PSoC4/CyLib.c **** }
 1752              		.loc 1 2854 0
 1753 0000 0121     		movs	r1, #1
 1754 0002 024A     		ldr	r2, .L126
2855:Generated_Source\PSoC4/CyLib.c **** 
 1755              		.loc 1 2855 0
 1756              		@ sp needed
2854:Generated_Source\PSoC4/CyLib.c **** }
 1757              		.loc 1 2854 0
 1758 0004 1368     		ldr	r3, [r2]
 1759 0006 8B43     		bics	r3, r1
 1760 0008 1360     		str	r3, [r2]
2855:Generated_Source\PSoC4/CyLib.c **** 
 1761              		.loc 1 2855 0
 1762 000a 7047     		bx	lr
 1763              	.L127:
 1764              		.align	2
 1765              	.L126:
 1766 000c 10E000E0 		.word	-536813552
 1767              		.cfi_endproc
 1768              	.LFE37:
 1769              		.size	CySysTickStop, .-CySysTickStop
 1770              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 1771              		.align	1
 1772              		.global	CySysTickEnableInterrupt
 1773              		.code	16
 1774              		.thumb_func
 1775              		.type	CySysTickEnableInterrupt, %function
 1776              	CySysTickEnableInterrupt:
 1777              	.LFB38:
2869:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 1778              		.loc 1 2869 0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 88


 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
2870:Generated_Source\PSoC4/CyLib.c **** }
 1783              		.loc 1 2870 0
 1784 0000 0221     		movs	r1, #2
 1785 0002 024A     		ldr	r2, .L129
2871:Generated_Source\PSoC4/CyLib.c **** 
 1786              		.loc 1 2871 0
 1787              		@ sp needed
2870:Generated_Source\PSoC4/CyLib.c **** }
 1788              		.loc 1 2870 0
 1789 0004 1368     		ldr	r3, [r2]
 1790 0006 0B43     		orrs	r3, r1
 1791 0008 1360     		str	r3, [r2]
2871:Generated_Source\PSoC4/CyLib.c **** 
 1792              		.loc 1 2871 0
 1793 000a 7047     		bx	lr
 1794              	.L130:
 1795              		.align	2
 1796              	.L129:
 1797 000c 10E000E0 		.word	-536813552
 1798              		.cfi_endproc
 1799              	.LFE38:
 1800              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 1801              		.section	.text.CySysTickEnable,"ax",%progbits
 1802              		.align	1
 1803              		.global	CySysTickEnable
 1804              		.code	16
 1805              		.thumb_func
 1806              		.type	CySysTickEnable, %function
 1807              	CySysTickEnable:
 1808              	.LFB36:
2836:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 1809              		.loc 1 2836 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 1813 0000 10B5     		push	{r4, lr}
 1814              		.cfi_def_cfa_offset 8
 1815              		.cfi_offset 4, -8
 1816              		.cfi_offset 14, -4
2837:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 1817              		.loc 1 2837 0
 1818 0002 FFF7FEFF 		bl	CySysTickEnableInterrupt
 1819              	.LVL123:
2838:Generated_Source\PSoC4/CyLib.c **** }
 1820              		.loc 1 2838 0
 1821 0006 0121     		movs	r1, #1
 1822 0008 024A     		ldr	r2, .L132
2839:Generated_Source\PSoC4/CyLib.c **** 
 1823              		.loc 1 2839 0
 1824              		@ sp needed
2838:Generated_Source\PSoC4/CyLib.c **** }
 1825              		.loc 1 2838 0
 1826 000a 1368     		ldr	r3, [r2]
 1827 000c 0B43     		orrs	r3, r1
 1828 000e 1360     		str	r3, [r2]
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 89


2839:Generated_Source\PSoC4/CyLib.c **** 
 1829              		.loc 1 2839 0
 1830 0010 10BD     		pop	{r4, pc}
 1831              	.L133:
 1832 0012 C046     		.align	2
 1833              	.L132:
 1834 0014 10E000E0 		.word	-536813552
 1835              		.cfi_endproc
 1836              	.LFE36:
 1837              		.size	CySysTickEnable, .-CySysTickEnable
 1838              		.section	.text.CySysTickStart,"ax",%progbits
 1839              		.align	1
 1840              		.global	CySysTickStart
 1841              		.code	16
 1842              		.thumb_func
 1843              		.type	CySysTickStart, %function
 1844              	CySysTickStart:
 1845              	.LFB34:
2777:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 1846              		.loc 1 2777 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850 0000 10B5     		push	{r4, lr}
 1851              		.cfi_def_cfa_offset 8
 1852              		.cfi_offset 4, -8
 1853              		.cfi_offset 14, -4
2778:Generated_Source\PSoC4/CyLib.c ****     {
 1854              		.loc 1 2778 0
 1855 0002 054C     		ldr	r4, .L136
 1856 0004 6369     		ldr	r3, [r4, #20]
 1857 0006 002B     		cmp	r3, #0
 1858 0008 03D1     		bne	.L135
2780:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 1859              		.loc 1 2780 0
 1860 000a FFF7FEFF 		bl	CySysTickInit
 1861              	.LVL124:
2781:Generated_Source\PSoC4/CyLib.c ****     }
 1862              		.loc 1 2781 0
 1863 000e 0123     		movs	r3, #1
 1864 0010 6361     		str	r3, [r4, #20]
 1865              	.L135:
2784:Generated_Source\PSoC4/CyLib.c **** }
 1866              		.loc 1 2784 0
 1867 0012 FFF7FEFF 		bl	CySysTickEnable
 1868              	.LVL125:
2785:Generated_Source\PSoC4/CyLib.c **** 
 1869              		.loc 1 2785 0
 1870              		@ sp needed
 1871 0016 10BD     		pop	{r4, pc}
 1872              	.L137:
 1873              		.align	2
 1874              	.L136:
 1875 0018 00000000 		.word	.LANCHOR2
 1876              		.cfi_endproc
 1877              	.LFE34:
 1878              		.size	CySysTickStart, .-CySysTickStart
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 90


 1879              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 1880              		.align	1
 1881              		.global	CySysTickDisableInterrupt
 1882              		.code	16
 1883              		.thumb_func
 1884              		.type	CySysTickDisableInterrupt, %function
 1885              	CySysTickDisableInterrupt:
 1886              	.LFB39:
2885:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 1887              		.loc 1 2885 0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              		@ link register save eliminated.
2886:Generated_Source\PSoC4/CyLib.c **** }
 1892              		.loc 1 2886 0
 1893 0000 0221     		movs	r1, #2
 1894 0002 024A     		ldr	r2, .L139
2887:Generated_Source\PSoC4/CyLib.c **** 
 1895              		.loc 1 2887 0
 1896              		@ sp needed
2886:Generated_Source\PSoC4/CyLib.c **** }
 1897              		.loc 1 2886 0
 1898 0004 1368     		ldr	r3, [r2]
 1899 0006 8B43     		bics	r3, r1
 1900 0008 1360     		str	r3, [r2]
2887:Generated_Source\PSoC4/CyLib.c **** 
 1901              		.loc 1 2887 0
 1902 000a 7047     		bx	lr
 1903              	.L140:
 1904              		.align	2
 1905              	.L139:
 1906 000c 10E000E0 		.word	-536813552
 1907              		.cfi_endproc
 1908              	.LFE39:
 1909              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 1910              		.section	.text.CySysTickSetReload,"ax",%progbits
 1911              		.align	1
 1912              		.global	CySysTickSetReload
 1913              		.code	16
 1914              		.thumb_func
 1915              		.type	CySysTickSetReload, %function
 1916              	CySysTickSetReload:
 1917              	.LFB40:
2902:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 1918              		.loc 1 2902 0
 1919              		.cfi_startproc
 1920              		@ args = 0, pretend = 0, frame = 0
 1921              		@ frame_needed = 0, uses_anonymous_args = 0
 1922              		@ link register save eliminated.
 1923              	.LVL126:
2903:Generated_Source\PSoC4/CyLib.c **** }
 1924              		.loc 1 2903 0
 1925 0000 024B     		ldr	r3, .L142
 1926 0002 0002     		lsls	r0, r0, #8
 1927              	.LVL127:
 1928 0004 000A     		lsrs	r0, r0, #8
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 91


 1929 0006 1860     		str	r0, [r3]
2904:Generated_Source\PSoC4/CyLib.c **** 
 1930              		.loc 1 2904 0
 1931              		@ sp needed
 1932 0008 7047     		bx	lr
 1933              	.L143:
 1934 000a C046     		.align	2
 1935              	.L142:
 1936 000c 14E000E0 		.word	-536813548
 1937              		.cfi_endproc
 1938              	.LFE40:
 1939              		.size	CySysTickSetReload, .-CySysTickSetReload
 1940              		.section	.text.CySysTickGetReload,"ax",%progbits
 1941              		.align	1
 1942              		.global	CySysTickGetReload
 1943              		.code	16
 1944              		.thumb_func
 1945              		.type	CySysTickGetReload, %function
 1946              	CySysTickGetReload:
 1947              	.LFB41:
2918:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 1948              		.loc 1 2918 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
2919:Generated_Source\PSoC4/CyLib.c **** }
 1953              		.loc 1 2919 0
 1954 0000 024B     		ldr	r3, .L145
2920:Generated_Source\PSoC4/CyLib.c **** 
 1955              		.loc 1 2920 0
 1956              		@ sp needed
2919:Generated_Source\PSoC4/CyLib.c **** }
 1957              		.loc 1 2919 0
 1958 0002 1868     		ldr	r0, [r3]
 1959 0004 0002     		lsls	r0, r0, #8
 1960 0006 000A     		lsrs	r0, r0, #8
2920:Generated_Source\PSoC4/CyLib.c **** 
 1961              		.loc 1 2920 0
 1962 0008 7047     		bx	lr
 1963              	.L146:
 1964 000a C046     		.align	2
 1965              	.L145:
 1966 000c 14E000E0 		.word	-536813548
 1967              		.cfi_endproc
 1968              	.LFE41:
 1969              		.size	CySysTickGetReload, .-CySysTickGetReload
 1970              		.section	.text.CySysTickGetValue,"ax",%progbits
 1971              		.align	1
 1972              		.global	CySysTickGetValue
 1973              		.code	16
 1974              		.thumb_func
 1975              		.type	CySysTickGetValue, %function
 1976              	CySysTickGetValue:
 1977              	.LFB42:
2934:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 1978              		.loc 1 2934 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 92


 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
2935:Generated_Source\PSoC4/CyLib.c **** }
 1983              		.loc 1 2935 0
 1984 0000 024B     		ldr	r3, .L148
2936:Generated_Source\PSoC4/CyLib.c **** 
 1985              		.loc 1 2936 0
 1986              		@ sp needed
2935:Generated_Source\PSoC4/CyLib.c **** }
 1987              		.loc 1 2935 0
 1988 0002 1868     		ldr	r0, [r3]
 1989 0004 0002     		lsls	r0, r0, #8
 1990 0006 000A     		lsrs	r0, r0, #8
2936:Generated_Source\PSoC4/CyLib.c **** 
 1991              		.loc 1 2936 0
 1992 0008 7047     		bx	lr
 1993              	.L149:
 1994 000a C046     		.align	2
 1995              	.L148:
 1996 000c 18E000E0 		.word	-536813544
 1997              		.cfi_endproc
 1998              	.LFE42:
 1999              		.size	CySysTickGetValue, .-CySysTickGetValue
 2000              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 2001              		.align	1
 2002              		.global	CySysTickSetClockSource
 2003              		.code	16
 2004              		.thumb_func
 2005              		.type	CySysTickSetClockSource, %function
 2006              	CySysTickSetClockSource:
 2007              	.LFB43:
2966:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
 2008              		.loc 1 2966 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 0
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 2012              		@ link register save eliminated.
 2013              	.LVL128:
 2014 0000 044B     		ldr	r3, .L154
 2015 0002 0421     		movs	r1, #4
 2016              	.LBB51:
 2017              	.LBB52:
2969:Generated_Source\PSoC4/CyLib.c ****         }
 2018              		.loc 1 2969 0
 2019 0004 1A68     		ldr	r2, [r3]
 2020              	.LBE52:
 2021              	.LBE51:
2967:Generated_Source\PSoC4/CyLib.c ****         {
 2022              		.loc 1 2967 0
 2023 0006 0128     		cmp	r0, #1
 2024 0008 01D1     		bne	.L151
 2025              	.LVL129:
 2026              	.LBB54:
 2027              	.LBB53:
2969:Generated_Source\PSoC4/CyLib.c ****         }
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 93


 2028              		.loc 1 2969 0
 2029 000a 0A43     		orrs	r2, r1
 2030 000c 00E0     		b	.L153
 2031              	.LVL130:
 2032              	.L151:
 2033              	.LBE53:
 2034              	.LBE54:
2973:Generated_Source\PSoC4/CyLib.c ****         }
 2035              		.loc 1 2973 0
 2036 000e 8A43     		bics	r2, r1
 2037              	.L153:
 2038 0010 1A60     		str	r2, [r3]
2975:Generated_Source\PSoC4/CyLib.c **** 
 2039              		.loc 1 2975 0
 2040              		@ sp needed
 2041 0012 7047     		bx	lr
 2042              	.L155:
 2043              		.align	2
 2044              	.L154:
 2045 0014 10E000E0 		.word	-536813552
 2046              		.cfi_endproc
 2047              	.LFE43:
 2048              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 2049              		.section	.text.CySysTickGetClockSource,"ax",%progbits
 2050              		.align	1
 2051              		.global	CySysTickGetClockSource
 2052              		.code	16
 2053              		.thumb_func
 2054              		.type	CySysTickGetClockSource, %function
 2055              	CySysTickGetClockSource:
 2056              	.LFB44:
2991:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
 2057              		.loc 1 2991 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
2992:Generated_Source\PSoC4/CyLib.c ****     }
 2062              		.loc 1 2992 0
 2063 0000 024B     		ldr	r3, .L157
2993:Generated_Source\PSoC4/CyLib.c ****     
 2064              		.loc 1 2993 0
 2065              		@ sp needed
2992:Generated_Source\PSoC4/CyLib.c ****     }
 2066              		.loc 1 2992 0
 2067 0002 1868     		ldr	r0, [r3]
 2068 0004 4007     		lsls	r0, r0, #29
 2069 0006 C00F     		lsrs	r0, r0, #31
2993:Generated_Source\PSoC4/CyLib.c ****     
 2070              		.loc 1 2993 0
 2071 0008 7047     		bx	lr
 2072              	.L158:
 2073 000a C046     		.align	2
 2074              	.L157:
 2075 000c 10E000E0 		.word	-536813552
 2076              		.cfi_endproc
 2077              	.LFE44:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 94


 2078              		.size	CySysTickGetClockSource, .-CySysTickGetClockSource
 2079              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2080              		.align	1
 2081              		.global	CySysTickGetCountFlag
 2082              		.code	16
 2083              		.thumb_func
 2084              		.type	CySysTickGetCountFlag, %function
 2085              	CySysTickGetCountFlag:
 2086              	.LFB45:
3014:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2087              		.loc 1 3014 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 0
 2090              		@ frame_needed = 0, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
3015:Generated_Source\PSoC4/CyLib.c **** }
 2092              		.loc 1 3015 0
 2093 0000 024B     		ldr	r3, .L160
3016:Generated_Source\PSoC4/CyLib.c **** 
 2094              		.loc 1 3016 0
 2095              		@ sp needed
3015:Generated_Source\PSoC4/CyLib.c **** }
 2096              		.loc 1 3015 0
 2097 0002 1868     		ldr	r0, [r3]
 2098 0004 C003     		lsls	r0, r0, #15
 2099 0006 C00F     		lsrs	r0, r0, #31
3016:Generated_Source\PSoC4/CyLib.c **** 
 2100              		.loc 1 3016 0
 2101 0008 7047     		bx	lr
 2102              	.L161:
 2103 000a C046     		.align	2
 2104              	.L160:
 2105 000c 10E000E0 		.word	-536813552
 2106              		.cfi_endproc
 2107              	.LFE45:
 2108              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2109              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2110              		.align	1
 2111              		.code	16
 2112              		.thumb_func
 2113              		.type	CySysTickServiceCallbacks, %function
 2114              	CySysTickServiceCallbacks:
 2115              	.LFB49:
3029:Generated_Source\PSoC4/CyLib.c **** }
3030:Generated_Source\PSoC4/CyLib.c **** 
3031:Generated_Source\PSoC4/CyLib.c **** 
3032:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3033:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
3034:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3035:Generated_Source\PSoC4/CyLib.c **** *
3036:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
3037:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
3038:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
3039:Generated_Source\PSoC4/CyLib.c **** *
3040:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
3041:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
3042:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 95


3043:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
3044:Generated_Source\PSoC4/CyLib.c **** *  functions.
3045:Generated_Source\PSoC4/CyLib.c **** *
3046:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
3047:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
3048:Generated_Source\PSoC4/CyLib.c **** *
3049:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
3050:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
3051:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
3052:Generated_Source\PSoC4/CyLib.c **** *
3053:Generated_Source\PSoC4/CyLib.c **** * \return
3054:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
3055:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
3056:Generated_Source\PSoC4/CyLib.c **** *
3057:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3058:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
3059:Generated_Source\PSoC4/CyLib.c **** *
3060:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3061:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
3062:Generated_Source\PSoC4/CyLib.c **** {
3063:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
3064:Generated_Source\PSoC4/CyLib.c **** 
3065:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
3066:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
3067:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
3068:Generated_Source\PSoC4/CyLib.c **** }
3069:Generated_Source\PSoC4/CyLib.c **** 
3070:Generated_Source\PSoC4/CyLib.c **** 
3071:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3072:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
3073:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3074:Generated_Source\PSoC4/CyLib.c **** *
3075:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
3076:Generated_Source\PSoC4/CyLib.c **** *
3077:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
3078:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
3079:Generated_Source\PSoC4/CyLib.c **** *
3080:Generated_Source\PSoC4/CyLib.c **** * \return
3081:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
3082:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
3083:Generated_Source\PSoC4/CyLib.c **** *
3084:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3085:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
3086:Generated_Source\PSoC4/CyLib.c **** {
3087:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
3088:Generated_Source\PSoC4/CyLib.c **** }
3089:Generated_Source\PSoC4/CyLib.c **** 
3090:Generated_Source\PSoC4/CyLib.c **** 
3091:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3092:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
3093:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3094:Generated_Source\PSoC4/CyLib.c **** *
3095:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
3096:Generated_Source\PSoC4/CyLib.c **** *
3097:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3098:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
3099:Generated_Source\PSoC4/CyLib.c **** {
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 96


 2116              		.loc 1 3099 0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 0, uses_anonymous_args = 0
 2120 0000 10B5     		push	{r4, lr}
 2121              		.cfi_def_cfa_offset 8
 2122              		.cfi_offset 4, -8
 2123              		.cfi_offset 14, -4
3100:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
3101:Generated_Source\PSoC4/CyLib.c **** 
3102:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
3103:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2124              		.loc 1 3103 0
 2125 0002 FFF7FEFF 		bl	CySysTickGetCountFlag
 2126              	.LVL131:
 2127 0006 0128     		cmp	r0, #1
 2128 0008 08D1     		bne	.L162
 2129 000a 0024     		movs	r4, #0
 2130              	.L165:
 2131              	.LBB57:
3104:Generated_Source\PSoC4/CyLib.c ****     {
3105:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
3106:Generated_Source\PSoC4/CyLib.c ****         {
3107:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2132              		.loc 1 3107 0
 2133 000c 044B     		ldr	r3, .L171
 2134 000e E358     		ldr	r3, [r4, r3]
 2135 0010 002B     		cmp	r3, #0
 2136 0012 00D0     		beq	.L164
3108:Generated_Source\PSoC4/CyLib.c ****             {
3109:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2137              		.loc 1 3109 0
 2138 0014 9847     		blx	r3
 2139              	.LVL132:
 2140              	.L164:
 2141 0016 0434     		adds	r4, r4, #4
3105:Generated_Source\PSoC4/CyLib.c ****         {
 2142              		.loc 1 3105 0
 2143 0018 142C     		cmp	r4, #20
 2144 001a F7D1     		bne	.L165
 2145              	.L162:
 2146              	.LBE57:
3110:Generated_Source\PSoC4/CyLib.c ****             }
3111:Generated_Source\PSoC4/CyLib.c ****         }
3112:Generated_Source\PSoC4/CyLib.c ****     }
3113:Generated_Source\PSoC4/CyLib.c **** }
 2147              		.loc 1 3113 0
 2148              		@ sp needed
 2149 001c 10BD     		pop	{r4, pc}
 2150              	.L172:
 2151 001e C046     		.align	2
 2152              	.L171:
 2153 0020 00000000 		.word	.LANCHOR2
 2154              		.cfi_endproc
 2155              	.LFE49:
 2156              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2157              		.section	.text.CySysTickClear,"ax",%progbits
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 97


 2158              		.align	1
 2159              		.global	CySysTickClear
 2160              		.code	16
 2161              		.thumb_func
 2162              		.type	CySysTickClear, %function
 2163              	CySysTickClear:
 2164              	.LFB46:
3027:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2165              		.loc 1 3027 0
 2166              		.cfi_startproc
 2167              		@ args = 0, pretend = 0, frame = 0
 2168              		@ frame_needed = 0, uses_anonymous_args = 0
 2169              		@ link register save eliminated.
3028:Generated_Source\PSoC4/CyLib.c **** }
 2170              		.loc 1 3028 0
 2171 0000 0022     		movs	r2, #0
 2172 0002 014B     		ldr	r3, .L174
3029:Generated_Source\PSoC4/CyLib.c **** 
 2173              		.loc 1 3029 0
 2174              		@ sp needed
3028:Generated_Source\PSoC4/CyLib.c **** }
 2175              		.loc 1 3028 0
 2176 0004 1A60     		str	r2, [r3]
3029:Generated_Source\PSoC4/CyLib.c **** 
 2177              		.loc 1 3029 0
 2178 0006 7047     		bx	lr
 2179              	.L175:
 2180              		.align	2
 2181              	.L174:
 2182 0008 18E000E0 		.word	-536813544
 2183              		.cfi_endproc
 2184              	.LFE46:
 2185              		.size	CySysTickClear, .-CySysTickClear
 2186              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2187              		.align	1
 2188              		.global	CySysTickSetCallback
 2189              		.code	16
 2190              		.thumb_func
 2191              		.type	CySysTickSetCallback, %function
 2192              	CySysTickSetCallback:
 2193              	.LFB47:
3062:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
 2194              		.loc 1 3062 0
 2195              		.cfi_startproc
 2196              		@ args = 0, pretend = 0, frame = 0
 2197              		@ frame_needed = 0, uses_anonymous_args = 0
 2198              		@ link register save eliminated.
 2199              	.LVL133:
3065:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2200              		.loc 1 3065 0
 2201 0000 024A     		ldr	r2, .L177
 2202 0002 8300     		lsls	r3, r0, #2
 2203 0004 9858     		ldr	r0, [r3, r2]
 2204              	.LVL134:
3068:Generated_Source\PSoC4/CyLib.c **** 
 2205              		.loc 1 3068 0
 2206              		@ sp needed
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 98


3066:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2207              		.loc 1 3066 0
 2208 0006 9950     		str	r1, [r3, r2]
3068:Generated_Source\PSoC4/CyLib.c **** 
 2209              		.loc 1 3068 0
 2210 0008 7047     		bx	lr
 2211              	.L178:
 2212 000a C046     		.align	2
 2213              	.L177:
 2214 000c 00000000 		.word	.LANCHOR2
 2215              		.cfi_endproc
 2216              	.LFE47:
 2217              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2218              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2219              		.align	1
 2220              		.global	CySysTickGetCallback
 2221              		.code	16
 2222              		.thumb_func
 2223              		.type	CySysTickGetCallback, %function
 2224              	CySysTickGetCallback:
 2225              	.LFB48:
3086:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2226              		.loc 1 3086 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              		@ link register save eliminated.
 2231              	.LVL135:
3087:Generated_Source\PSoC4/CyLib.c **** }
 2232              		.loc 1 3087 0
 2233 0000 014B     		ldr	r3, .L180
 2234 0002 8000     		lsls	r0, r0, #2
 2235              	.LVL136:
 2236 0004 C058     		ldr	r0, [r0, r3]
3088:Generated_Source\PSoC4/CyLib.c **** 
 2237              		.loc 1 3088 0
 2238              		@ sp needed
 2239 0006 7047     		bx	lr
 2240              	.L181:
 2241              		.align	2
 2242              	.L180:
 2243 0008 00000000 		.word	.LANCHOR2
 2244              		.cfi_endproc
 2245              	.LFE48:
 2246              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2247              		.section	.text.CyGetUniqueId,"ax",%progbits
 2248              		.align	1
 2249              		.global	CyGetUniqueId
 2250              		.code	16
 2251              		.thumb_func
 2252              		.type	CyGetUniqueId, %function
 2253              	CyGetUniqueId:
 2254              	.LFB50:
3114:Generated_Source\PSoC4/CyLib.c **** 
3115:Generated_Source\PSoC4/CyLib.c **** 
3116:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3117:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 99


3118:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3119:Generated_Source\PSoC4/CyLib.c **** *
3120:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
3121:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
3122:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
3123:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
3124:Generated_Source\PSoC4/CyLib.c **** *
3125:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
3126:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
3127:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
3128:Generated_Source\PSoC4/CyLib.c **** *
3129:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3130:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
3131:Generated_Source\PSoC4/CyLib.c **** {
 2255              		.loc 1 3131 0
 2256              		.cfi_startproc
 2257              		@ args = 0, pretend = 0, frame = 0
 2258              		@ frame_needed = 0, uses_anonymous_args = 0
 2259              		@ link register save eliminated.
 2260              	.LVL137:
3132:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
3133:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2261              		.loc 1 3133 0
 2262 0000 144B     		ldr	r3, .L183
3134:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
3135:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
3136:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
3137:Generated_Source\PSoC4/CyLib.c **** 
3138:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
3139:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
3140:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
3141:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
3142:Generated_Source\PSoC4/CyLib.c **** #else
3143:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
3144:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
3145:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
3146:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
3147:Generated_Source\PSoC4/CyLib.c **** 
3148:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3149:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
3150:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3151:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3152:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3153:Generated_Source\PSoC4/CyLib.c **** }
 2263              		.loc 1 3153 0
 2264              		@ sp needed
3133:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2265              		.loc 1 3133 0
 2266 0002 1A78     		ldrb	r2, [r3]
3134:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2267              		.loc 1 3134 0
 2268 0004 144B     		ldr	r3, .L183+4
3133:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2269              		.loc 1 3133 0
 2270 0006 D1B2     		uxtb	r1, r2
 2271 0008 0160     		str	r1, [r0]
3134:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 100


 2272              		.loc 1 3134 0
 2273 000a 1B78     		ldrb	r3, [r3]
 2274 000c 1B02     		lsls	r3, r3, #8
 2275 000e 0B43     		orrs	r3, r1
 2276 0010 1A00     		movs	r2, r3
 2277 0012 0360     		str	r3, [r0]
3135:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2278              		.loc 1 3135 0
 2279 0014 114B     		ldr	r3, .L183+8
 2280 0016 1B78     		ldrb	r3, [r3]
 2281 0018 1B04     		lsls	r3, r3, #16
 2282 001a 1343     		orrs	r3, r2
3136:Generated_Source\PSoC4/CyLib.c **** 
 2283              		.loc 1 3136 0
 2284 001c 104A     		ldr	r2, .L183+12
3135:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2285              		.loc 1 3135 0
 2286 001e 0360     		str	r3, [r0]
3136:Generated_Source\PSoC4/CyLib.c **** 
 2287              		.loc 1 3136 0
 2288 0020 1278     		ldrb	r2, [r2]
 2289 0022 1206     		lsls	r2, r2, #24
 2290 0024 1343     		orrs	r3, r2
 2291 0026 0360     		str	r3, [r0]
3138:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2292              		.loc 1 3138 0
 2293 0028 0E4B     		ldr	r3, .L183+16
 2294 002a 1A78     		ldrb	r2, [r3]
3139:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2295              		.loc 1 3139 0
 2296 002c 0E4B     		ldr	r3, .L183+20
3138:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2297              		.loc 1 3138 0
 2298 002e D1B2     		uxtb	r1, r2
 2299 0030 4160     		str	r1, [r0, #4]
3139:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2300              		.loc 1 3139 0
 2301 0032 1B78     		ldrb	r3, [r3]
 2302 0034 1B02     		lsls	r3, r3, #8
 2303 0036 0B43     		orrs	r3, r1
 2304 0038 1A00     		movs	r2, r3
 2305 003a 4360     		str	r3, [r0, #4]
3140:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2306              		.loc 1 3140 0
 2307 003c 0B4B     		ldr	r3, .L183+24
 2308 003e 1B78     		ldrb	r3, [r3]
 2309 0040 1B04     		lsls	r3, r3, #16
 2310 0042 1343     		orrs	r3, r2
3141:Generated_Source\PSoC4/CyLib.c **** #else
 2311              		.loc 1 3141 0
 2312 0044 0A4A     		ldr	r2, .L183+28
3140:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2313              		.loc 1 3140 0
 2314 0046 4360     		str	r3, [r0, #4]
3141:Generated_Source\PSoC4/CyLib.c **** #else
 2315              		.loc 1 3141 0
 2316 0048 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 101


 2317 004a 1206     		lsls	r2, r2, #24
 2318 004c 1343     		orrs	r3, r2
 2319 004e 4360     		str	r3, [r0, #4]
 2320              		.loc 1 3153 0
 2321 0050 7047     		bx	lr
 2322              	.L184:
 2323 0052 C046     		.align	2
 2324              	.L183:
 2325 0054 78F1FF0F 		.word	268431736
 2326 0058 79F1FF0F 		.word	268431737
 2327 005c 7AF1FF0F 		.word	268431738
 2328 0060 7BF1FF0F 		.word	268431739
 2329 0064 7CF1FF0F 		.word	268431740
 2330 0068 7DF1FF0F 		.word	268431741
 2331 006c 7EF1FF0F 		.word	268431742
 2332 0070 7FF1FF0F 		.word	268431743
 2333              		.cfi_endproc
 2334              	.LFE50:
 2335              		.size	CyGetUniqueId, .-CyGetUniqueId
 2336              		.section	.text.CySysSetRamAccessArbPriority,"ax",%progbits
 2337              		.align	1
 2338              		.global	CySysSetRamAccessArbPriority
 2339              		.code	16
 2340              		.thumb_func
 2341              		.type	CySysSetRamAccessArbPriority, %function
 2342              	CySysSetRamAccessArbPriority:
 2343              	.LFB51:
3154:Generated_Source\PSoC4/CyLib.c **** 
3155:Generated_Source\PSoC4/CyLib.c **** 
3156:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_DMAC_PRESENT)
3157:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
3158:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetRamAccessArbPriority
3159:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
3160:Generated_Source\PSoC4/CyLib.c ****     *
3161:Generated_Source\PSoC4/CyLib.c ****     *  Sets RAM access priority between CPU and DMA. The RAM_CTL register is
3162:Generated_Source\PSoC4/CyLib.c ****     *  configured to set the priority. Please refer to the device TRM for more
3163:Generated_Source\PSoC4/CyLib.c ****     *  details.
3164:Generated_Source\PSoC4/CyLib.c ****     *
3165:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M / PSoC 4200L / 4100S with 
3166:Generated_Source\PSoC4/CyLib.c ****     *  DMA devices only.
3167:Generated_Source\PSoC4/CyLib.c ****     *
3168:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
3169:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
3170:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
3171:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
3172:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
3173:Generated_Source\PSoC4/CyLib.c ****     *
3174:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
3175:Generated_Source\PSoC4/CyLib.c ****     void CySysSetRamAccessArbPriority(uint32 source)
3176:Generated_Source\PSoC4/CyLib.c ****     {
 2344              		.loc 1 3176 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 2349              	.LVL138:
3177:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 102


3178:Generated_Source\PSoC4/CyLib.c **** 
3179:Generated_Source\PSoC4/CyLib.c ****         regTmp  = CY_SYS_CPUSS_RAM_CTL_REG & ~CY_SYS_CPUSS_RAM_CTL_ARB_MASK;
 2350              		.loc 1 3179 0
 2351 0000 0549     		ldr	r1, .L186
 2352 0002 064B     		ldr	r3, .L186+4
 2353 0004 0A68     		ldr	r2, [r1]
3180:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_RAM_CTL_ARB_SHIFT) & CY_SYS_CPUSS_RAM_CTL_ARB_M
 2354              		.loc 1 3180 0
 2355 0006 4004     		lsls	r0, r0, #17
 2356              	.LVL139:
3179:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_RAM_CTL_ARB_SHIFT) & CY_SYS_CPUSS_RAM_CTL_ARB_M
 2357              		.loc 1 3179 0
 2358 0008 1340     		ands	r3, r2
 2359              	.LVL140:
 2360              		.loc 1 3180 0
 2361 000a C022     		movs	r2, #192
 2362 000c D202     		lsls	r2, r2, #11
 2363 000e 1040     		ands	r0, r2
 2364 0010 1843     		orrs	r0, r3
 2365              	.LVL141:
3181:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CPUSS_RAM_CTL_REG = regTmp;
 2366              		.loc 1 3181 0
 2367 0012 0860     		str	r0, [r1]
3182:Generated_Source\PSoC4/CyLib.c ****     }
 2368              		.loc 1 3182 0
 2369              		@ sp needed
 2370 0014 7047     		bx	lr
 2371              	.L187:
 2372 0016 C046     		.align	2
 2373              	.L186:
 2374 0018 38001040 		.word	1074790456
 2375 001c FFFFF9FF 		.word	-393217
 2376              		.cfi_endproc
 2377              	.LFE51:
 2378              		.size	CySysSetRamAccessArbPriority, .-CySysSetRamAccessArbPriority
 2379              		.section	.text.CySysSetFlashAccessArbPriority,"ax",%progbits
 2380              		.align	1
 2381              		.global	CySysSetFlashAccessArbPriority
 2382              		.code	16
 2383              		.thumb_func
 2384              		.type	CySysSetFlashAccessArbPriority, %function
 2385              	CySysSetFlashAccessArbPriority:
 2386              	.LFB52:
3183:Generated_Source\PSoC4/CyLib.c **** 
3184:Generated_Source\PSoC4/CyLib.c **** 
3185:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
3186:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetFlashAccessArbPriority
3187:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
3188:Generated_Source\PSoC4/CyLib.c ****     *
3189:Generated_Source\PSoC4/CyLib.c ****     *  Sets flash access priority between CPU and DMA. The FLASH_CTL register is
3190:Generated_Source\PSoC4/CyLib.c ****     *  configured to set the priority. Please refer to the device TRM for more
3191:Generated_Source\PSoC4/CyLib.c ****     *  details.
3192:Generated_Source\PSoC4/CyLib.c ****     *
3193:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M / PSoC 4200L / 4100S with 
3194:Generated_Source\PSoC4/CyLib.c ****     *  DMA devices only.
3195:Generated_Source\PSoC4/CyLib.c ****     *
3196:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 103


3197:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
3198:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
3199:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
3200:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
3201:Generated_Source\PSoC4/CyLib.c ****     *
3202:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
3203:Generated_Source\PSoC4/CyLib.c ****     void CySysSetFlashAccessArbPriority(uint32 source)
3204:Generated_Source\PSoC4/CyLib.c ****     {
 2387              		.loc 1 3204 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              		@ link register save eliminated.
 2392              	.LVL142:
3205:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
3206:Generated_Source\PSoC4/CyLib.c **** 
3207:Generated_Source\PSoC4/CyLib.c ****         regTmp  = CY_SYS_CPUSS_FLASH_CTL_REG & ~CY_SYS_CPUSS_FLASH_CTL_ARB_MASK;
 2393              		.loc 1 3207 0
 2394 0000 0549     		ldr	r1, .L189
 2395 0002 064B     		ldr	r3, .L189+4
 2396 0004 0A68     		ldr	r2, [r1]
3208:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_FLASH_CTL_ARB_SHIFT) & CY_SYS_CPUSS_FLASH_CTL_A
 2397              		.loc 1 3208 0
 2398 0006 4004     		lsls	r0, r0, #17
 2399              	.LVL143:
3207:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_FLASH_CTL_ARB_SHIFT) & CY_SYS_CPUSS_FLASH_CTL_A
 2400              		.loc 1 3207 0
 2401 0008 1340     		ands	r3, r2
 2402              	.LVL144:
 2403              		.loc 1 3208 0
 2404 000a C022     		movs	r2, #192
 2405 000c D202     		lsls	r2, r2, #11
 2406 000e 1040     		ands	r0, r2
 2407 0010 1843     		orrs	r0, r3
 2408              	.LVL145:
3209:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CPUSS_FLASH_CTL_REG = regTmp;
 2409              		.loc 1 3209 0
 2410 0012 0860     		str	r0, [r1]
3210:Generated_Source\PSoC4/CyLib.c ****     }
 2411              		.loc 1 3210 0
 2412              		@ sp needed
 2413 0014 7047     		bx	lr
 2414              	.L190:
 2415 0016 C046     		.align	2
 2416              	.L189:
 2417 0018 30001040 		.word	1074790448
 2418 001c FFFFF9FF 		.word	-393217
 2419              		.cfi_endproc
 2420              	.LFE52:
 2421              		.size	CySysSetFlashAccessArbPriority, .-CySysSetFlashAccessArbPriority
 2422              		.section	.text.CySysSetDmacAccessArbPriority,"ax",%progbits
 2423              		.align	1
 2424              		.global	CySysSetDmacAccessArbPriority
 2425              		.code	16
 2426              		.thumb_func
 2427              		.type	CySysSetDmacAccessArbPriority, %function
 2428              	CySysSetDmacAccessArbPriority:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 104


 2429              	.LFB53:
3211:Generated_Source\PSoC4/CyLib.c **** 
3212:Generated_Source\PSoC4/CyLib.c **** 
3213:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
3214:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetDmacAccessArbPriority
3215:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
3216:Generated_Source\PSoC4/CyLib.c ****     *
3217:Generated_Source\PSoC4/CyLib.c ****     *  Sets DMAC slave interface access priority between CPU and DMA. The DMAC_CTL
3218:Generated_Source\PSoC4/CyLib.c ****     *  register is configured to set the priority. Please refer to the device TRM
3219:Generated_Source\PSoC4/CyLib.c ****     *  for more details.
3220:Generated_Source\PSoC4/CyLib.c ****     *
3221:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M / PSoC 4200L / 4100S with 
3222:Generated_Source\PSoC4/CyLib.c ****     *  DMA devices only.
3223:Generated_Source\PSoC4/CyLib.c ****     *
3224:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
3225:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
3226:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
3227:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
3228:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
3229:Generated_Source\PSoC4/CyLib.c ****     *
3230:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
3231:Generated_Source\PSoC4/CyLib.c ****     void CySysSetDmacAccessArbPriority(uint32 source)
3232:Generated_Source\PSoC4/CyLib.c ****     {
 2430              		.loc 1 3232 0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 0
 2433              		@ frame_needed = 0, uses_anonymous_args = 0
 2434              		@ link register save eliminated.
 2435              	.LVL146:
3233:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
3234:Generated_Source\PSoC4/CyLib.c **** 
3235:Generated_Source\PSoC4/CyLib.c ****         regTmp  = CY_SYS_CPUSS_DMAC_CTL_REG & ~CY_SYS_CPUSS_DMAC_CTL_ARB_MASK;
 2436              		.loc 1 3235 0
 2437 0000 0549     		ldr	r1, .L192
 2438 0002 064B     		ldr	r3, .L192+4
 2439 0004 0A68     		ldr	r2, [r1]
3236:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_DMAC_CTL_ARB_SHIFT) & CY_SYS_CPUSS_DMAC_CTL_ARB
 2440              		.loc 1 3236 0
 2441 0006 4004     		lsls	r0, r0, #17
 2442              	.LVL147:
3235:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_DMAC_CTL_ARB_SHIFT) & CY_SYS_CPUSS_DMAC_CTL_ARB
 2443              		.loc 1 3235 0
 2444 0008 1340     		ands	r3, r2
 2445              	.LVL148:
 2446              		.loc 1 3236 0
 2447 000a C022     		movs	r2, #192
 2448 000c D202     		lsls	r2, r2, #11
 2449 000e 1040     		ands	r0, r2
 2450 0010 1843     		orrs	r0, r3
 2451              	.LVL149:
3237:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CPUSS_DMAC_CTL_REG = regTmp;
 2452              		.loc 1 3237 0
 2453 0012 0860     		str	r0, [r1]
3238:Generated_Source\PSoC4/CyLib.c ****     }
 2454              		.loc 1 3238 0
 2455              		@ sp needed
 2456 0014 7047     		bx	lr
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 105


 2457              	.L193:
 2458 0016 C046     		.align	2
 2459              	.L192:
 2460 0018 3C001040 		.word	1074790460
 2461 001c FFFFF9FF 		.word	-393217
 2462              		.cfi_endproc
 2463              	.LFE53:
 2464              		.size	CySysSetDmacAccessArbPriority, .-CySysSetDmacAccessArbPriority
 2465              		.section	.text.CySysSetPeripheralAccessArbPriority,"ax",%progbits
 2466              		.align	1
 2467              		.global	CySysSetPeripheralAccessArbPriority
 2468              		.code	16
 2469              		.thumb_func
 2470              		.type	CySysSetPeripheralAccessArbPriority, %function
 2471              	CySysSetPeripheralAccessArbPriority:
 2472              	.LFB54:
3239:Generated_Source\PSoC4/CyLib.c **** 
3240:Generated_Source\PSoC4/CyLib.c **** 
3241:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
3242:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetPeripheralAccessArbPriority
3243:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
3244:Generated_Source\PSoC4/CyLib.c ****     *
3245:Generated_Source\PSoC4/CyLib.c ****     *  Sets slave peripheral interface access priority between CPU and DMA.
3246:Generated_Source\PSoC4/CyLib.c ****     *  The SL_CTL register is configured to set the priority. Please refer to the
3247:Generated_Source\PSoC4/CyLib.c ****     *  device TRM for more details.
3248:Generated_Source\PSoC4/CyLib.c ****     *
3249:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M / PSoC 4200L / 4100S with 
3250:Generated_Source\PSoC4/CyLib.c ****     *  DMA devices only.
3251:Generated_Source\PSoC4/CyLib.c ****     *
3252:Generated_Source\PSoC4/CyLib.c ****     *  \param  interfaceNumber: the slave interface number. Please refer to the
3253:Generated_Source\PSoC4/CyLib.c ****     *  device TRM for more details.
3254:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
3255:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
3256:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
3257:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
3258:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
3259:Generated_Source\PSoC4/CyLib.c ****     *
3260:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
3261:Generated_Source\PSoC4/CyLib.c ****     void CySysSetPeripheralAccessArbPriority(uint32 interfaceNumber, uint32 source)
3262:Generated_Source\PSoC4/CyLib.c ****     {
 2473              		.loc 1 3262 0
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 0
 2476              		@ frame_needed = 0, uses_anonymous_args = 0
 2477              		@ link register save eliminated.
 2478              	.LVL150:
3263:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
3264:Generated_Source\PSoC4/CyLib.c **** 
3265:Generated_Source\PSoC4/CyLib.c ****         if (interfaceNumber == 0u)
 2479              		.loc 1 3265 0
 2480 0000 0028     		cmp	r0, #0
 2481 0002 01D1     		bne	.L195
3266:Generated_Source\PSoC4/CyLib.c ****         {
3267:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CPUSS_SL_CTL0_REG & ~CY_SYS_CPUSS_SL_CTL_ARB_MASK;
 2482              		.loc 1 3267 0
 2483 0004 0948     		ldr	r0, .L199
 2484              	.LVL151:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 106


 2485 0006 06E0     		b	.L198
 2486              	.LVL152:
 2487              	.L195:
3268:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
3269:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CPUSS_SL_CTL0_REG = regTmp;
3270:Generated_Source\PSoC4/CyLib.c ****         } else
3271:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SL_NR >= 2)
3272:Generated_Source\PSoC4/CyLib.c ****         if (interfaceNumber == 1u)
 2488              		.loc 1 3272 0
 2489 0008 0128     		cmp	r0, #1
 2490 000a 01D1     		bne	.L197
3273:Generated_Source\PSoC4/CyLib.c ****         {
3274:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CPUSS_SL_CTL1_REG & ~CY_SYS_CPUSS_SL_CTL_ARB_MASK;
 2491              		.loc 1 3274 0
 2492 000c 0848     		ldr	r0, .L199+4
 2493              	.LVL153:
 2494 000e 02E0     		b	.L198
 2495              	.LVL154:
 2496              	.L197:
3275:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
3276:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CPUSS_SL_CTL1_REG = regTmp;
3277:Generated_Source\PSoC4/CyLib.c ****         } else
3278:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SL_NR >= 1) */
3279:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SL_NR >= 3)
3280:Generated_Source\PSoC4/CyLib.c ****         if (interfaceNumber == 2u)
 2497              		.loc 1 3280 0
 2498 0010 0228     		cmp	r0, #2
 2499 0012 09D1     		bne	.L194
3281:Generated_Source\PSoC4/CyLib.c ****         {
3282:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CPUSS_SL_CTL2_REG & ~CY_SYS_CPUSS_SL_CTL_ARB_MASK;
 2500              		.loc 1 3282 0
 2501 0014 0748     		ldr	r0, .L199+8
 2502              	.LVL155:
 2503              	.L198:
 2504 0016 0268     		ldr	r2, [r0]
 2505 0018 074B     		ldr	r3, .L199+12
3283:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
 2506              		.loc 1 3283 0
 2507 001a 4904     		lsls	r1, r1, #17
 2508              	.LVL156:
3282:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
 2509              		.loc 1 3282 0
 2510 001c 1340     		ands	r3, r2
 2511              	.LVL157:
 2512              		.loc 1 3283 0
 2513 001e C022     		movs	r2, #192
 2514 0020 D202     		lsls	r2, r2, #11
 2515 0022 1140     		ands	r1, r2
 2516 0024 1943     		orrs	r1, r3
 2517              	.LVL158:
3284:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CPUSS_SL_CTL2_REG = regTmp;
 2518              		.loc 1 3284 0
 2519 0026 0160     		str	r1, [r0]
 2520              	.LVL159:
 2521              	.L194:
3285:Generated_Source\PSoC4/CyLib.c ****         } else
3286:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SL_NR >= 1) */
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 107


3287:Generated_Source\PSoC4/CyLib.c ****         {
3288:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if interface is invalid */
3289:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
3290:Generated_Source\PSoC4/CyLib.c ****         }
3291:Generated_Source\PSoC4/CyLib.c ****     }
 2522              		.loc 1 3291 0
 2523              		@ sp needed
 2524 0028 7047     		bx	lr
 2525              	.L200:
 2526 002a C046     		.align	2
 2527              	.L199:
 2528 002c 00011040 		.word	1074790656
 2529 0030 04011040 		.word	1074790660
 2530 0034 08011040 		.word	1074790664
 2531 0038 FFFFF9FF 		.word	-393217
 2532              		.cfi_endproc
 2533              	.LFE54:
 2534              		.size	CySysSetPeripheralAccessArbPriority, .-CySysSetPeripheralAccessArbPriority
 2535              		.global	CySysClkPumpConfig
 2536              		.global	cyImoFreqMhz2Reg
 2537              		.global	CySysTickInitVar
 2538              		.global	cydelay32kMs
 2539              		.global	cydelayFreqMhz
 2540              		.global	cydelayFreqKhz
 2541              		.global	cydelayFreqHz
 2542              		.section	.rodata
 2543              		.set	.LANCHOR0,. + 0
 2544              		.type	cyImoFreqMhz2Reg, %object
 2545              		.size	cyImoFreqMhz2Reg, 46
 2546              	cyImoFreqMhz2Reg:
 2547 0000 03       		.byte	3
 2548 0001 04       		.byte	4
 2549 0002 05       		.byte	5
 2550 0003 06       		.byte	6
 2551 0004 07       		.byte	7
 2552 0005 08       		.byte	8
 2553 0006 09       		.byte	9
 2554 0007 0A       		.byte	10
 2555 0008 0B       		.byte	11
 2556 0009 0C       		.byte	12
 2557 000a 0E       		.byte	14
 2558 000b 0F       		.byte	15
 2559 000c 10       		.byte	16
 2560 000d 11       		.byte	17
 2561 000e 12       		.byte	18
 2562 000f 13       		.byte	19
 2563 0010 14       		.byte	20
 2564 0011 15       		.byte	21
 2565 0012 16       		.byte	22
 2566 0013 17       		.byte	23
 2567 0014 18       		.byte	24
 2568 0015 19       		.byte	25
 2569 0016 1B       		.byte	27
 2570 0017 1C       		.byte	28
 2571 0018 1D       		.byte	29
 2572 0019 1E       		.byte	30
 2573 001a 1F       		.byte	31
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 108


 2574 001b 20       		.byte	32
 2575 001c 21       		.byte	33
 2576 001d 22       		.byte	34
 2577 001e 23       		.byte	35
 2578 001f 25       		.byte	37
 2579 0020 26       		.byte	38
 2580 0021 27       		.byte	39
 2581 0022 28       		.byte	40
 2582 0023 29       		.byte	41
 2583 0024 2A       		.byte	42
 2584 0025 2B       		.byte	43
 2585 0026 2E       		.byte	46
 2586 0027 2F       		.byte	47
 2587 0028 30       		.byte	48
 2588 0029 31       		.byte	49
 2589 002a 32       		.byte	50
 2590 002b 33       		.byte	51
 2591 002c 34       		.byte	52
 2592 002d 35       		.byte	53
 2593              		.data
 2594              		.align	2
 2595              		.set	.LANCHOR1,. + 0
 2596              		.type	CySysClkPumpConfig, %object
 2597              		.size	CySysClkPumpConfig, 4
 2598              	CySysClkPumpConfig:
 2599 0000 01000000 		.word	1
 2600              		.type	cydelay32kMs, %object
 2601              		.size	cydelay32kMs, 4
 2602              	cydelay32kMs:
 2603 0004 0000E02E 		.word	786432000
 2604              		.type	cydelayFreqKhz, %object
 2605              		.size	cydelayFreqKhz, 4
 2606              	cydelayFreqKhz:
 2607 0008 C05D0000 		.word	24000
 2608              		.type	cydelayFreqMhz, %object
 2609              		.size	cydelayFreqMhz, 1
 2610              	cydelayFreqMhz:
 2611 000c 18       		.byte	24
 2612 000d 000000   		.space	3
 2613              		.type	cydelayFreqHz, %object
 2614              		.size	cydelayFreqHz, 4
 2615              	cydelayFreqHz:
 2616 0010 00366E01 		.word	24000000
 2617              		.bss
 2618              		.align	2
 2619              		.set	.LANCHOR2,. + 0
 2620              		.type	CySysTickCallbacks, %object
 2621              		.size	CySysTickCallbacks, 20
 2622              	CySysTickCallbacks:
 2623 0000 00000000 		.space	20
 2623      00000000 
 2623      00000000 
 2623      00000000 
 2623      00000000 
 2624              		.type	CySysTickInitVar, %object
 2625              		.size	CySysTickInitVar, 4
 2626              	CySysTickInitVar:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 109


 2627 0014 00000000 		.space	4
 2628              		.text
 2629              	.Letext0:
 2630              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2631              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2632              		.file 4 "Generated_Source\\PSoC4\\CyFlash.h"
 2633              		.file 5 "Generated_Source\\PSoC4\\CyLFClk.h"
 2634              		.section	.debug_info,"",%progbits
 2635              	.Ldebug_info0:
 2636 0000 E60D0000 		.4byte	0xde6
 2637 0004 0400     		.2byte	0x4
 2638 0006 00000000 		.4byte	.Ldebug_abbrev0
 2639 000a 04       		.byte	0x4
 2640 000b 01       		.uleb128 0x1
 2641 000c 4B040000 		.4byte	.LASF119
 2642 0010 0C       		.byte	0xc
 2643 0011 A7070000 		.4byte	.LASF120
 2644 0015 8A050000 		.4byte	.LASF121
 2645 0019 70000000 		.4byte	.Ldebug_ranges0+0x70
 2646 001d 00000000 		.4byte	0
 2647 0021 00000000 		.4byte	.Ldebug_line0
 2648 0025 02       		.uleb128 0x2
 2649 0026 01       		.byte	0x1
 2650 0027 06       		.byte	0x6
 2651 0028 EB000000 		.4byte	.LASF0
 2652 002c 02       		.uleb128 0x2
 2653 002d 01       		.byte	0x1
 2654 002e 08       		.byte	0x8
 2655 002f FD050000 		.4byte	.LASF1
 2656 0033 02       		.uleb128 0x2
 2657 0034 02       		.byte	0x2
 2658 0035 05       		.byte	0x5
 2659 0036 12060000 		.4byte	.LASF2
 2660 003a 02       		.uleb128 0x2
 2661 003b 02       		.byte	0x2
 2662 003c 07       		.byte	0x7
 2663 003d 0D030000 		.4byte	.LASF3
 2664 0041 02       		.uleb128 0x2
 2665 0042 04       		.byte	0x4
 2666 0043 05       		.byte	0x5
 2667 0044 50010000 		.4byte	.LASF4
 2668 0048 02       		.uleb128 0x2
 2669 0049 04       		.byte	0x4
 2670 004a 07       		.byte	0x7
 2671 004b 80020000 		.4byte	.LASF5
 2672 004f 02       		.uleb128 0x2
 2673 0050 08       		.byte	0x8
 2674 0051 05       		.byte	0x5
 2675 0052 DD000000 		.4byte	.LASF6
 2676 0056 02       		.uleb128 0x2
 2677 0057 08       		.byte	0x8
 2678 0058 07       		.byte	0x7
 2679 0059 67000000 		.4byte	.LASF7
 2680 005d 03       		.uleb128 0x3
 2681 005e 04       		.byte	0x4
 2682 005f 05       		.byte	0x5
 2683 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 110


 2684 0064 02       		.uleb128 0x2
 2685 0065 04       		.byte	0x4
 2686 0066 07       		.byte	0x7
 2687 0067 64020000 		.4byte	.LASF8
 2688 006b 04       		.uleb128 0x4
 2689 006c 85010000 		.4byte	.LASF9
 2690 0070 02       		.byte	0x2
 2691 0071 E401     		.2byte	0x1e4
 2692 0073 2C000000 		.4byte	0x2c
 2693 0077 04       		.uleb128 0x4
 2694 0078 0F000000 		.4byte	.LASF10
 2695 007c 02       		.byte	0x2
 2696 007d E501     		.2byte	0x1e5
 2697 007f 3A000000 		.4byte	0x3a
 2698 0083 04       		.uleb128 0x4
 2699 0084 C5010000 		.4byte	.LASF11
 2700 0088 02       		.byte	0x2
 2701 0089 E601     		.2byte	0x1e6
 2702 008b 48000000 		.4byte	0x48
 2703 008f 02       		.uleb128 0x2
 2704 0090 04       		.byte	0x4
 2705 0091 04       		.byte	0x4
 2706 0092 31050000 		.4byte	.LASF12
 2707 0096 02       		.uleb128 0x2
 2708 0097 08       		.byte	0x8
 2709 0098 04       		.byte	0x4
 2710 0099 A1010000 		.4byte	.LASF13
 2711 009d 02       		.uleb128 0x2
 2712 009e 01       		.byte	0x1
 2713 009f 08       		.byte	0x8
 2714 00a0 68060000 		.4byte	.LASF14
 2715 00a4 04       		.uleb128 0x4
 2716 00a5 CA050000 		.4byte	.LASF15
 2717 00a9 02       		.byte	0x2
 2718 00aa 8E02     		.2byte	0x28e
 2719 00ac B0000000 		.4byte	0xb0
 2720 00b0 05       		.uleb128 0x5
 2721 00b1 6B000000 		.4byte	0x6b
 2722 00b5 04       		.uleb128 0x4
 2723 00b6 BE030000 		.4byte	.LASF16
 2724 00ba 02       		.byte	0x2
 2725 00bb 9002     		.2byte	0x290
 2726 00bd C1000000 		.4byte	0xc1
 2727 00c1 05       		.uleb128 0x5
 2728 00c2 83000000 		.4byte	0x83
 2729 00c6 04       		.uleb128 0x4
 2730 00c7 6D060000 		.4byte	.LASF17
 2731 00cb 02       		.byte	0x2
 2732 00cc A002     		.2byte	0x2a0
 2733 00ce D2000000 		.4byte	0xd2
 2734 00d2 06       		.uleb128 0x6
 2735 00d3 04       		.byte	0x4
 2736 00d4 D8000000 		.4byte	0xd8
 2737 00d8 07       		.uleb128 0x7
 2738 00d9 02       		.uleb128 0x2
 2739 00da 08       		.byte	0x8
 2740 00db 04       		.byte	0x4
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 111


 2741 00dc 37040000 		.4byte	.LASF18
 2742 00e0 02       		.uleb128 0x2
 2743 00e1 04       		.byte	0x4
 2744 00e2 07       		.byte	0x7
 2745 00e3 E7030000 		.4byte	.LASF19
 2746 00e7 08       		.uleb128 0x8
 2747 00e8 5C050000 		.4byte	.LASF20
 2748 00ec 03       		.byte	0x3
 2749 00ed F5       		.byte	0xf5
 2750 00ee D2000000 		.4byte	0xd2
 2751 00f2 09       		.uleb128 0x9
 2752 00f3 E9010000 		.4byte	.LASF26
 2753 00f7 01       		.byte	0x1
 2754 00f8 A6       		.byte	0xa6
 2755 00f9 01       		.byte	0x1
 2756 00fa 3F010000 		.4byte	0x13f
 2757 00fe 0A       		.uleb128 0xa
 2758 00ff 6900     		.ascii	"i\000"
 2759 0101 01       		.byte	0x1
 2760 0102 A9       		.byte	0xa9
 2761 0103 83000000 		.4byte	0x83
 2762 0107 0B       		.uleb128 0xb
 2763 0108 F7000000 		.4byte	.LASF21
 2764 010c 01       		.byte	0x1
 2765 010d AC       		.byte	0xac
 2766 010e 83000000 		.4byte	0x83
 2767 0112 0B       		.uleb128 0xb
 2768 0113 08010000 		.4byte	.LASF22
 2769 0117 01       		.byte	0x1
 2770 0118 AD       		.byte	0xad
 2771 0119 6B000000 		.4byte	0x6b
 2772 011d 0B       		.uleb128 0xb
 2773 011e 20030000 		.4byte	.LASF23
 2774 0122 01       		.byte	0x1
 2775 0123 AE       		.byte	0xae
 2776 0124 83000000 		.4byte	0x83
 2777 0128 0B       		.uleb128 0xb
 2778 0129 17010000 		.4byte	.LASF24
 2779 012d 01       		.byte	0x1
 2780 012e AF       		.byte	0xaf
 2781 012f 83000000 		.4byte	0x83
 2782 0133 0B       		.uleb128 0xb
 2783 0134 D2060000 		.4byte	.LASF25
 2784 0138 01       		.byte	0x1
 2785 0139 B0       		.byte	0xb0
 2786 013a C1000000 		.4byte	0xc1
 2787 013e 00       		.byte	0
 2788 013f 0C       		.uleb128 0xc
 2789 0140 AE010000 		.4byte	.LASF28
 2790 0144 01       		.byte	0x1
 2791 0145 1A09     		.2byte	0x91a
 2792 0147 01       		.byte	0x1
 2793 0148 0D       		.uleb128 0xd
 2794 0149 27030000 		.4byte	.LASF27
 2795 014d 01       		.byte	0x1
 2796 014e 950B     		.2byte	0xb95
 2797 0150 01       		.byte	0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 112


 2798 0151 62010000 		.4byte	0x162
 2799 0155 0E       		.uleb128 0xe
 2800 0156 34020000 		.4byte	.LASF31
 2801 015a 01       		.byte	0x1
 2802 015b 950B     		.2byte	0xb95
 2803 015d 83000000 		.4byte	0x83
 2804 0161 00       		.byte	0
 2805 0162 0F       		.uleb128 0xf
 2806 0163 4E060000 		.4byte	.LASF122
 2807 0167 01       		.byte	0x1
 2808 0168 1A0C     		.2byte	0xc1a
 2809 016a 01       		.byte	0x1
 2810 016b 7A010000 		.4byte	0x17a
 2811 016f 10       		.uleb128 0x10
 2812 0170 6900     		.ascii	"i\000"
 2813 0172 01       		.byte	0x1
 2814 0173 1C0C     		.2byte	0xc1c
 2815 0175 83000000 		.4byte	0x83
 2816 0179 00       		.byte	0
 2817 017a 0C       		.uleb128 0xc
 2818 017b 71020000 		.4byte	.LASF29
 2819 017f 01       		.byte	0x1
 2820 0180 D20B     		.2byte	0xbd2
 2821 0182 01       		.byte	0x1
 2822 0183 0D       		.uleb128 0xd
 2823 0184 DA070000 		.4byte	.LASF30
 2824 0188 01       		.byte	0x1
 2825 0189 550B     		.2byte	0xb55
 2826 018b 01       		.byte	0x1
 2827 018c 9D010000 		.4byte	0x19d
 2828 0190 0E       		.uleb128 0xe
 2829 0191 2E020000 		.4byte	.LASF32
 2830 0195 01       		.byte	0x1
 2831 0196 550B     		.2byte	0xb55
 2832 0198 83000000 		.4byte	0x83
 2833 019c 00       		.byte	0
 2834 019d 11       		.uleb128 0x11
 2835 019e 92030000 		.4byte	.LASF123
 2836 01a2 01       		.byte	0x1
 2837 01a3 7B09     		.2byte	0x97b
 2838 01a5 C6000000 		.4byte	0xc6
 2839 01a9 01       		.byte	0x1
 2840 01aa DF010000 		.4byte	0x1df
 2841 01ae 0E       		.uleb128 0xe
 2842 01af 4E030000 		.4byte	.LASF33
 2843 01b3 01       		.byte	0x1
 2844 01b4 7B09     		.2byte	0x97b
 2845 01b6 6B000000 		.4byte	0x6b
 2846 01ba 0E       		.uleb128 0xe
 2847 01bb 43040000 		.4byte	.LASF34
 2848 01bf 01       		.byte	0x1
 2849 01c0 7B09     		.2byte	0x97b
 2850 01c2 C6000000 		.4byte	0xc6
 2851 01c6 12       		.uleb128 0x12
 2852 01c7 4B000000 		.4byte	.LASF35
 2853 01cb 01       		.byte	0x1
 2854 01cc 7D09     		.2byte	0x97d
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 113


 2855 01ce C6000000 		.4byte	0xc6
 2856 01d2 12       		.uleb128 0x12
 2857 01d3 00000000 		.4byte	.LASF36
 2858 01d7 01       		.byte	0x1
 2859 01d8 7E09     		.2byte	0x97e
 2860 01da DF010000 		.4byte	0x1df
 2861 01de 00       		.byte	0
 2862 01df 06       		.uleb128 0x6
 2863 01e0 04       		.byte	0x4
 2864 01e1 C6000000 		.4byte	0xc6
 2865 01e5 13       		.uleb128 0x13
 2866 01e6 7E070000 		.4byte	.LASF47
 2867 01ea 01       		.byte	0x1
 2868 01eb 62       		.byte	0x62
 2869 01ec 00000000 		.4byte	.LFB1
 2870 01f0 14000000 		.4byte	.LFE1-.LFB1
 2871 01f4 01       		.uleb128 0x1
 2872 01f5 9C       		.byte	0x9c
 2873 01f6 14       		.uleb128 0x14
 2874 01f7 A4030000 		.4byte	.LASF37
 2875 01fb 01       		.byte	0x1
 2876 01fc 1301     		.2byte	0x113
 2877 01fe 00000000 		.4byte	.LFB4
 2878 0202 50000000 		.4byte	.LFE4-.LFB4
 2879 0206 01       		.uleb128 0x1
 2880 0207 9C       		.byte	0x9c
 2881 0208 2B020000 		.4byte	0x22b
 2882 020c 15       		.uleb128 0x15
 2883 020d 6900     		.ascii	"i\000"
 2884 020f 01       		.byte	0x1
 2885 0210 1601     		.2byte	0x116
 2886 0212 83000000 		.4byte	0x83
 2887 0216 00000000 		.4byte	.LLST0
 2888 021a 16       		.uleb128 0x16
 2889 021b F7000000 		.4byte	.LASF21
 2890 021f 01       		.byte	0x1
 2891 0220 1901     		.2byte	0x119
 2892 0222 83000000 		.4byte	0x83
 2893 0226 37000000 		.4byte	.LLST1
 2894 022a 00       		.byte	0
 2895 022b 17       		.uleb128 0x17
 2896 022c AD020000 		.4byte	.LASF38
 2897 0230 01       		.byte	0x1
 2898 0231 82       		.byte	0x82
 2899 0232 00000000 		.4byte	.LFB2
 2900 0236 18000000 		.4byte	.LFE2-.LFB2
 2901 023a 01       		.uleb128 0x1
 2902 023b 9C       		.byte	0x9c
 2903 023c 4A020000 		.4byte	0x24a
 2904 0240 18       		.uleb128 0x18
 2905 0241 06000000 		.4byte	.LVL8
 2906 0245 F6010000 		.4byte	0x1f6
 2907 0249 00       		.byte	0
 2908 024a 19       		.uleb128 0x19
 2909 024b 32010000 		.4byte	.LASF49
 2910 024f 01       		.byte	0x1
 2911 0250 4B01     		.2byte	0x14b
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 114


 2912 0252 83000000 		.4byte	0x83
 2913 0256 00000000 		.4byte	.LFB5
 2914 025a 10000000 		.4byte	.LFE5-.LFB5
 2915 025e 01       		.uleb128 0x1
 2916 025f 9C       		.byte	0x9c
 2917 0260 14       		.uleb128 0x14
 2918 0261 1F000000 		.4byte	.LASF39
 2919 0265 01       		.byte	0x1
 2920 0266 1B02     		.2byte	0x21b
 2921 0268 00000000 		.4byte	.LFB6
 2922 026c 20000000 		.4byte	.LFE6-.LFB6
 2923 0270 01       		.uleb128 0x1
 2924 0271 9C       		.byte	0x9c
 2925 0272 B9020000 		.4byte	0x2b9
 2926 0276 1A       		.uleb128 0x1a
 2927 0277 3A060000 		.4byte	.LASF42
 2928 027b 01       		.byte	0x1
 2929 027c 1B02     		.2byte	0x21b
 2930 027e 83000000 		.4byte	0x83
 2931 0282 7E000000 		.4byte	.LLST2
 2932 0286 16       		.uleb128 0x16
 2933 0287 08010000 		.4byte	.LASF22
 2934 028b 01       		.byte	0x1
 2935 028c 1D02     		.2byte	0x21d
 2936 028e 6B000000 		.4byte	0x6b
 2937 0292 AA000000 		.4byte	.LLST3
 2938 0296 16       		.uleb128 0x16
 2939 0297 D3070000 		.4byte	.LASF40
 2940 029b 01       		.byte	0x1
 2941 029c 1E02     		.2byte	0x21e
 2942 029e 83000000 		.4byte	0x83
 2943 02a2 BD000000 		.4byte	.LLST4
 2944 02a6 18       		.uleb128 0x18
 2945 02a7 08000000 		.4byte	.LVL10
 2946 02ab B20D0000 		.4byte	0xdb2
 2947 02af 18       		.uleb128 0x18
 2948 02b0 1A000000 		.4byte	.LVL13
 2949 02b4 BD0D0000 		.4byte	0xdbd
 2950 02b8 00       		.byte	0
 2951 02b9 14       		.uleb128 0x14
 2952 02ba 70010000 		.4byte	.LASF41
 2953 02be 01       		.byte	0x1
 2954 02bf 6302     		.2byte	0x263
 2955 02c1 00000000 		.4byte	.LFB7
 2956 02c5 34000000 		.4byte	.LFE7-.LFB7
 2957 02c9 01       		.uleb128 0x1
 2958 02ca 9C       		.byte	0x9c
 2959 02cb DE020000 		.4byte	0x2de
 2960 02cf 1B       		.uleb128 0x1b
 2961 02d0 9A010000 		.4byte	.LASF43
 2962 02d4 01       		.byte	0x1
 2963 02d5 6302     		.2byte	0x263
 2964 02d7 83000000 		.4byte	0x83
 2965 02db 01       		.uleb128 0x1
 2966 02dc 50       		.byte	0x50
 2967 02dd 00       		.byte	0
 2968 02de 1C       		.uleb128 0x1c
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 115


 2969 02df D1010000 		.4byte	.LASF51
 2970 02e3 01       		.byte	0x1
 2971 02e4 8802     		.2byte	0x288
 2972 02e6 83000000 		.4byte	0x83
 2973 02ea 00000000 		.4byte	.LFB8
 2974 02ee 18000000 		.4byte	.LFE8-.LFB8
 2975 02f2 01       		.uleb128 0x1
 2976 02f3 9C       		.byte	0x9c
 2977 02f4 2B030000 		.4byte	0x32b
 2978 02f8 16       		.uleb128 0x16
 2979 02f9 08010000 		.4byte	.LASF22
 2980 02fd 01       		.byte	0x1
 2981 02fe 8A02     		.2byte	0x28a
 2982 0300 6B000000 		.4byte	0x6b
 2983 0304 DB000000 		.4byte	.LLST5
 2984 0308 16       		.uleb128 0x16
 2985 0309 D9040000 		.4byte	.LASF44
 2986 030d 01       		.byte	0x1
 2987 030e 8B02     		.2byte	0x28b
 2988 0310 83000000 		.4byte	0x83
 2989 0314 EE000000 		.4byte	.LLST6
 2990 0318 18       		.uleb128 0x18
 2991 0319 06000000 		.4byte	.LVL16
 2992 031d B20D0000 		.4byte	0xdb2
 2993 0321 18       		.uleb128 0x18
 2994 0322 0E000000 		.4byte	.LVL18
 2995 0326 BD0D0000 		.4byte	0xdbd
 2996 032a 00       		.byte	0
 2997 032b 14       		.uleb128 0x14
 2998 032c 8A060000 		.4byte	.LASF45
 2999 0330 01       		.byte	0x1
 3000 0331 C502     		.2byte	0x2c5
 3001 0333 00000000 		.4byte	.LFB9
 3002 0337 2C000000 		.4byte	.LFE9-.LFB9
 3003 033b 01       		.uleb128 0x1
 3004 033c 9C       		.byte	0x9c
 3005 033d 74030000 		.4byte	0x374
 3006 0341 1A       		.uleb128 0x1a
 3007 0342 76070000 		.4byte	.LASF46
 3008 0346 01       		.byte	0x1
 3009 0347 C502     		.2byte	0x2c5
 3010 0349 83000000 		.4byte	0x83
 3011 034d 10010000 		.4byte	.LLST7
 3012 0351 16       		.uleb128 0x16
 3013 0352 08010000 		.4byte	.LASF22
 3014 0356 01       		.byte	0x1
 3015 0357 C702     		.2byte	0x2c7
 3016 0359 6B000000 		.4byte	0x6b
 3017 035d 3C010000 		.4byte	.LLST8
 3018 0361 18       		.uleb128 0x18
 3019 0362 08000000 		.4byte	.LVL21
 3020 0366 B20D0000 		.4byte	0xdb2
 3021 036a 18       		.uleb128 0x18
 3022 036b 22000000 		.4byte	.LVL23
 3023 036f BD0D0000 		.4byte	0xdbd
 3024 0373 00       		.byte	0
 3025 0374 1D       		.uleb128 0x1d
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 116


 3026 0375 18070000 		.4byte	.LASF48
 3027 0379 01       		.byte	0x1
 3028 037a F808     		.2byte	0x8f8
 3029 037c 00000000 		.4byte	.LFB12
 3030 0380 20000000 		.4byte	.LFE12-.LFB12
 3031 0384 01       		.uleb128 0x1
 3032 0385 9C       		.byte	0x9c
 3033 0386 19       		.uleb128 0x19
 3034 0387 92020000 		.4byte	.LASF50
 3035 038b 01       		.byte	0x1
 3036 038c 0A09     		.2byte	0x90a
 3037 038e 83000000 		.4byte	0x83
 3038 0392 00000000 		.4byte	.LFB13
 3039 0396 10000000 		.4byte	.LFE13-.LFB13
 3040 039a 01       		.uleb128 0x1
 3041 039b 9C       		.byte	0x9c
 3042 039c 1E       		.uleb128 0x1e
 3043 039d 3F010000 		.4byte	0x13f
 3044 03a1 00000000 		.4byte	.LFB14
 3045 03a5 0C000000 		.4byte	.LFE14-.LFB14
 3046 03a9 01       		.uleb128 0x1
 3047 03aa 9C       		.byte	0x9c
 3048 03ab 1C       		.uleb128 0x1c
 3049 03ac F9020000 		.4byte	.LASF52
 3050 03b0 01       		.byte	0x1
 3051 03b1 3409     		.2byte	0x934
 3052 03b3 83000000 		.4byte	0x83
 3053 03b7 00000000 		.4byte	.LFB15
 3054 03bb 14000000 		.4byte	.LFE15-.LFB15
 3055 03bf 01       		.uleb128 0x1
 3056 03c0 9C       		.byte	0x9c
 3057 03c1 E6030000 		.4byte	0x3e6
 3058 03c5 1A       		.uleb128 0x1a
 3059 03c6 0B060000 		.4byte	.LASF53
 3060 03ca 01       		.byte	0x1
 3061 03cb 3409     		.2byte	0x934
 3062 03cd 83000000 		.4byte	0x83
 3063 03d1 4F010000 		.4byte	.LLST9
 3064 03d5 16       		.uleb128 0x16
 3065 03d6 D3030000 		.4byte	.LASF54
 3066 03da 01       		.byte	0x1
 3067 03db 3609     		.2byte	0x936
 3068 03dd 83000000 		.4byte	0x83
 3069 03e1 6D010000 		.4byte	.LLST10
 3070 03e5 00       		.byte	0
 3071 03e6 1C       		.uleb128 0x1c
 3072 03e7 59000000 		.4byte	.LASF55
 3073 03eb 01       		.byte	0x1
 3074 03ec 4B09     		.2byte	0x94b
 3075 03ee 83000000 		.4byte	0x83
 3076 03f2 00000000 		.4byte	.LFB16
 3077 03f6 10000000 		.4byte	.LFE16-.LFB16
 3078 03fa 01       		.uleb128 0x1
 3079 03fb 9C       		.byte	0x9c
 3080 03fc 0F040000 		.4byte	0x40f
 3081 0400 1F       		.uleb128 0x1f
 3082 0401 16000000 		.4byte	.LASF56
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 117


 3083 0405 01       		.byte	0x1
 3084 0406 4D09     		.2byte	0x94d
 3085 0408 83000000 		.4byte	0x83
 3086 040c 01       		.uleb128 0x1
 3087 040d 50       		.byte	0x50
 3088 040e 00       		.byte	0
 3089 040f 14       		.uleb128 0x14
 3090 0410 89000000 		.4byte	.LASF57
 3091 0414 01       		.byte	0x1
 3092 0415 6209     		.2byte	0x962
 3093 0417 00000000 		.4byte	.LFB17
 3094 041b 0C000000 		.4byte	.LFE17-.LFB17
 3095 041f 01       		.uleb128 0x1
 3096 0420 9C       		.byte	0x9c
 3097 0421 34040000 		.4byte	0x434
 3098 0425 1B       		.uleb128 0x1b
 3099 0426 CC010000 		.4byte	.LASF58
 3100 042a 01       		.byte	0x1
 3101 042b 6209     		.2byte	0x962
 3102 042d 83000000 		.4byte	0x83
 3103 0431 01       		.uleb128 0x1
 3104 0432 50       		.byte	0x50
 3105 0433 00       		.byte	0
 3106 0434 20       		.uleb128 0x20
 3107 0435 9D010000 		.4byte	0x19d
 3108 0439 00000000 		.4byte	.LFB18
 3109 043d 0E000000 		.4byte	.LFE18-.LFB18
 3110 0441 01       		.uleb128 0x1
 3111 0442 9C       		.byte	0x9c
 3112 0443 68040000 		.4byte	0x468
 3113 0447 21       		.uleb128 0x21
 3114 0448 AE010000 		.4byte	0x1ae
 3115 044c 8F010000 		.4byte	.LLST11
 3116 0450 22       		.uleb128 0x22
 3117 0451 BA010000 		.4byte	0x1ba
 3118 0455 01       		.uleb128 0x1
 3119 0456 51       		.byte	0x51
 3120 0457 23       		.uleb128 0x23
 3121 0458 C6010000 		.4byte	0x1c6
 3122 045c 01       		.uleb128 0x1
 3123 045d 50       		.byte	0x50
 3124 045e 24       		.uleb128 0x24
 3125 045f D2010000 		.4byte	0x1d2
 3126 0463 00000020 		.4byte	0x20000000
 3127 0467 00       		.byte	0
 3128 0468 1C       		.uleb128 0x1c
 3129 0469 28060000 		.4byte	.LASF59
 3130 046d 01       		.byte	0x1
 3131 046e 9D09     		.2byte	0x99d
 3132 0470 C6000000 		.4byte	0xc6
 3133 0474 00000000 		.4byte	.LFB19
 3134 0478 0C000000 		.4byte	.LFE19-.LFB19
 3135 047c 01       		.uleb128 0x1
 3136 047d 9C       		.byte	0x9c
 3137 047e A3040000 		.4byte	0x4a3
 3138 0482 1A       		.uleb128 0x1a
 3139 0483 4E030000 		.4byte	.LASF33
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 118


 3140 0487 01       		.byte	0x1
 3141 0488 9D09     		.2byte	0x99d
 3142 048a 6B000000 		.4byte	0x6b
 3143 048e B0010000 		.4byte	.LLST12
 3144 0492 25       		.uleb128 0x25
 3145 0493 00000000 		.4byte	.LASF36
 3146 0497 01       		.byte	0x1
 3147 0498 9F09     		.2byte	0x99f
 3148 049a DF010000 		.4byte	0x1df
 3149 049e 00000020 		.4byte	0x20000000
 3150 04a2 00       		.byte	0
 3151 04a3 1C       		.uleb128 0x1c
 3152 04a4 3F030000 		.4byte	.LASF60
 3153 04a8 01       		.byte	0x1
 3154 04a9 B309     		.2byte	0x9b3
 3155 04ab C6000000 		.4byte	0xc6
 3156 04af 00000000 		.4byte	.LFB20
 3157 04b3 10000000 		.4byte	.LFE20-.LFB20
 3158 04b7 01       		.uleb128 0x1
 3159 04b8 9C       		.byte	0x9c
 3160 04b9 FA040000 		.4byte	0x4fa
 3161 04bd 1A       		.uleb128 0x1a
 3162 04be 4E030000 		.4byte	.LASF33
 3163 04c2 01       		.byte	0x1
 3164 04c3 B309     		.2byte	0x9b3
 3165 04c5 6B000000 		.4byte	0x6b
 3166 04c9 D1010000 		.4byte	.LLST13
 3167 04cd 1B       		.uleb128 0x1b
 3168 04ce 43040000 		.4byte	.LASF34
 3169 04d2 01       		.byte	0x1
 3170 04d3 B309     		.2byte	0x9b3
 3171 04d5 C6000000 		.4byte	0xc6
 3172 04d9 01       		.uleb128 0x1
 3173 04da 51       		.byte	0x51
 3174 04db 1F       		.uleb128 0x1f
 3175 04dc 4B000000 		.4byte	.LASF35
 3176 04e0 01       		.byte	0x1
 3177 04e1 B509     		.2byte	0x9b5
 3178 04e3 C6000000 		.4byte	0xc6
 3179 04e7 01       		.uleb128 0x1
 3180 04e8 50       		.byte	0x50
 3181 04e9 25       		.uleb128 0x25
 3182 04ea 00000000 		.4byte	.LASF36
 3183 04ee 01       		.byte	0x1
 3184 04ef B609     		.2byte	0x9b6
 3185 04f1 DF010000 		.4byte	0x1df
 3186 04f5 00000020 		.4byte	0x20000000
 3187 04f9 00       		.byte	0
 3188 04fa 1C       		.uleb128 0x1c
 3189 04fb 6E050000 		.4byte	.LASF61
 3190 04ff 01       		.byte	0x1
 3191 0500 CF09     		.2byte	0x9cf
 3192 0502 C6000000 		.4byte	0xc6
 3193 0506 00000000 		.4byte	.LFB21
 3194 050a 10000000 		.4byte	.LFE21-.LFB21
 3195 050e 01       		.uleb128 0x1
 3196 050f 9C       		.byte	0x9c
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 119


 3197 0510 35050000 		.4byte	0x535
 3198 0514 1A       		.uleb128 0x1a
 3199 0515 4E030000 		.4byte	.LASF33
 3200 0519 01       		.byte	0x1
 3201 051a CF09     		.2byte	0x9cf
 3202 051c 6B000000 		.4byte	0x6b
 3203 0520 F2010000 		.4byte	.LLST14
 3204 0524 25       		.uleb128 0x25
 3205 0525 00000000 		.4byte	.LASF36
 3206 0529 01       		.byte	0x1
 3207 052a D109     		.2byte	0x9d1
 3208 052c DF010000 		.4byte	0x1df
 3209 0530 00000020 		.4byte	0x20000000
 3210 0534 00       		.byte	0
 3211 0535 14       		.uleb128 0x14
 3212 0536 20050000 		.4byte	.LASF62
 3213 053a 01       		.byte	0x1
 3214 053b E209     		.2byte	0x9e2
 3215 053d 00000000 		.4byte	.LFB22
 3216 0541 34000000 		.4byte	.LFE22-.LFB22
 3217 0545 01       		.uleb128 0x1
 3218 0546 9C       		.byte	0x9c
 3219 0547 AE050000 		.4byte	0x5ae
 3220 054b 1A       		.uleb128 0x1a
 3221 054c 4E030000 		.4byte	.LASF33
 3222 0550 01       		.byte	0x1
 3223 0551 E209     		.2byte	0x9e2
 3224 0553 6B000000 		.4byte	0x6b
 3225 0557 13020000 		.4byte	.LLST15
 3226 055b 1A       		.uleb128 0x1a
 3227 055c 55030000 		.4byte	.LASF63
 3228 0560 01       		.byte	0x1
 3229 0561 E209     		.2byte	0x9e2
 3230 0563 6B000000 		.4byte	0x6b
 3231 0567 34020000 		.4byte	.LLST16
 3232 056b 16       		.uleb128 0x16
 3233 056c 08010000 		.4byte	.LASF22
 3234 0570 01       		.byte	0x1
 3235 0571 E409     		.2byte	0x9e4
 3236 0573 6B000000 		.4byte	0x6b
 3237 0577 55020000 		.4byte	.LLST17
 3238 057b 16       		.uleb128 0x16
 3239 057c A8010000 		.4byte	.LASF64
 3240 0580 01       		.byte	0x1
 3241 0581 E509     		.2byte	0x9e5
 3242 0583 83000000 		.4byte	0x83
 3243 0587 68020000 		.4byte	.LLST18
 3244 058b 16       		.uleb128 0x16
 3245 058c 2E020000 		.4byte	.LASF32
 3246 0590 01       		.byte	0x1
 3247 0591 E609     		.2byte	0x9e6
 3248 0593 83000000 		.4byte	0x83
 3249 0597 7B020000 		.4byte	.LLST19
 3250 059b 18       		.uleb128 0x18
 3251 059c 18000000 		.4byte	.LVL42
 3252 05a0 B20D0000 		.4byte	0xdb2
 3253 05a4 18       		.uleb128 0x18
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 120


 3254 05a5 2C000000 		.4byte	.LVL46
 3255 05a9 BD0D0000 		.4byte	0xdbd
 3256 05ad 00       		.byte	0
 3257 05ae 1C       		.uleb128 0x1c
 3258 05af 02020000 		.4byte	.LASF65
 3259 05b3 01       		.byte	0x1
 3260 05b4 040A     		.2byte	0xa04
 3261 05b6 6B000000 		.4byte	0x6b
 3262 05ba 00000000 		.4byte	.LFB23
 3263 05be 20000000 		.4byte	.LFE23-.LFB23
 3264 05c2 01       		.uleb128 0x1
 3265 05c3 9C       		.byte	0x9c
 3266 05c4 E9050000 		.4byte	0x5e9
 3267 05c8 1A       		.uleb128 0x1a
 3268 05c9 4E030000 		.4byte	.LASF33
 3269 05cd 01       		.byte	0x1
 3270 05ce 040A     		.2byte	0xa04
 3271 05d0 6B000000 		.4byte	0x6b
 3272 05d4 99020000 		.4byte	.LLST20
 3273 05d8 16       		.uleb128 0x16
 3274 05d9 55030000 		.4byte	.LASF63
 3275 05dd 01       		.byte	0x1
 3276 05de 060A     		.2byte	0xa06
 3277 05e0 6B000000 		.4byte	0x6b
 3278 05e4 BA020000 		.4byte	.LLST21
 3279 05e8 00       		.byte	0
 3280 05e9 14       		.uleb128 0x14
 3281 05ea 1C060000 		.4byte	.LASF66
 3282 05ee 01       		.byte	0x1
 3283 05ef 190A     		.2byte	0xa19
 3284 05f1 00000000 		.4byte	.LFB24
 3285 05f5 14000000 		.4byte	.LFE24-.LFB24
 3286 05f9 01       		.uleb128 0x1
 3287 05fa 9C       		.byte	0x9c
 3288 05fb 10060000 		.4byte	0x610
 3289 05ff 1A       		.uleb128 0x1a
 3290 0600 4E030000 		.4byte	.LASF33
 3291 0604 01       		.byte	0x1
 3292 0605 190A     		.2byte	0xa19
 3293 0607 6B000000 		.4byte	0x6b
 3294 060b DB020000 		.4byte	.LLST22
 3295 060f 00       		.byte	0
 3296 0610 1C       		.uleb128 0x1c
 3297 0611 CF000000 		.4byte	.LASF67
 3298 0615 01       		.byte	0x1
 3299 0616 2B0A     		.2byte	0xa2b
 3300 0618 6B000000 		.4byte	0x6b
 3301 061c 00000000 		.4byte	.LFB25
 3302 0620 18000000 		.4byte	.LFE25-.LFB25
 3303 0624 01       		.uleb128 0x1
 3304 0625 9C       		.byte	0x9c
 3305 0626 3B060000 		.4byte	0x63b
 3306 062a 1A       		.uleb128 0x1a
 3307 062b 4E030000 		.4byte	.LASF33
 3308 062f 01       		.byte	0x1
 3309 0630 2B0A     		.2byte	0xa2b
 3310 0632 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 121


 3311 0636 FC020000 		.4byte	.LLST23
 3312 063a 00       		.byte	0
 3313 063b 14       		.uleb128 0x14
 3314 063c 59010000 		.4byte	.LASF68
 3315 0640 01       		.byte	0x1
 3316 0641 3B0A     		.2byte	0xa3b
 3317 0643 00000000 		.4byte	.LFB26
 3318 0647 14000000 		.4byte	.LFE26-.LFB26
 3319 064b 01       		.uleb128 0x1
 3320 064c 9C       		.byte	0x9c
 3321 064d 62060000 		.4byte	0x662
 3322 0651 1A       		.uleb128 0x1a
 3323 0652 4E030000 		.4byte	.LASF33
 3324 0656 01       		.byte	0x1
 3325 0657 3B0A     		.2byte	0xa3b
 3326 0659 6B000000 		.4byte	0x6b
 3327 065d 1D030000 		.4byte	.LLST24
 3328 0661 00       		.byte	0
 3329 0662 14       		.uleb128 0x14
 3330 0663 D4020000 		.4byte	.LASF69
 3331 0667 01       		.byte	0x1
 3332 0668 490A     		.2byte	0xa49
 3333 066a 00000000 		.4byte	.LFB27
 3334 066e 14000000 		.4byte	.LFE27-.LFB27
 3335 0672 01       		.uleb128 0x1
 3336 0673 9C       		.byte	0x9c
 3337 0674 89060000 		.4byte	0x689
 3338 0678 1A       		.uleb128 0x1a
 3339 0679 4E030000 		.4byte	.LASF33
 3340 067d 01       		.byte	0x1
 3341 067e 490A     		.2byte	0xa49
 3342 0680 6B000000 		.4byte	0x6b
 3343 0684 3E030000 		.4byte	.LLST25
 3344 0688 00       		.byte	0
 3345 0689 14       		.uleb128 0x14
 3346 068a 25040000 		.4byte	.LASF70
 3347 068e 01       		.byte	0x1
 3348 068f 580A     		.2byte	0xa58
 3349 0691 00000000 		.4byte	.LFB28
 3350 0695 14000000 		.4byte	.LFE28-.LFB28
 3351 0699 01       		.uleb128 0x1
 3352 069a 9C       		.byte	0x9c
 3353 069b B0060000 		.4byte	0x6b0
 3354 069f 1A       		.uleb128 0x1a
 3355 06a0 4E030000 		.4byte	.LASF33
 3356 06a4 01       		.byte	0x1
 3357 06a5 580A     		.2byte	0xa58
 3358 06a7 6B000000 		.4byte	0x6b
 3359 06ab 5F030000 		.4byte	.LLST26
 3360 06af 00       		.byte	0
 3361 06b0 14       		.uleb128 0x14
 3362 06b1 D9050000 		.4byte	.LASF71
 3363 06b5 01       		.byte	0x1
 3364 06b6 670A     		.2byte	0xa67
 3365 06b8 00000000 		.4byte	.LFB29
 3366 06bc 04000000 		.4byte	.LFE29-.LFB29
 3367 06c0 01       		.uleb128 0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 122


 3368 06c1 9C       		.byte	0x9c
 3369 06c2 D5060000 		.4byte	0x6d5
 3370 06c6 1B       		.uleb128 0x1b
 3371 06c7 0B060000 		.4byte	.LASF53
 3372 06cb 01       		.byte	0x1
 3373 06cc 670A     		.2byte	0xa67
 3374 06ce 6B000000 		.4byte	0x6b
 3375 06d2 01       		.uleb128 0x1
 3376 06d3 50       		.byte	0x50
 3377 06d4 00       		.byte	0
 3378 06d5 1D       		.uleb128 0x1d
 3379 06d6 A6000000 		.4byte	.LASF72
 3380 06da 01       		.byte	0x1
 3381 06db 7F0A     		.2byte	0xa7f
 3382 06dd 00000000 		.4byte	.LFB30
 3383 06e1 18000000 		.4byte	.LFE30-.LFB30
 3384 06e5 01       		.uleb128 0x1
 3385 06e6 9C       		.byte	0x9c
 3386 06e7 14       		.uleb128 0x14
 3387 06e8 DE060000 		.4byte	.LASF73
 3388 06ec 01       		.byte	0x1
 3389 06ed 930A     		.2byte	0xa93
 3390 06ef 00000000 		.4byte	.LFB31
 3391 06f3 2C000000 		.4byte	.LFE31-.LFB31
 3392 06f7 01       		.uleb128 0x1
 3393 06f8 9C       		.byte	0x9c
 3394 06f9 20070000 		.4byte	0x720
 3395 06fd 1A       		.uleb128 0x1a
 3396 06fe 7D050000 		.4byte	.LASF74
 3397 0702 01       		.byte	0x1
 3398 0703 930A     		.2byte	0xa93
 3399 0705 83000000 		.4byte	0x83
 3400 0709 80030000 		.4byte	.LLST27
 3401 070d 18       		.uleb128 0x18
 3402 070e 14000000 		.4byte	.LVL66
 3403 0712 C80D0000 		.4byte	0xdc8
 3404 0716 18       		.uleb128 0x18
 3405 0717 22000000 		.4byte	.LVL68
 3406 071b C80D0000 		.4byte	0xdc8
 3407 071f 00       		.byte	0
 3408 0720 20       		.uleb128 0x20
 3409 0721 F2000000 		.4byte	0xf2
 3410 0725 00000000 		.4byte	.LFB3
 3411 0729 E4000000 		.4byte	.LFE3-.LFB3
 3412 072d 01       		.uleb128 0x1
 3413 072e 9C       		.byte	0x9c
 3414 072f F4070000 		.4byte	0x7f4
 3415 0733 26       		.uleb128 0x26
 3416 0734 FE000000 		.4byte	0xfe
 3417 0738 26       		.uleb128 0x26
 3418 0739 07010000 		.4byte	0x107
 3419 073d 26       		.uleb128 0x26
 3420 073e 12010000 		.4byte	0x112
 3421 0742 26       		.uleb128 0x26
 3422 0743 1D010000 		.4byte	0x11d
 3423 0747 27       		.uleb128 0x27
 3424 0748 28010000 		.4byte	0x128
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 123


 3425 074c 00       		.byte	0
 3426 074d 26       		.uleb128 0x26
 3427 074e 33010000 		.4byte	0x133
 3428 0752 28       		.uleb128 0x28
 3429 0753 0C000000 		.4byte	.LBB15
 3430 0757 AC000000 		.4byte	.LBE15-.LBB15
 3431 075b EA070000 		.4byte	0x7ea
 3432 075f 29       		.uleb128 0x29
 3433 0760 FE000000 		.4byte	0xfe
 3434 0764 9E030000 		.4byte	.LLST28
 3435 0768 29       		.uleb128 0x29
 3436 0769 07010000 		.4byte	0x107
 3437 076d D5030000 		.4byte	.LLST29
 3438 0771 29       		.uleb128 0x29
 3439 0772 12010000 		.4byte	0x112
 3440 0776 0B040000 		.4byte	.LLST30
 3441 077a 29       		.uleb128 0x29
 3442 077b 1D010000 		.4byte	0x11d
 3443 077f 1F040000 		.4byte	.LLST31
 3444 0783 29       		.uleb128 0x29
 3445 0784 28010000 		.4byte	0x128
 3446 0788 68040000 		.4byte	.LLST32
 3447 078c 23       		.uleb128 0x23
 3448 078d 33010000 		.4byte	0x133
 3449 0791 02       		.uleb128 0x2
 3450 0792 91       		.byte	0x91
 3451 0793 64       		.sleb128 -28
 3452 0794 18       		.uleb128 0x18
 3453 0795 10000000 		.4byte	.LVL72
 3454 0799 B20D0000 		.4byte	0xdb2
 3455 079d 2A       		.uleb128 0x2a
 3456 079e 78000000 		.4byte	.LVL86
 3457 07a2 D30D0000 		.4byte	0xdd3
 3458 07a6 B1070000 		.4byte	0x7b1
 3459 07aa 2B       		.uleb128 0x2b
 3460 07ab 01       		.uleb128 0x1
 3461 07ac 50       		.byte	0x50
 3462 07ad 02       		.uleb128 0x2
 3463 07ae 08       		.byte	0x8
 3464 07af 30       		.byte	0x30
 3465 07b0 00       		.byte	0
 3466 07b1 2A       		.uleb128 0x2a
 3467 07b2 94000000 		.4byte	.LVL89
 3468 07b6 E7060000 		.4byte	0x6e7
 3469 07ba C4070000 		.4byte	0x7c4
 3470 07be 2B       		.uleb128 0x2b
 3471 07bf 01       		.uleb128 0x1
 3472 07c0 50       		.byte	0x50
 3473 07c1 01       		.uleb128 0x1
 3474 07c2 31       		.byte	0x31
 3475 07c3 00       		.byte	0
 3476 07c4 2A       		.uleb128 0x2a
 3477 07c5 A4000000 		.4byte	.LVL90
 3478 07c9 E7060000 		.4byte	0x6e7
 3479 07cd D7070000 		.4byte	0x7d7
 3480 07d1 2B       		.uleb128 0x2b
 3481 07d2 01       		.uleb128 0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 124


 3482 07d3 50       		.byte	0x50
 3483 07d4 01       		.uleb128 0x1
 3484 07d5 31       		.byte	0x31
 3485 07d6 00       		.byte	0
 3486 07d7 2C       		.uleb128 0x2c
 3487 07d8 B8000000 		.4byte	.LVL91
 3488 07dc BD0D0000 		.4byte	0xdbd
 3489 07e0 2B       		.uleb128 0x2b
 3490 07e1 01       		.uleb128 0x1
 3491 07e2 50       		.byte	0x50
 3492 07e3 04       		.uleb128 0x4
 3493 07e4 91       		.byte	0x91
 3494 07e5 5C       		.sleb128 -36
 3495 07e6 94       		.byte	0x94
 3496 07e7 01       		.byte	0x1
 3497 07e8 00       		.byte	0
 3498 07e9 00       		.byte	0
 3499 07ea 18       		.uleb128 0x18
 3500 07eb 08000000 		.4byte	.LVL71
 3501 07ef DE0D0000 		.4byte	0xdde
 3502 07f3 00       		.byte	0
 3503 07f4 14       		.uleb128 0x14
 3504 07f5 5E030000 		.4byte	.LASF75
 3505 07f9 01       		.byte	0x1
 3506 07fa FF02     		.2byte	0x2ff
 3507 07fc 00000000 		.4byte	.LFB10
 3508 0800 80000000 		.4byte	.LFE10-.LFB10
 3509 0804 01       		.uleb128 0x1
 3510 0805 9C       		.byte	0x9c
 3511 0806 8D080000 		.4byte	0x88d
 3512 080a 1A       		.uleb128 0x1a
 3513 080b F7000000 		.4byte	.LASF21
 3514 080f 01       		.byte	0x1
 3515 0810 FF02     		.2byte	0x2ff
 3516 0812 83000000 		.4byte	0x83
 3517 0816 93040000 		.4byte	.LLST33
 3518 081a 1F       		.uleb128 0x1f
 3519 081b 7E000000 		.4byte	.LASF76
 3520 081f 01       		.byte	0x1
 3521 0820 0203     		.2byte	0x302
 3522 0822 9D080000 		.4byte	0x89d
 3523 0826 02       		.uleb128 0x2
 3524 0827 91       		.byte	0x91
 3525 0828 58       		.sleb128 -40
 3526 0829 1F       		.uleb128 0x1f
 3527 082a 66010000 		.4byte	.LASF77
 3528 082e 01       		.byte	0x1
 3529 082f 0303     		.2byte	0x303
 3530 0831 B2080000 		.4byte	0x8b2
 3531 0835 02       		.uleb128 0x2
 3532 0836 91       		.byte	0x91
 3533 0837 60       		.sleb128 -32
 3534 0838 16       		.uleb128 0x16
 3535 0839 48010000 		.4byte	.LASF78
 3536 083d 01       		.byte	0x1
 3537 083e 0C03     		.2byte	0x30c
 3538 0840 83000000 		.4byte	0x83
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 125


 3539 0844 BF040000 		.4byte	.LLST34
 3540 0848 16       		.uleb128 0x16
 3541 0849 08010000 		.4byte	.LASF22
 3542 084d 01       		.byte	0x1
 3543 084e 1303     		.2byte	0x313
 3544 0850 6B000000 		.4byte	0x6b
 3545 0854 EA040000 		.4byte	.LLST35
 3546 0858 18       		.uleb128 0x18
 3547 0859 0A000000 		.4byte	.LVL93
 3548 085d B20D0000 		.4byte	0xdb2
 3549 0861 18       		.uleb128 0x18
 3550 0862 10000000 		.4byte	.LVL95
 3551 0866 4A020000 		.4byte	0x24a
 3552 086a 18       		.uleb128 0x18
 3553 086b 1A000000 		.4byte	.LVL97
 3554 086f F6010000 		.4byte	0x1f6
 3555 0873 18       		.uleb128 0x18
 3556 0874 56000000 		.4byte	.LVL100
 3557 0878 F2000000 		.4byte	0xf2
 3558 087c 2C       		.uleb128 0x2c
 3559 087d 5C000000 		.4byte	.LVL101
 3560 0881 BD0D0000 		.4byte	0xdbd
 3561 0885 2B       		.uleb128 0x2b
 3562 0886 01       		.uleb128 0x1
 3563 0887 50       		.byte	0x50
 3564 0888 02       		.uleb128 0x2
 3565 0889 75       		.byte	0x75
 3566 088a 00       		.sleb128 0
 3567 088b 00       		.byte	0
 3568 088c 00       		.byte	0
 3569 088d 2D       		.uleb128 0x2d
 3570 088e C1000000 		.4byte	0xc1
 3571 0892 9D080000 		.4byte	0x89d
 3572 0896 2E       		.uleb128 0x2e
 3573 0897 E0000000 		.4byte	0xe0
 3574 089b 01       		.byte	0x1
 3575 089c 00       		.byte	0
 3576 089d 05       		.uleb128 0x5
 3577 089e 8D080000 		.4byte	0x88d
 3578 08a2 2D       		.uleb128 0x2d
 3579 08a3 C1000000 		.4byte	0xc1
 3580 08a7 B2080000 		.4byte	0x8b2
 3581 08ab 2E       		.uleb128 0x2e
 3582 08ac E0000000 		.4byte	0xe0
 3583 08b0 03       		.byte	0x3
 3584 08b1 00       		.byte	0
 3585 08b2 05       		.uleb128 0x5
 3586 08b3 A2080000 		.4byte	0x8a2
 3587 08b7 14       		.uleb128 0x14
 3588 08b8 44060000 		.4byte	.LASF79
 3589 08bc 01       		.byte	0x1
 3590 08bd AA0A     		.2byte	0xaaa
 3591 08bf 00000000 		.4byte	.LFB32
 3592 08c3 14000000 		.4byte	.LFE32-.LFB32
 3593 08c7 01       		.uleb128 0x1
 3594 08c8 9C       		.byte	0x9c
 3595 08c9 E7080000 		.4byte	0x8e7
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 126


 3596 08cd 1A       		.uleb128 0x1a
 3597 08ce C6070000 		.4byte	.LASF80
 3598 08d2 01       		.byte	0x1
 3599 08d3 AA0A     		.2byte	0xaaa
 3600 08d5 77000000 		.4byte	0x77
 3601 08d9 FD040000 		.4byte	.LLST36
 3602 08dd 18       		.uleb128 0x18
 3603 08de 0C000000 		.4byte	.LVL105
 3604 08e2 C80D0000 		.4byte	0xdc8
 3605 08e6 00       		.byte	0
 3606 08e7 14       		.uleb128 0x14
 3607 08e8 4D050000 		.4byte	.LASF81
 3608 08ec 01       		.byte	0x1
 3609 08ed DA08     		.2byte	0x8da
 3610 08ef 00000000 		.4byte	.LFB11
 3611 08f3 44000000 		.4byte	.LFE11-.LFB11
 3612 08f7 01       		.uleb128 0x1
 3613 08f8 9C       		.byte	0x9c
 3614 08f9 2F090000 		.4byte	0x92f
 3615 08fd 1A       		.uleb128 0x1a
 3616 08fe CF050000 		.4byte	.LASF82
 3617 0902 01       		.byte	0x1
 3618 0903 DA08     		.2byte	0x8da
 3619 0905 83000000 		.4byte	0x83
 3620 0909 1E050000 		.4byte	.LLST37
 3621 090d 2F       		.uleb128 0x2f
 3622 090e 3F010000 		.4byte	0x13f
 3623 0912 2C000000 		.4byte	.LBB16
 3624 0916 00000000 		.4byte	.Ldebug_ranges0+0
 3625 091a 01       		.byte	0x1
 3626 091b EA08     		.2byte	0x8ea
 3627 091d 2C       		.uleb128 0x2c
 3628 091e 2C000000 		.4byte	.LVL108
 3629 0922 B7080000 		.4byte	0x8b7
 3630 0926 2B       		.uleb128 0x2b
 3631 0927 01       		.uleb128 0x1
 3632 0928 50       		.byte	0x50
 3633 0929 03       		.uleb128 0x3
 3634 092a 0A       		.byte	0xa
 3635 092b E803     		.2byte	0x3e8
 3636 092d 00       		.byte	0
 3637 092e 00       		.byte	0
 3638 092f 30       		.uleb128 0x30
 3639 0930 FC000000 		.4byte	.LASF83
 3640 0934 01       		.byte	0x1
 3641 0935 B80A     		.2byte	0xab8
 3642 0937 00000000 		.4byte	.LFB33
 3643 093b 48000000 		.4byte	.LFE33-.LFB33
 3644 093f 01       		.uleb128 0x1
 3645 0940 9C       		.byte	0x9c
 3646 0941 56090000 		.4byte	0x956
 3647 0945 1A       		.uleb128 0x1a
 3648 0946 F7000000 		.4byte	.LASF21
 3649 094a 01       		.byte	0x1
 3650 094b B80A     		.2byte	0xab8
 3651 094d 83000000 		.4byte	0x83
 3652 0951 3F050000 		.4byte	.LLST38
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 127


 3653 0955 00       		.byte	0
 3654 0956 30       		.uleb128 0x30
 3655 0957 20020000 		.4byte	.LASF84
 3656 095b 01       		.byte	0x1
 3657 095c F50A     		.2byte	0xaf5
 3658 095e 00000000 		.4byte	.LFB35
 3659 0962 54000000 		.4byte	.LFE35-.LFB35
 3660 0966 01       		.uleb128 0x1
 3661 0967 9C       		.byte	0x9c
 3662 0968 150A0000 		.4byte	0xa15
 3663 096c 15       		.uleb128 0x15
 3664 096d 6900     		.ascii	"i\000"
 3665 096f 01       		.byte	0x1
 3666 0970 F70A     		.2byte	0xaf7
 3667 0972 83000000 		.4byte	0x83
 3668 0976 60050000 		.4byte	.LLST39
 3669 097a 31       		.uleb128 0x31
 3670 097b 48010000 		.4byte	0x148
 3671 097f 04000000 		.4byte	.LBB30
 3672 0983 18000000 		.4byte	.Ldebug_ranges0+0x18
 3673 0987 01       		.byte	0x1
 3674 0988 010B     		.2byte	0xb01
 3675 098a A7090000 		.4byte	0x9a7
 3676 098e 21       		.uleb128 0x21
 3677 098f 55010000 		.4byte	0x155
 3678 0993 A4050000 		.4byte	.LLST40
 3679 0997 32       		.uleb128 0x32
 3680 0998 18000000 		.4byte	.Ldebug_ranges0+0x18
 3681 099c 21       		.uleb128 0x21
 3682 099d 55010000 		.4byte	0x155
 3683 09a1 A4050000 		.4byte	.LLST40
 3684 09a5 00       		.byte	0
 3685 09a6 00       		.byte	0
 3686 09a7 31       		.uleb128 0x31
 3687 09a8 9D010000 		.4byte	0x19d
 3688 09ac 08000000 		.4byte	.LBB37
 3689 09b0 38000000 		.4byte	.Ldebug_ranges0+0x38
 3690 09b4 01       		.byte	0x1
 3691 09b5 FE0A     		.2byte	0xafe
 3692 09b7 E6090000 		.4byte	0x9e6
 3693 09bb 21       		.uleb128 0x21
 3694 09bc BA010000 		.4byte	0x1ba
 3695 09c0 B8050000 		.4byte	.LLST42
 3696 09c4 21       		.uleb128 0x21
 3697 09c5 AE010000 		.4byte	0x1ae
 3698 09c9 D0050000 		.4byte	.LLST43
 3699 09cd 32       		.uleb128 0x32
 3700 09ce 38000000 		.4byte	.Ldebug_ranges0+0x38
 3701 09d2 29       		.uleb128 0x29
 3702 09d3 C6010000 		.4byte	0x1c6
 3703 09d7 E4050000 		.4byte	.LLST44
 3704 09db 24       		.uleb128 0x24
 3705 09dc D2010000 		.4byte	0x1d2
 3706 09e0 00000020 		.4byte	0x20000000
 3707 09e4 00       		.byte	0
 3708 09e5 00       		.byte	0
 3709 09e6 33       		.uleb128 0x33
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 128


 3710 09e7 83010000 		.4byte	0x183
 3711 09eb 2C000000 		.4byte	.LBB45
 3712 09ef 04000000 		.4byte	.LBE45-.LBB45
 3713 09f3 01       		.byte	0x1
 3714 09f4 040B     		.2byte	0xb04
 3715 09f6 040A0000 		.4byte	0xa04
 3716 09fa 21       		.uleb128 0x21
 3717 09fb 90010000 		.4byte	0x190
 3718 09ff 07060000 		.4byte	.LLST45
 3719 0a03 00       		.byte	0
 3720 0a04 34       		.uleb128 0x34
 3721 0a05 7A010000 		.4byte	0x17a
 3722 0a09 30000000 		.4byte	.LBB47
 3723 0a0d 04000000 		.4byte	.LBE47-.LBB47
 3724 0a11 01       		.byte	0x1
 3725 0a12 050B     		.2byte	0xb05
 3726 0a14 00       		.byte	0
 3727 0a15 1D       		.uleb128 0x1d
 3728 0a16 68070000 		.4byte	.LASF85
 3729 0a1a 01       		.byte	0x1
 3730 0a1b 240B     		.2byte	0xb24
 3731 0a1d 00000000 		.4byte	.LFB37
 3732 0a21 10000000 		.4byte	.LFE37-.LFB37
 3733 0a25 01       		.uleb128 0x1
 3734 0a26 9C       		.byte	0x9c
 3735 0a27 1D       		.uleb128 0x1d
 3736 0a28 B6000000 		.4byte	.LASF86
 3737 0a2c 01       		.byte	0x1
 3738 0a2d 340B     		.2byte	0xb34
 3739 0a2f 00000000 		.4byte	.LFB38
 3740 0a33 10000000 		.4byte	.LFE38-.LFB38
 3741 0a37 01       		.uleb128 0x1
 3742 0a38 9C       		.byte	0x9c
 3743 0a39 14       		.uleb128 0x14
 3744 0a3a 7A060000 		.4byte	.LASF87
 3745 0a3e 01       		.byte	0x1
 3746 0a3f 130B     		.2byte	0xb13
 3747 0a41 00000000 		.4byte	.LFB36
 3748 0a45 18000000 		.4byte	.LFE36-.LFB36
 3749 0a49 01       		.uleb128 0x1
 3750 0a4a 9C       		.byte	0x9c
 3751 0a4b 590A0000 		.4byte	0xa59
 3752 0a4f 18       		.uleb128 0x18
 3753 0a50 06000000 		.4byte	.LVL123
 3754 0a54 270A0000 		.4byte	0xa27
 3755 0a58 00       		.byte	0
 3756 0a59 14       		.uleb128 0x14
 3757 0a5a C4030000 		.4byte	.LASF88
 3758 0a5e 01       		.byte	0x1
 3759 0a5f D80A     		.2byte	0xad8
 3760 0a61 00000000 		.4byte	.LFB34
 3761 0a65 1C000000 		.4byte	.LFE34-.LFB34
 3762 0a69 01       		.uleb128 0x1
 3763 0a6a 9C       		.byte	0x9c
 3764 0a6b 820A0000 		.4byte	0xa82
 3765 0a6f 18       		.uleb128 0x18
 3766 0a70 0E000000 		.4byte	.LVL124
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 129


 3767 0a74 56090000 		.4byte	0x956
 3768 0a78 18       		.uleb128 0x18
 3769 0a79 16000000 		.4byte	.LVL125
 3770 0a7d 390A0000 		.4byte	0xa39
 3771 0a81 00       		.byte	0
 3772 0a82 1D       		.uleb128 0x1d
 3773 0a83 FE060000 		.4byte	.LASF89
 3774 0a87 01       		.byte	0x1
 3775 0a88 440B     		.2byte	0xb44
 3776 0a8a 00000000 		.4byte	.LFB39
 3777 0a8e 10000000 		.4byte	.LFE39-.LFB39
 3778 0a92 01       		.uleb128 0x1
 3779 0a93 9C       		.byte	0x9c
 3780 0a94 20       		.uleb128 0x20
 3781 0a95 83010000 		.4byte	0x183
 3782 0a99 00000000 		.4byte	.LFB40
 3783 0a9d 10000000 		.4byte	.LFE40-.LFB40
 3784 0aa1 01       		.uleb128 0x1
 3785 0aa2 9C       		.byte	0x9c
 3786 0aa3 B10A0000 		.4byte	0xab1
 3787 0aa7 21       		.uleb128 0x21
 3788 0aa8 90010000 		.4byte	0x190
 3789 0aac 1A060000 		.4byte	.LLST46
 3790 0ab0 00       		.byte	0
 3791 0ab1 19       		.uleb128 0x19
 3792 0ab2 1F010000 		.4byte	.LASF90
 3793 0ab6 01       		.byte	0x1
 3794 0ab7 650B     		.2byte	0xb65
 3795 0ab9 83000000 		.4byte	0x83
 3796 0abd 00000000 		.4byte	.LFB41
 3797 0ac1 10000000 		.4byte	.LFE41-.LFB41
 3798 0ac5 01       		.uleb128 0x1
 3799 0ac6 9C       		.byte	0x9c
 3800 0ac7 19       		.uleb128 0x19
 3801 0ac8 00050000 		.4byte	.LASF91
 3802 0acc 01       		.byte	0x1
 3803 0acd 750B     		.2byte	0xb75
 3804 0acf 83000000 		.4byte	0x83
 3805 0ad3 00000000 		.4byte	.LFB42
 3806 0ad7 10000000 		.4byte	.LFE42-.LFB42
 3807 0adb 01       		.uleb128 0x1
 3808 0adc 9C       		.byte	0x9c
 3809 0add 20       		.uleb128 0x20
 3810 0ade 48010000 		.4byte	0x148
 3811 0ae2 00000000 		.4byte	.LFB43
 3812 0ae6 18000000 		.4byte	.LFE43-.LFB43
 3813 0aea 01       		.uleb128 0x1
 3814 0aeb 9C       		.byte	0x9c
 3815 0aec 070B0000 		.4byte	0xb07
 3816 0af0 22       		.uleb128 0x22
 3817 0af1 55010000 		.4byte	0x155
 3818 0af5 01       		.uleb128 0x1
 3819 0af6 50       		.byte	0x50
 3820 0af7 32       		.uleb128 0x32
 3821 0af8 58000000 		.4byte	.Ldebug_ranges0+0x58
 3822 0afc 21       		.uleb128 0x21
 3823 0afd 55010000 		.4byte	0x155
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 130


 3824 0b01 3B060000 		.4byte	.LLST47
 3825 0b05 00       		.byte	0
 3826 0b06 00       		.byte	0
 3827 0b07 19       		.uleb128 0x19
 3828 0b08 E6060000 		.4byte	.LASF92
 3829 0b0c 01       		.byte	0x1
 3830 0b0d AE0B     		.2byte	0xbae
 3831 0b0f 83000000 		.4byte	0x83
 3832 0b13 00000000 		.4byte	.LFB44
 3833 0b17 10000000 		.4byte	.LFE44-.LFB44
 3834 0b1b 01       		.uleb128 0x1
 3835 0b1c 9C       		.byte	0x9c
 3836 0b1d 19       		.uleb128 0x19
 3837 0b1e 4E020000 		.4byte	.LASF93
 3838 0b22 01       		.byte	0x1
 3839 0b23 C50B     		.2byte	0xbc5
 3840 0b25 83000000 		.4byte	0x83
 3841 0b29 00000000 		.4byte	.LFB45
 3842 0b2d 10000000 		.4byte	.LFE45-.LFB45
 3843 0b31 01       		.uleb128 0x1
 3844 0b32 9C       		.byte	0x9c
 3845 0b33 35       		.uleb128 0x35
 3846 0b34 62010000 		.4byte	0x162
 3847 0b38 00000000 		.4byte	.LFB49
 3848 0b3c 24000000 		.4byte	.LFE49-.LFB49
 3849 0b40 01       		.uleb128 0x1
 3850 0b41 9C       		.byte	0x9c
 3851 0b42 680B0000 		.4byte	0xb68
 3852 0b46 26       		.uleb128 0x26
 3853 0b47 6F010000 		.4byte	0x16f
 3854 0b4b 28       		.uleb128 0x28
 3855 0b4c 0C000000 		.4byte	.LBB57
 3856 0b50 10000000 		.4byte	.LBE57-.LBB57
 3857 0b54 5E0B0000 		.4byte	0xb5e
 3858 0b58 26       		.uleb128 0x26
 3859 0b59 6F010000 		.4byte	0x16f
 3860 0b5d 00       		.byte	0
 3861 0b5e 18       		.uleb128 0x18
 3862 0b5f 06000000 		.4byte	.LVL131
 3863 0b63 1D0B0000 		.4byte	0xb1d
 3864 0b67 00       		.byte	0
 3865 0b68 1E       		.uleb128 0x1e
 3866 0b69 7A010000 		.4byte	0x17a
 3867 0b6d 00000000 		.4byte	.LFB46
 3868 0b71 0C000000 		.4byte	.LFE46-.LFB46
 3869 0b75 01       		.uleb128 0x1
 3870 0b76 9C       		.byte	0x9c
 3871 0b77 1C       		.uleb128 0x1c
 3872 0b78 A1060000 		.4byte	.LASF94
 3873 0b7c 01       		.byte	0x1
 3874 0b7d F50B     		.2byte	0xbf5
 3875 0b7f E7000000 		.4byte	0xe7
 3876 0b83 00000000 		.4byte	.LFB47
 3877 0b87 10000000 		.4byte	.LFE47-.LFB47
 3878 0b8b 01       		.uleb128 0x1
 3879 0b8c 9C       		.byte	0x9c
 3880 0b8d BE0B0000 		.4byte	0xbbe
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 131


 3881 0b91 1A       		.uleb128 0x1a
 3882 0b92 4E030000 		.4byte	.LASF33
 3883 0b96 01       		.byte	0x1
 3884 0b97 F50B     		.2byte	0xbf5
 3885 0b99 83000000 		.4byte	0x83
 3886 0b9d 4F060000 		.4byte	.LLST48
 3887 0ba1 1B       		.uleb128 0x1b
 3888 0ba2 E6040000 		.4byte	.LASF95
 3889 0ba6 01       		.byte	0x1
 3890 0ba7 F50B     		.2byte	0xbf5
 3891 0ba9 E7000000 		.4byte	0xe7
 3892 0bad 01       		.uleb128 0x1
 3893 0bae 51       		.byte	0x51
 3894 0baf 1F       		.uleb128 0x1f
 3895 0bb0 52000000 		.4byte	.LASF96
 3896 0bb4 01       		.byte	0x1
 3897 0bb5 F70B     		.2byte	0xbf7
 3898 0bb7 E7000000 		.4byte	0xe7
 3899 0bbb 01       		.uleb128 0x1
 3900 0bbc 50       		.byte	0x50
 3901 0bbd 00       		.byte	0
 3902 0bbe 1C       		.uleb128 0x1c
 3903 0bbf E4020000 		.4byte	.LASF97
 3904 0bc3 01       		.byte	0x1
 3905 0bc4 0D0C     		.2byte	0xc0d
 3906 0bc6 E7000000 		.4byte	0xe7
 3907 0bca 00000000 		.4byte	.LFB48
 3908 0bce 0C000000 		.4byte	.LFE48-.LFB48
 3909 0bd2 01       		.uleb128 0x1
 3910 0bd3 9C       		.byte	0x9c
 3911 0bd4 E90B0000 		.4byte	0xbe9
 3912 0bd8 1A       		.uleb128 0x1a
 3913 0bd9 4E030000 		.4byte	.LASF33
 3914 0bdd 01       		.byte	0x1
 3915 0bde 0D0C     		.2byte	0xc0d
 3916 0be0 83000000 		.4byte	0x83
 3917 0be4 70060000 		.4byte	.LLST49
 3918 0be8 00       		.byte	0
 3919 0be9 14       		.uleb128 0x14
 3920 0bea 40020000 		.4byte	.LASF98
 3921 0bee 01       		.byte	0x1
 3922 0bef 3A0C     		.2byte	0xc3a
 3923 0bf1 00000000 		.4byte	.LFB50
 3924 0bf5 74000000 		.4byte	.LFE50-.LFB50
 3925 0bf9 01       		.uleb128 0x1
 3926 0bfa 9C       		.byte	0x9c
 3927 0bfb 0E0C0000 		.4byte	0xc0e
 3928 0bff 1B       		.uleb128 0x1b
 3929 0c00 C9060000 		.4byte	.LASF99
 3930 0c04 01       		.byte	0x1
 3931 0c05 3A0C     		.2byte	0xc3a
 3932 0c07 0E0C0000 		.4byte	0xc0e
 3933 0c0b 01       		.uleb128 0x1
 3934 0c0c 50       		.byte	0x50
 3935 0c0d 00       		.byte	0
 3936 0c0e 06       		.uleb128 0x6
 3937 0c0f 04       		.byte	0x4
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 132


 3938 0c10 83000000 		.4byte	0x83
 3939 0c14 14       		.uleb128 0x14
 3940 0c15 E0050000 		.4byte	.LASF100
 3941 0c19 01       		.byte	0x1
 3942 0c1a 670C     		.2byte	0xc67
 3943 0c1c 00000000 		.4byte	.LFB51
 3944 0c20 20000000 		.4byte	.LFE51-.LFB51
 3945 0c24 01       		.uleb128 0x1
 3946 0c25 9C       		.byte	0x9c
 3947 0c26 4B0C0000 		.4byte	0xc4b
 3948 0c2a 1A       		.uleb128 0x1a
 3949 0c2b E0030000 		.4byte	.LASF101
 3950 0c2f 01       		.byte	0x1
 3951 0c30 670C     		.2byte	0xc67
 3952 0c32 83000000 		.4byte	0x83
 3953 0c36 91060000 		.4byte	.LLST50
 3954 0c3a 16       		.uleb128 0x16
 3955 0c3b 20030000 		.4byte	.LASF23
 3956 0c3f 01       		.byte	0x1
 3957 0c40 690C     		.2byte	0xc69
 3958 0c42 83000000 		.4byte	0x83
 3959 0c46 B2060000 		.4byte	.LLST51
 3960 0c4a 00       		.byte	0
 3961 0c4b 14       		.uleb128 0x14
 3962 0c4c 73030000 		.4byte	.LASF102
 3963 0c50 01       		.byte	0x1
 3964 0c51 830C     		.2byte	0xc83
 3965 0c53 00000000 		.4byte	.LFB52
 3966 0c57 20000000 		.4byte	.LFE52-.LFB52
 3967 0c5b 01       		.uleb128 0x1
 3968 0c5c 9C       		.byte	0x9c
 3969 0c5d 820C0000 		.4byte	0xc82
 3970 0c61 1A       		.uleb128 0x1a
 3971 0c62 E0030000 		.4byte	.LASF101
 3972 0c66 01       		.byte	0x1
 3973 0c67 830C     		.2byte	0xc83
 3974 0c69 83000000 		.4byte	0x83
 3975 0c6d D0060000 		.4byte	.LLST52
 3976 0c71 16       		.uleb128 0x16
 3977 0c72 20030000 		.4byte	.LASF23
 3978 0c76 01       		.byte	0x1
 3979 0c77 850C     		.2byte	0xc85
 3980 0c79 83000000 		.4byte	0x83
 3981 0c7d F1060000 		.4byte	.LLST53
 3982 0c81 00       		.byte	0
 3983 0c82 14       		.uleb128 0x14
 3984 0c83 4A070000 		.4byte	.LASF103
 3985 0c87 01       		.byte	0x1
 3986 0c88 9F0C     		.2byte	0xc9f
 3987 0c8a 00000000 		.4byte	.LFB53
 3988 0c8e 20000000 		.4byte	.LFE53-.LFB53
 3989 0c92 01       		.uleb128 0x1
 3990 0c93 9C       		.byte	0x9c
 3991 0c94 B90C0000 		.4byte	0xcb9
 3992 0c98 1A       		.uleb128 0x1a
 3993 0c99 E0030000 		.4byte	.LASF101
 3994 0c9d 01       		.byte	0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 133


 3995 0c9e 9F0C     		.2byte	0xc9f
 3996 0ca0 83000000 		.4byte	0x83
 3997 0ca4 0F070000 		.4byte	.LLST54
 3998 0ca8 16       		.uleb128 0x16
 3999 0ca9 20030000 		.4byte	.LASF23
 4000 0cad 01       		.byte	0x1
 4001 0cae A10C     		.2byte	0xca1
 4002 0cb0 83000000 		.4byte	0x83
 4003 0cb4 30070000 		.4byte	.LLST55
 4004 0cb8 00       		.byte	0
 4005 0cb9 14       		.uleb128 0x14
 4006 0cba 01040000 		.4byte	.LASF104
 4007 0cbe 01       		.byte	0x1
 4008 0cbf BD0C     		.2byte	0xcbd
 4009 0cc1 00000000 		.4byte	.LFB54
 4010 0cc5 3C000000 		.4byte	.LFE54-.LFB54
 4011 0cc9 01       		.uleb128 0x1
 4012 0cca 9C       		.byte	0x9c
 4013 0ccb 000D0000 		.4byte	0xd00
 4014 0ccf 1A       		.uleb128 0x1a
 4015 0cd0 96000000 		.4byte	.LASF105
 4016 0cd4 01       		.byte	0x1
 4017 0cd5 BD0C     		.2byte	0xcbd
 4018 0cd7 83000000 		.4byte	0x83
 4019 0cdb 4E070000 		.4byte	.LLST56
 4020 0cdf 1A       		.uleb128 0x1a
 4021 0ce0 E0030000 		.4byte	.LASF101
 4022 0ce4 01       		.byte	0x1
 4023 0ce5 BD0C     		.2byte	0xcbd
 4024 0ce7 83000000 		.4byte	0x83
 4025 0ceb A1070000 		.4byte	.LLST57
 4026 0cef 16       		.uleb128 0x16
 4027 0cf0 20030000 		.4byte	.LASF23
 4028 0cf4 01       		.byte	0x1
 4029 0cf5 BF0C     		.2byte	0xcbf
 4030 0cf7 83000000 		.4byte	0x83
 4031 0cfb C2070000 		.4byte	.LLST58
 4032 0cff 00       		.byte	0
 4033 0d00 2D       		.uleb128 0x2d
 4034 0d01 E7000000 		.4byte	0xe7
 4035 0d05 100D0000 		.4byte	0xd10
 4036 0d09 2E       		.uleb128 0x2e
 4037 0d0a E0000000 		.4byte	0xe0
 4038 0d0e 04       		.byte	0x4
 4039 0d0f 00       		.byte	0
 4040 0d10 36       		.uleb128 0x36
 4041 0d11 B6060000 		.4byte	.LASF106
 4042 0d15 01       		.byte	0x1
 4043 0d16 22       		.byte	0x22
 4044 0d17 000D0000 		.4byte	0xd00
 4045 0d1b 05       		.uleb128 0x5
 4046 0d1c 03       		.byte	0x3
 4047 0d1d 00000000 		.4byte	CySysTickCallbacks
 4048 0d21 37       		.uleb128 0x37
 4049 0d22 12050000 		.4byte	.LASF107
 4050 0d26 01       		.byte	0x1
 4051 0d27 1B       		.byte	0x1b
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 134


 4052 0d28 83000000 		.4byte	0x83
 4053 0d2c 05       		.uleb128 0x5
 4054 0d2d 03       		.byte	0x3
 4055 0d2e 00000000 		.4byte	cydelayFreqHz
 4056 0d32 37       		.uleb128 0x37
 4057 0d33 8B010000 		.4byte	.LASF108
 4058 0d37 01       		.byte	0x1
 4059 0d38 1C       		.byte	0x1c
 4060 0d39 83000000 		.4byte	0x83
 4061 0d3d 05       		.uleb128 0x5
 4062 0d3e 03       		.byte	0x3
 4063 0d3f 00000000 		.4byte	cydelayFreqKhz
 4064 0d43 37       		.uleb128 0x37
 4065 0d44 28070000 		.4byte	.LASF109
 4066 0d48 01       		.byte	0x1
 4067 0d49 1D       		.byte	0x1d
 4068 0d4a 6B000000 		.4byte	0x6b
 4069 0d4e 05       		.uleb128 0x5
 4070 0d4f 03       		.byte	0x3
 4071 0d50 00000000 		.4byte	cydelayFreqMhz
 4072 0d54 37       		.uleb128 0x37
 4073 0d55 13020000 		.4byte	.LASF110
 4074 0d59 01       		.byte	0x1
 4075 0d5a 1E       		.byte	0x1e
 4076 0d5b 83000000 		.4byte	0x83
 4077 0d5f 05       		.uleb128 0x5
 4078 0d60 03       		.byte	0x3
 4079 0d61 00000000 		.4byte	cydelay32kMs
 4080 0d65 37       		.uleb128 0x37
 4081 0d66 F0030000 		.4byte	.LASF111
 4082 0d6a 01       		.byte	0x1
 4083 0d6b 36       		.byte	0x36
 4084 0d6c 83000000 		.4byte	0x83
 4085 0d70 05       		.uleb128 0x5
 4086 0d71 03       		.byte	0x3
 4087 0d72 00000000 		.4byte	CySysTickInitVar
 4088 0d76 2D       		.uleb128 0x2d
 4089 0d77 860D0000 		.4byte	0xd86
 4090 0d7b 860D0000 		.4byte	0xd86
 4091 0d7f 2E       		.uleb128 0x2e
 4092 0d80 E0000000 		.4byte	0xe0
 4093 0d84 2D       		.byte	0x2d
 4094 0d85 00       		.byte	0
 4095 0d86 38       		.uleb128 0x38
 4096 0d87 6B000000 		.4byte	0x6b
 4097 0d8b 37       		.uleb128 0x37
 4098 0d8c EF040000 		.4byte	.LASF112
 4099 0d90 01       		.byte	0x1
 4100 0d91 3B       		.byte	0x3b
 4101 0d92 9C0D0000 		.4byte	0xd9c
 4102 0d96 05       		.uleb128 0x5
 4103 0d97 03       		.byte	0x3
 4104 0d98 00000000 		.4byte	cyImoFreqMhz2Reg
 4105 0d9c 38       		.uleb128 0x38
 4106 0d9d 760D0000 		.4byte	0xd76
 4107 0da1 37       		.uleb128 0x37
 4108 0da2 38000000 		.4byte	.LASF113
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 135


 4109 0da6 01       		.byte	0x1
 4110 0da7 51       		.byte	0x51
 4111 0da8 83000000 		.4byte	0x83
 4112 0dac 05       		.uleb128 0x5
 4113 0dad 03       		.byte	0x3
 4114 0dae 00000000 		.4byte	CySysClkPumpConfig
 4115 0db2 39       		.uleb128 0x39
 4116 0db3 BD020000 		.4byte	.LASF114
 4117 0db7 BD020000 		.4byte	.LASF114
 4118 0dbb 03       		.byte	0x3
 4119 0dbc E5       		.byte	0xe5
 4120 0dbd 39       		.uleb128 0x39
 4121 0dbe 37050000 		.4byte	.LASF115
 4122 0dc2 37050000 		.4byte	.LASF115
 4123 0dc6 03       		.byte	0x3
 4124 0dc7 E6       		.byte	0xe6
 4125 0dc8 39       		.uleb128 0x39
 4126 0dc9 BC050000 		.4byte	.LASF116
 4127 0dcd BC050000 		.4byte	.LASF116
 4128 0dd1 03       		.byte	0x3
 4129 0dd2 DC       		.byte	0xdc
 4130 0dd3 39       		.uleb128 0x39
 4131 0dd4 8F070000 		.4byte	.LASF117
 4132 0dd8 8F070000 		.4byte	.LASF117
 4133 0ddc 04       		.byte	0x4
 4134 0ddd 52       		.byte	0x52
 4135 0dde 39       		.uleb128 0x39
 4136 0ddf 37070000 		.4byte	.LASF118
 4137 0de3 37070000 		.4byte	.LASF118
 4138 0de7 05       		.byte	0x5
 4139 0de8 54       		.byte	0x54
 4140 0de9 00       		.byte	0
 4141              		.section	.debug_abbrev,"",%progbits
 4142              	.Ldebug_abbrev0:
 4143 0000 01       		.uleb128 0x1
 4144 0001 11       		.uleb128 0x11
 4145 0002 01       		.byte	0x1
 4146 0003 25       		.uleb128 0x25
 4147 0004 0E       		.uleb128 0xe
 4148 0005 13       		.uleb128 0x13
 4149 0006 0B       		.uleb128 0xb
 4150 0007 03       		.uleb128 0x3
 4151 0008 0E       		.uleb128 0xe
 4152 0009 1B       		.uleb128 0x1b
 4153 000a 0E       		.uleb128 0xe
 4154 000b 55       		.uleb128 0x55
 4155 000c 17       		.uleb128 0x17
 4156 000d 11       		.uleb128 0x11
 4157 000e 01       		.uleb128 0x1
 4158 000f 10       		.uleb128 0x10
 4159 0010 17       		.uleb128 0x17
 4160 0011 00       		.byte	0
 4161 0012 00       		.byte	0
 4162 0013 02       		.uleb128 0x2
 4163 0014 24       		.uleb128 0x24
 4164 0015 00       		.byte	0
 4165 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 136


 4166 0017 0B       		.uleb128 0xb
 4167 0018 3E       		.uleb128 0x3e
 4168 0019 0B       		.uleb128 0xb
 4169 001a 03       		.uleb128 0x3
 4170 001b 0E       		.uleb128 0xe
 4171 001c 00       		.byte	0
 4172 001d 00       		.byte	0
 4173 001e 03       		.uleb128 0x3
 4174 001f 24       		.uleb128 0x24
 4175 0020 00       		.byte	0
 4176 0021 0B       		.uleb128 0xb
 4177 0022 0B       		.uleb128 0xb
 4178 0023 3E       		.uleb128 0x3e
 4179 0024 0B       		.uleb128 0xb
 4180 0025 03       		.uleb128 0x3
 4181 0026 08       		.uleb128 0x8
 4182 0027 00       		.byte	0
 4183 0028 00       		.byte	0
 4184 0029 04       		.uleb128 0x4
 4185 002a 16       		.uleb128 0x16
 4186 002b 00       		.byte	0
 4187 002c 03       		.uleb128 0x3
 4188 002d 0E       		.uleb128 0xe
 4189 002e 3A       		.uleb128 0x3a
 4190 002f 0B       		.uleb128 0xb
 4191 0030 3B       		.uleb128 0x3b
 4192 0031 05       		.uleb128 0x5
 4193 0032 49       		.uleb128 0x49
 4194 0033 13       		.uleb128 0x13
 4195 0034 00       		.byte	0
 4196 0035 00       		.byte	0
 4197 0036 05       		.uleb128 0x5
 4198 0037 35       		.uleb128 0x35
 4199 0038 00       		.byte	0
 4200 0039 49       		.uleb128 0x49
 4201 003a 13       		.uleb128 0x13
 4202 003b 00       		.byte	0
 4203 003c 00       		.byte	0
 4204 003d 06       		.uleb128 0x6
 4205 003e 0F       		.uleb128 0xf
 4206 003f 00       		.byte	0
 4207 0040 0B       		.uleb128 0xb
 4208 0041 0B       		.uleb128 0xb
 4209 0042 49       		.uleb128 0x49
 4210 0043 13       		.uleb128 0x13
 4211 0044 00       		.byte	0
 4212 0045 00       		.byte	0
 4213 0046 07       		.uleb128 0x7
 4214 0047 15       		.uleb128 0x15
 4215 0048 00       		.byte	0
 4216 0049 27       		.uleb128 0x27
 4217 004a 19       		.uleb128 0x19
 4218 004b 00       		.byte	0
 4219 004c 00       		.byte	0
 4220 004d 08       		.uleb128 0x8
 4221 004e 16       		.uleb128 0x16
 4222 004f 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 137


 4223 0050 03       		.uleb128 0x3
 4224 0051 0E       		.uleb128 0xe
 4225 0052 3A       		.uleb128 0x3a
 4226 0053 0B       		.uleb128 0xb
 4227 0054 3B       		.uleb128 0x3b
 4228 0055 0B       		.uleb128 0xb
 4229 0056 49       		.uleb128 0x49
 4230 0057 13       		.uleb128 0x13
 4231 0058 00       		.byte	0
 4232 0059 00       		.byte	0
 4233 005a 09       		.uleb128 0x9
 4234 005b 2E       		.uleb128 0x2e
 4235 005c 01       		.byte	0x1
 4236 005d 3F       		.uleb128 0x3f
 4237 005e 19       		.uleb128 0x19
 4238 005f 03       		.uleb128 0x3
 4239 0060 0E       		.uleb128 0xe
 4240 0061 3A       		.uleb128 0x3a
 4241 0062 0B       		.uleb128 0xb
 4242 0063 3B       		.uleb128 0x3b
 4243 0064 0B       		.uleb128 0xb
 4244 0065 27       		.uleb128 0x27
 4245 0066 19       		.uleb128 0x19
 4246 0067 20       		.uleb128 0x20
 4247 0068 0B       		.uleb128 0xb
 4248 0069 01       		.uleb128 0x1
 4249 006a 13       		.uleb128 0x13
 4250 006b 00       		.byte	0
 4251 006c 00       		.byte	0
 4252 006d 0A       		.uleb128 0xa
 4253 006e 34       		.uleb128 0x34
 4254 006f 00       		.byte	0
 4255 0070 03       		.uleb128 0x3
 4256 0071 08       		.uleb128 0x8
 4257 0072 3A       		.uleb128 0x3a
 4258 0073 0B       		.uleb128 0xb
 4259 0074 3B       		.uleb128 0x3b
 4260 0075 0B       		.uleb128 0xb
 4261 0076 49       		.uleb128 0x49
 4262 0077 13       		.uleb128 0x13
 4263 0078 00       		.byte	0
 4264 0079 00       		.byte	0
 4265 007a 0B       		.uleb128 0xb
 4266 007b 34       		.uleb128 0x34
 4267 007c 00       		.byte	0
 4268 007d 03       		.uleb128 0x3
 4269 007e 0E       		.uleb128 0xe
 4270 007f 3A       		.uleb128 0x3a
 4271 0080 0B       		.uleb128 0xb
 4272 0081 3B       		.uleb128 0x3b
 4273 0082 0B       		.uleb128 0xb
 4274 0083 49       		.uleb128 0x49
 4275 0084 13       		.uleb128 0x13
 4276 0085 00       		.byte	0
 4277 0086 00       		.byte	0
 4278 0087 0C       		.uleb128 0xc
 4279 0088 2E       		.uleb128 0x2e
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 138


 4280 0089 00       		.byte	0
 4281 008a 3F       		.uleb128 0x3f
 4282 008b 19       		.uleb128 0x19
 4283 008c 03       		.uleb128 0x3
 4284 008d 0E       		.uleb128 0xe
 4285 008e 3A       		.uleb128 0x3a
 4286 008f 0B       		.uleb128 0xb
 4287 0090 3B       		.uleb128 0x3b
 4288 0091 05       		.uleb128 0x5
 4289 0092 27       		.uleb128 0x27
 4290 0093 19       		.uleb128 0x19
 4291 0094 20       		.uleb128 0x20
 4292 0095 0B       		.uleb128 0xb
 4293 0096 00       		.byte	0
 4294 0097 00       		.byte	0
 4295 0098 0D       		.uleb128 0xd
 4296 0099 2E       		.uleb128 0x2e
 4297 009a 01       		.byte	0x1
 4298 009b 3F       		.uleb128 0x3f
 4299 009c 19       		.uleb128 0x19
 4300 009d 03       		.uleb128 0x3
 4301 009e 0E       		.uleb128 0xe
 4302 009f 3A       		.uleb128 0x3a
 4303 00a0 0B       		.uleb128 0xb
 4304 00a1 3B       		.uleb128 0x3b
 4305 00a2 05       		.uleb128 0x5
 4306 00a3 27       		.uleb128 0x27
 4307 00a4 19       		.uleb128 0x19
 4308 00a5 20       		.uleb128 0x20
 4309 00a6 0B       		.uleb128 0xb
 4310 00a7 01       		.uleb128 0x1
 4311 00a8 13       		.uleb128 0x13
 4312 00a9 00       		.byte	0
 4313 00aa 00       		.byte	0
 4314 00ab 0E       		.uleb128 0xe
 4315 00ac 05       		.uleb128 0x5
 4316 00ad 00       		.byte	0
 4317 00ae 03       		.uleb128 0x3
 4318 00af 0E       		.uleb128 0xe
 4319 00b0 3A       		.uleb128 0x3a
 4320 00b1 0B       		.uleb128 0xb
 4321 00b2 3B       		.uleb128 0x3b
 4322 00b3 05       		.uleb128 0x5
 4323 00b4 49       		.uleb128 0x49
 4324 00b5 13       		.uleb128 0x13
 4325 00b6 00       		.byte	0
 4326 00b7 00       		.byte	0
 4327 00b8 0F       		.uleb128 0xf
 4328 00b9 2E       		.uleb128 0x2e
 4329 00ba 01       		.byte	0x1
 4330 00bb 03       		.uleb128 0x3
 4331 00bc 0E       		.uleb128 0xe
 4332 00bd 3A       		.uleb128 0x3a
 4333 00be 0B       		.uleb128 0xb
 4334 00bf 3B       		.uleb128 0x3b
 4335 00c0 05       		.uleb128 0x5
 4336 00c1 27       		.uleb128 0x27
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 139


 4337 00c2 19       		.uleb128 0x19
 4338 00c3 20       		.uleb128 0x20
 4339 00c4 0B       		.uleb128 0xb
 4340 00c5 01       		.uleb128 0x1
 4341 00c6 13       		.uleb128 0x13
 4342 00c7 00       		.byte	0
 4343 00c8 00       		.byte	0
 4344 00c9 10       		.uleb128 0x10
 4345 00ca 34       		.uleb128 0x34
 4346 00cb 00       		.byte	0
 4347 00cc 03       		.uleb128 0x3
 4348 00cd 08       		.uleb128 0x8
 4349 00ce 3A       		.uleb128 0x3a
 4350 00cf 0B       		.uleb128 0xb
 4351 00d0 3B       		.uleb128 0x3b
 4352 00d1 05       		.uleb128 0x5
 4353 00d2 49       		.uleb128 0x49
 4354 00d3 13       		.uleb128 0x13
 4355 00d4 00       		.byte	0
 4356 00d5 00       		.byte	0
 4357 00d6 11       		.uleb128 0x11
 4358 00d7 2E       		.uleb128 0x2e
 4359 00d8 01       		.byte	0x1
 4360 00d9 3F       		.uleb128 0x3f
 4361 00da 19       		.uleb128 0x19
 4362 00db 03       		.uleb128 0x3
 4363 00dc 0E       		.uleb128 0xe
 4364 00dd 3A       		.uleb128 0x3a
 4365 00de 0B       		.uleb128 0xb
 4366 00df 3B       		.uleb128 0x3b
 4367 00e0 05       		.uleb128 0x5
 4368 00e1 27       		.uleb128 0x27
 4369 00e2 19       		.uleb128 0x19
 4370 00e3 49       		.uleb128 0x49
 4371 00e4 13       		.uleb128 0x13
 4372 00e5 20       		.uleb128 0x20
 4373 00e6 0B       		.uleb128 0xb
 4374 00e7 01       		.uleb128 0x1
 4375 00e8 13       		.uleb128 0x13
 4376 00e9 00       		.byte	0
 4377 00ea 00       		.byte	0
 4378 00eb 12       		.uleb128 0x12
 4379 00ec 34       		.uleb128 0x34
 4380 00ed 00       		.byte	0
 4381 00ee 03       		.uleb128 0x3
 4382 00ef 0E       		.uleb128 0xe
 4383 00f0 3A       		.uleb128 0x3a
 4384 00f1 0B       		.uleb128 0xb
 4385 00f2 3B       		.uleb128 0x3b
 4386 00f3 05       		.uleb128 0x5
 4387 00f4 49       		.uleb128 0x49
 4388 00f5 13       		.uleb128 0x13
 4389 00f6 00       		.byte	0
 4390 00f7 00       		.byte	0
 4391 00f8 13       		.uleb128 0x13
 4392 00f9 2E       		.uleb128 0x2e
 4393 00fa 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 140


 4394 00fb 3F       		.uleb128 0x3f
 4395 00fc 19       		.uleb128 0x19
 4396 00fd 03       		.uleb128 0x3
 4397 00fe 0E       		.uleb128 0xe
 4398 00ff 3A       		.uleb128 0x3a
 4399 0100 0B       		.uleb128 0xb
 4400 0101 3B       		.uleb128 0x3b
 4401 0102 0B       		.uleb128 0xb
 4402 0103 27       		.uleb128 0x27
 4403 0104 19       		.uleb128 0x19
 4404 0105 11       		.uleb128 0x11
 4405 0106 01       		.uleb128 0x1
 4406 0107 12       		.uleb128 0x12
 4407 0108 06       		.uleb128 0x6
 4408 0109 40       		.uleb128 0x40
 4409 010a 18       		.uleb128 0x18
 4410 010b 9742     		.uleb128 0x2117
 4411 010d 19       		.uleb128 0x19
 4412 010e 00       		.byte	0
 4413 010f 00       		.byte	0
 4414 0110 14       		.uleb128 0x14
 4415 0111 2E       		.uleb128 0x2e
 4416 0112 01       		.byte	0x1
 4417 0113 3F       		.uleb128 0x3f
 4418 0114 19       		.uleb128 0x19
 4419 0115 03       		.uleb128 0x3
 4420 0116 0E       		.uleb128 0xe
 4421 0117 3A       		.uleb128 0x3a
 4422 0118 0B       		.uleb128 0xb
 4423 0119 3B       		.uleb128 0x3b
 4424 011a 05       		.uleb128 0x5
 4425 011b 27       		.uleb128 0x27
 4426 011c 19       		.uleb128 0x19
 4427 011d 11       		.uleb128 0x11
 4428 011e 01       		.uleb128 0x1
 4429 011f 12       		.uleb128 0x12
 4430 0120 06       		.uleb128 0x6
 4431 0121 40       		.uleb128 0x40
 4432 0122 18       		.uleb128 0x18
 4433 0123 9742     		.uleb128 0x2117
 4434 0125 19       		.uleb128 0x19
 4435 0126 01       		.uleb128 0x1
 4436 0127 13       		.uleb128 0x13
 4437 0128 00       		.byte	0
 4438 0129 00       		.byte	0
 4439 012a 15       		.uleb128 0x15
 4440 012b 34       		.uleb128 0x34
 4441 012c 00       		.byte	0
 4442 012d 03       		.uleb128 0x3
 4443 012e 08       		.uleb128 0x8
 4444 012f 3A       		.uleb128 0x3a
 4445 0130 0B       		.uleb128 0xb
 4446 0131 3B       		.uleb128 0x3b
 4447 0132 05       		.uleb128 0x5
 4448 0133 49       		.uleb128 0x49
 4449 0134 13       		.uleb128 0x13
 4450 0135 02       		.uleb128 0x2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 141


 4451 0136 17       		.uleb128 0x17
 4452 0137 00       		.byte	0
 4453 0138 00       		.byte	0
 4454 0139 16       		.uleb128 0x16
 4455 013a 34       		.uleb128 0x34
 4456 013b 00       		.byte	0
 4457 013c 03       		.uleb128 0x3
 4458 013d 0E       		.uleb128 0xe
 4459 013e 3A       		.uleb128 0x3a
 4460 013f 0B       		.uleb128 0xb
 4461 0140 3B       		.uleb128 0x3b
 4462 0141 05       		.uleb128 0x5
 4463 0142 49       		.uleb128 0x49
 4464 0143 13       		.uleb128 0x13
 4465 0144 02       		.uleb128 0x2
 4466 0145 17       		.uleb128 0x17
 4467 0146 00       		.byte	0
 4468 0147 00       		.byte	0
 4469 0148 17       		.uleb128 0x17
 4470 0149 2E       		.uleb128 0x2e
 4471 014a 01       		.byte	0x1
 4472 014b 3F       		.uleb128 0x3f
 4473 014c 19       		.uleb128 0x19
 4474 014d 03       		.uleb128 0x3
 4475 014e 0E       		.uleb128 0xe
 4476 014f 3A       		.uleb128 0x3a
 4477 0150 0B       		.uleb128 0xb
 4478 0151 3B       		.uleb128 0x3b
 4479 0152 0B       		.uleb128 0xb
 4480 0153 27       		.uleb128 0x27
 4481 0154 19       		.uleb128 0x19
 4482 0155 11       		.uleb128 0x11
 4483 0156 01       		.uleb128 0x1
 4484 0157 12       		.uleb128 0x12
 4485 0158 06       		.uleb128 0x6
 4486 0159 40       		.uleb128 0x40
 4487 015a 18       		.uleb128 0x18
 4488 015b 9742     		.uleb128 0x2117
 4489 015d 19       		.uleb128 0x19
 4490 015e 01       		.uleb128 0x1
 4491 015f 13       		.uleb128 0x13
 4492 0160 00       		.byte	0
 4493 0161 00       		.byte	0
 4494 0162 18       		.uleb128 0x18
 4495 0163 898201   		.uleb128 0x4109
 4496 0166 00       		.byte	0
 4497 0167 11       		.uleb128 0x11
 4498 0168 01       		.uleb128 0x1
 4499 0169 31       		.uleb128 0x31
 4500 016a 13       		.uleb128 0x13
 4501 016b 00       		.byte	0
 4502 016c 00       		.byte	0
 4503 016d 19       		.uleb128 0x19
 4504 016e 2E       		.uleb128 0x2e
 4505 016f 00       		.byte	0
 4506 0170 3F       		.uleb128 0x3f
 4507 0171 19       		.uleb128 0x19
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 142


 4508 0172 03       		.uleb128 0x3
 4509 0173 0E       		.uleb128 0xe
 4510 0174 3A       		.uleb128 0x3a
 4511 0175 0B       		.uleb128 0xb
 4512 0176 3B       		.uleb128 0x3b
 4513 0177 05       		.uleb128 0x5
 4514 0178 27       		.uleb128 0x27
 4515 0179 19       		.uleb128 0x19
 4516 017a 49       		.uleb128 0x49
 4517 017b 13       		.uleb128 0x13
 4518 017c 11       		.uleb128 0x11
 4519 017d 01       		.uleb128 0x1
 4520 017e 12       		.uleb128 0x12
 4521 017f 06       		.uleb128 0x6
 4522 0180 40       		.uleb128 0x40
 4523 0181 18       		.uleb128 0x18
 4524 0182 9742     		.uleb128 0x2117
 4525 0184 19       		.uleb128 0x19
 4526 0185 00       		.byte	0
 4527 0186 00       		.byte	0
 4528 0187 1A       		.uleb128 0x1a
 4529 0188 05       		.uleb128 0x5
 4530 0189 00       		.byte	0
 4531 018a 03       		.uleb128 0x3
 4532 018b 0E       		.uleb128 0xe
 4533 018c 3A       		.uleb128 0x3a
 4534 018d 0B       		.uleb128 0xb
 4535 018e 3B       		.uleb128 0x3b
 4536 018f 05       		.uleb128 0x5
 4537 0190 49       		.uleb128 0x49
 4538 0191 13       		.uleb128 0x13
 4539 0192 02       		.uleb128 0x2
 4540 0193 17       		.uleb128 0x17
 4541 0194 00       		.byte	0
 4542 0195 00       		.byte	0
 4543 0196 1B       		.uleb128 0x1b
 4544 0197 05       		.uleb128 0x5
 4545 0198 00       		.byte	0
 4546 0199 03       		.uleb128 0x3
 4547 019a 0E       		.uleb128 0xe
 4548 019b 3A       		.uleb128 0x3a
 4549 019c 0B       		.uleb128 0xb
 4550 019d 3B       		.uleb128 0x3b
 4551 019e 05       		.uleb128 0x5
 4552 019f 49       		.uleb128 0x49
 4553 01a0 13       		.uleb128 0x13
 4554 01a1 02       		.uleb128 0x2
 4555 01a2 18       		.uleb128 0x18
 4556 01a3 00       		.byte	0
 4557 01a4 00       		.byte	0
 4558 01a5 1C       		.uleb128 0x1c
 4559 01a6 2E       		.uleb128 0x2e
 4560 01a7 01       		.byte	0x1
 4561 01a8 3F       		.uleb128 0x3f
 4562 01a9 19       		.uleb128 0x19
 4563 01aa 03       		.uleb128 0x3
 4564 01ab 0E       		.uleb128 0xe
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 143


 4565 01ac 3A       		.uleb128 0x3a
 4566 01ad 0B       		.uleb128 0xb
 4567 01ae 3B       		.uleb128 0x3b
 4568 01af 05       		.uleb128 0x5
 4569 01b0 27       		.uleb128 0x27
 4570 01b1 19       		.uleb128 0x19
 4571 01b2 49       		.uleb128 0x49
 4572 01b3 13       		.uleb128 0x13
 4573 01b4 11       		.uleb128 0x11
 4574 01b5 01       		.uleb128 0x1
 4575 01b6 12       		.uleb128 0x12
 4576 01b7 06       		.uleb128 0x6
 4577 01b8 40       		.uleb128 0x40
 4578 01b9 18       		.uleb128 0x18
 4579 01ba 9742     		.uleb128 0x2117
 4580 01bc 19       		.uleb128 0x19
 4581 01bd 01       		.uleb128 0x1
 4582 01be 13       		.uleb128 0x13
 4583 01bf 00       		.byte	0
 4584 01c0 00       		.byte	0
 4585 01c1 1D       		.uleb128 0x1d
 4586 01c2 2E       		.uleb128 0x2e
 4587 01c3 00       		.byte	0
 4588 01c4 3F       		.uleb128 0x3f
 4589 01c5 19       		.uleb128 0x19
 4590 01c6 03       		.uleb128 0x3
 4591 01c7 0E       		.uleb128 0xe
 4592 01c8 3A       		.uleb128 0x3a
 4593 01c9 0B       		.uleb128 0xb
 4594 01ca 3B       		.uleb128 0x3b
 4595 01cb 05       		.uleb128 0x5
 4596 01cc 27       		.uleb128 0x27
 4597 01cd 19       		.uleb128 0x19
 4598 01ce 11       		.uleb128 0x11
 4599 01cf 01       		.uleb128 0x1
 4600 01d0 12       		.uleb128 0x12
 4601 01d1 06       		.uleb128 0x6
 4602 01d2 40       		.uleb128 0x40
 4603 01d3 18       		.uleb128 0x18
 4604 01d4 9742     		.uleb128 0x2117
 4605 01d6 19       		.uleb128 0x19
 4606 01d7 00       		.byte	0
 4607 01d8 00       		.byte	0
 4608 01d9 1E       		.uleb128 0x1e
 4609 01da 2E       		.uleb128 0x2e
 4610 01db 00       		.byte	0
 4611 01dc 31       		.uleb128 0x31
 4612 01dd 13       		.uleb128 0x13
 4613 01de 11       		.uleb128 0x11
 4614 01df 01       		.uleb128 0x1
 4615 01e0 12       		.uleb128 0x12
 4616 01e1 06       		.uleb128 0x6
 4617 01e2 40       		.uleb128 0x40
 4618 01e3 18       		.uleb128 0x18
 4619 01e4 9742     		.uleb128 0x2117
 4620 01e6 19       		.uleb128 0x19
 4621 01e7 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 144


 4622 01e8 00       		.byte	0
 4623 01e9 1F       		.uleb128 0x1f
 4624 01ea 34       		.uleb128 0x34
 4625 01eb 00       		.byte	0
 4626 01ec 03       		.uleb128 0x3
 4627 01ed 0E       		.uleb128 0xe
 4628 01ee 3A       		.uleb128 0x3a
 4629 01ef 0B       		.uleb128 0xb
 4630 01f0 3B       		.uleb128 0x3b
 4631 01f1 05       		.uleb128 0x5
 4632 01f2 49       		.uleb128 0x49
 4633 01f3 13       		.uleb128 0x13
 4634 01f4 02       		.uleb128 0x2
 4635 01f5 18       		.uleb128 0x18
 4636 01f6 00       		.byte	0
 4637 01f7 00       		.byte	0
 4638 01f8 20       		.uleb128 0x20
 4639 01f9 2E       		.uleb128 0x2e
 4640 01fa 01       		.byte	0x1
 4641 01fb 31       		.uleb128 0x31
 4642 01fc 13       		.uleb128 0x13
 4643 01fd 11       		.uleb128 0x11
 4644 01fe 01       		.uleb128 0x1
 4645 01ff 12       		.uleb128 0x12
 4646 0200 06       		.uleb128 0x6
 4647 0201 40       		.uleb128 0x40
 4648 0202 18       		.uleb128 0x18
 4649 0203 9742     		.uleb128 0x2117
 4650 0205 19       		.uleb128 0x19
 4651 0206 01       		.uleb128 0x1
 4652 0207 13       		.uleb128 0x13
 4653 0208 00       		.byte	0
 4654 0209 00       		.byte	0
 4655 020a 21       		.uleb128 0x21
 4656 020b 05       		.uleb128 0x5
 4657 020c 00       		.byte	0
 4658 020d 31       		.uleb128 0x31
 4659 020e 13       		.uleb128 0x13
 4660 020f 02       		.uleb128 0x2
 4661 0210 17       		.uleb128 0x17
 4662 0211 00       		.byte	0
 4663 0212 00       		.byte	0
 4664 0213 22       		.uleb128 0x22
 4665 0214 05       		.uleb128 0x5
 4666 0215 00       		.byte	0
 4667 0216 31       		.uleb128 0x31
 4668 0217 13       		.uleb128 0x13
 4669 0218 02       		.uleb128 0x2
 4670 0219 18       		.uleb128 0x18
 4671 021a 00       		.byte	0
 4672 021b 00       		.byte	0
 4673 021c 23       		.uleb128 0x23
 4674 021d 34       		.uleb128 0x34
 4675 021e 00       		.byte	0
 4676 021f 31       		.uleb128 0x31
 4677 0220 13       		.uleb128 0x13
 4678 0221 02       		.uleb128 0x2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 145


 4679 0222 18       		.uleb128 0x18
 4680 0223 00       		.byte	0
 4681 0224 00       		.byte	0
 4682 0225 24       		.uleb128 0x24
 4683 0226 34       		.uleb128 0x34
 4684 0227 00       		.byte	0
 4685 0228 31       		.uleb128 0x31
 4686 0229 13       		.uleb128 0x13
 4687 022a 1C       		.uleb128 0x1c
 4688 022b 06       		.uleb128 0x6
 4689 022c 00       		.byte	0
 4690 022d 00       		.byte	0
 4691 022e 25       		.uleb128 0x25
 4692 022f 34       		.uleb128 0x34
 4693 0230 00       		.byte	0
 4694 0231 03       		.uleb128 0x3
 4695 0232 0E       		.uleb128 0xe
 4696 0233 3A       		.uleb128 0x3a
 4697 0234 0B       		.uleb128 0xb
 4698 0235 3B       		.uleb128 0x3b
 4699 0236 05       		.uleb128 0x5
 4700 0237 49       		.uleb128 0x49
 4701 0238 13       		.uleb128 0x13
 4702 0239 1C       		.uleb128 0x1c
 4703 023a 06       		.uleb128 0x6
 4704 023b 00       		.byte	0
 4705 023c 00       		.byte	0
 4706 023d 26       		.uleb128 0x26
 4707 023e 34       		.uleb128 0x34
 4708 023f 00       		.byte	0
 4709 0240 31       		.uleb128 0x31
 4710 0241 13       		.uleb128 0x13
 4711 0242 00       		.byte	0
 4712 0243 00       		.byte	0
 4713 0244 27       		.uleb128 0x27
 4714 0245 34       		.uleb128 0x34
 4715 0246 00       		.byte	0
 4716 0247 31       		.uleb128 0x31
 4717 0248 13       		.uleb128 0x13
 4718 0249 1C       		.uleb128 0x1c
 4719 024a 0B       		.uleb128 0xb
 4720 024b 00       		.byte	0
 4721 024c 00       		.byte	0
 4722 024d 28       		.uleb128 0x28
 4723 024e 0B       		.uleb128 0xb
 4724 024f 01       		.byte	0x1
 4725 0250 11       		.uleb128 0x11
 4726 0251 01       		.uleb128 0x1
 4727 0252 12       		.uleb128 0x12
 4728 0253 06       		.uleb128 0x6
 4729 0254 01       		.uleb128 0x1
 4730 0255 13       		.uleb128 0x13
 4731 0256 00       		.byte	0
 4732 0257 00       		.byte	0
 4733 0258 29       		.uleb128 0x29
 4734 0259 34       		.uleb128 0x34
 4735 025a 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 146


 4736 025b 31       		.uleb128 0x31
 4737 025c 13       		.uleb128 0x13
 4738 025d 02       		.uleb128 0x2
 4739 025e 17       		.uleb128 0x17
 4740 025f 00       		.byte	0
 4741 0260 00       		.byte	0
 4742 0261 2A       		.uleb128 0x2a
 4743 0262 898201   		.uleb128 0x4109
 4744 0265 01       		.byte	0x1
 4745 0266 11       		.uleb128 0x11
 4746 0267 01       		.uleb128 0x1
 4747 0268 31       		.uleb128 0x31
 4748 0269 13       		.uleb128 0x13
 4749 026a 01       		.uleb128 0x1
 4750 026b 13       		.uleb128 0x13
 4751 026c 00       		.byte	0
 4752 026d 00       		.byte	0
 4753 026e 2B       		.uleb128 0x2b
 4754 026f 8A8201   		.uleb128 0x410a
 4755 0272 00       		.byte	0
 4756 0273 02       		.uleb128 0x2
 4757 0274 18       		.uleb128 0x18
 4758 0275 9142     		.uleb128 0x2111
 4759 0277 18       		.uleb128 0x18
 4760 0278 00       		.byte	0
 4761 0279 00       		.byte	0
 4762 027a 2C       		.uleb128 0x2c
 4763 027b 898201   		.uleb128 0x4109
 4764 027e 01       		.byte	0x1
 4765 027f 11       		.uleb128 0x11
 4766 0280 01       		.uleb128 0x1
 4767 0281 31       		.uleb128 0x31
 4768 0282 13       		.uleb128 0x13
 4769 0283 00       		.byte	0
 4770 0284 00       		.byte	0
 4771 0285 2D       		.uleb128 0x2d
 4772 0286 01       		.uleb128 0x1
 4773 0287 01       		.byte	0x1
 4774 0288 49       		.uleb128 0x49
 4775 0289 13       		.uleb128 0x13
 4776 028a 01       		.uleb128 0x1
 4777 028b 13       		.uleb128 0x13
 4778 028c 00       		.byte	0
 4779 028d 00       		.byte	0
 4780 028e 2E       		.uleb128 0x2e
 4781 028f 21       		.uleb128 0x21
 4782 0290 00       		.byte	0
 4783 0291 49       		.uleb128 0x49
 4784 0292 13       		.uleb128 0x13
 4785 0293 2F       		.uleb128 0x2f
 4786 0294 0B       		.uleb128 0xb
 4787 0295 00       		.byte	0
 4788 0296 00       		.byte	0
 4789 0297 2F       		.uleb128 0x2f
 4790 0298 1D       		.uleb128 0x1d
 4791 0299 00       		.byte	0
 4792 029a 31       		.uleb128 0x31
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 147


 4793 029b 13       		.uleb128 0x13
 4794 029c 52       		.uleb128 0x52
 4795 029d 01       		.uleb128 0x1
 4796 029e 55       		.uleb128 0x55
 4797 029f 17       		.uleb128 0x17
 4798 02a0 58       		.uleb128 0x58
 4799 02a1 0B       		.uleb128 0xb
 4800 02a2 59       		.uleb128 0x59
 4801 02a3 05       		.uleb128 0x5
 4802 02a4 00       		.byte	0
 4803 02a5 00       		.byte	0
 4804 02a6 30       		.uleb128 0x30
 4805 02a7 2E       		.uleb128 0x2e
 4806 02a8 01       		.byte	0x1
 4807 02a9 3F       		.uleb128 0x3f
 4808 02aa 19       		.uleb128 0x19
 4809 02ab 03       		.uleb128 0x3
 4810 02ac 0E       		.uleb128 0xe
 4811 02ad 3A       		.uleb128 0x3a
 4812 02ae 0B       		.uleb128 0xb
 4813 02af 3B       		.uleb128 0x3b
 4814 02b0 05       		.uleb128 0x5
 4815 02b1 27       		.uleb128 0x27
 4816 02b2 19       		.uleb128 0x19
 4817 02b3 11       		.uleb128 0x11
 4818 02b4 01       		.uleb128 0x1
 4819 02b5 12       		.uleb128 0x12
 4820 02b6 06       		.uleb128 0x6
 4821 02b7 40       		.uleb128 0x40
 4822 02b8 18       		.uleb128 0x18
 4823 02b9 9642     		.uleb128 0x2116
 4824 02bb 19       		.uleb128 0x19
 4825 02bc 01       		.uleb128 0x1
 4826 02bd 13       		.uleb128 0x13
 4827 02be 00       		.byte	0
 4828 02bf 00       		.byte	0
 4829 02c0 31       		.uleb128 0x31
 4830 02c1 1D       		.uleb128 0x1d
 4831 02c2 01       		.byte	0x1
 4832 02c3 31       		.uleb128 0x31
 4833 02c4 13       		.uleb128 0x13
 4834 02c5 52       		.uleb128 0x52
 4835 02c6 01       		.uleb128 0x1
 4836 02c7 55       		.uleb128 0x55
 4837 02c8 17       		.uleb128 0x17
 4838 02c9 58       		.uleb128 0x58
 4839 02ca 0B       		.uleb128 0xb
 4840 02cb 59       		.uleb128 0x59
 4841 02cc 05       		.uleb128 0x5
 4842 02cd 01       		.uleb128 0x1
 4843 02ce 13       		.uleb128 0x13
 4844 02cf 00       		.byte	0
 4845 02d0 00       		.byte	0
 4846 02d1 32       		.uleb128 0x32
 4847 02d2 0B       		.uleb128 0xb
 4848 02d3 01       		.byte	0x1
 4849 02d4 55       		.uleb128 0x55
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 148


 4850 02d5 17       		.uleb128 0x17
 4851 02d6 00       		.byte	0
 4852 02d7 00       		.byte	0
 4853 02d8 33       		.uleb128 0x33
 4854 02d9 1D       		.uleb128 0x1d
 4855 02da 01       		.byte	0x1
 4856 02db 31       		.uleb128 0x31
 4857 02dc 13       		.uleb128 0x13
 4858 02dd 11       		.uleb128 0x11
 4859 02de 01       		.uleb128 0x1
 4860 02df 12       		.uleb128 0x12
 4861 02e0 06       		.uleb128 0x6
 4862 02e1 58       		.uleb128 0x58
 4863 02e2 0B       		.uleb128 0xb
 4864 02e3 59       		.uleb128 0x59
 4865 02e4 05       		.uleb128 0x5
 4866 02e5 01       		.uleb128 0x1
 4867 02e6 13       		.uleb128 0x13
 4868 02e7 00       		.byte	0
 4869 02e8 00       		.byte	0
 4870 02e9 34       		.uleb128 0x34
 4871 02ea 1D       		.uleb128 0x1d
 4872 02eb 00       		.byte	0
 4873 02ec 31       		.uleb128 0x31
 4874 02ed 13       		.uleb128 0x13
 4875 02ee 11       		.uleb128 0x11
 4876 02ef 01       		.uleb128 0x1
 4877 02f0 12       		.uleb128 0x12
 4878 02f1 06       		.uleb128 0x6
 4879 02f2 58       		.uleb128 0x58
 4880 02f3 0B       		.uleb128 0xb
 4881 02f4 59       		.uleb128 0x59
 4882 02f5 05       		.uleb128 0x5
 4883 02f6 00       		.byte	0
 4884 02f7 00       		.byte	0
 4885 02f8 35       		.uleb128 0x35
 4886 02f9 2E       		.uleb128 0x2e
 4887 02fa 01       		.byte	0x1
 4888 02fb 31       		.uleb128 0x31
 4889 02fc 13       		.uleb128 0x13
 4890 02fd 11       		.uleb128 0x11
 4891 02fe 01       		.uleb128 0x1
 4892 02ff 12       		.uleb128 0x12
 4893 0300 06       		.uleb128 0x6
 4894 0301 40       		.uleb128 0x40
 4895 0302 18       		.uleb128 0x18
 4896 0303 9642     		.uleb128 0x2116
 4897 0305 19       		.uleb128 0x19
 4898 0306 01       		.uleb128 0x1
 4899 0307 13       		.uleb128 0x13
 4900 0308 00       		.byte	0
 4901 0309 00       		.byte	0
 4902 030a 36       		.uleb128 0x36
 4903 030b 34       		.uleb128 0x34
 4904 030c 00       		.byte	0
 4905 030d 03       		.uleb128 0x3
 4906 030e 0E       		.uleb128 0xe
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 149


 4907 030f 3A       		.uleb128 0x3a
 4908 0310 0B       		.uleb128 0xb
 4909 0311 3B       		.uleb128 0x3b
 4910 0312 0B       		.uleb128 0xb
 4911 0313 49       		.uleb128 0x49
 4912 0314 13       		.uleb128 0x13
 4913 0315 02       		.uleb128 0x2
 4914 0316 18       		.uleb128 0x18
 4915 0317 00       		.byte	0
 4916 0318 00       		.byte	0
 4917 0319 37       		.uleb128 0x37
 4918 031a 34       		.uleb128 0x34
 4919 031b 00       		.byte	0
 4920 031c 03       		.uleb128 0x3
 4921 031d 0E       		.uleb128 0xe
 4922 031e 3A       		.uleb128 0x3a
 4923 031f 0B       		.uleb128 0xb
 4924 0320 3B       		.uleb128 0x3b
 4925 0321 0B       		.uleb128 0xb
 4926 0322 49       		.uleb128 0x49
 4927 0323 13       		.uleb128 0x13
 4928 0324 3F       		.uleb128 0x3f
 4929 0325 19       		.uleb128 0x19
 4930 0326 02       		.uleb128 0x2
 4931 0327 18       		.uleb128 0x18
 4932 0328 00       		.byte	0
 4933 0329 00       		.byte	0
 4934 032a 38       		.uleb128 0x38
 4935 032b 26       		.uleb128 0x26
 4936 032c 00       		.byte	0
 4937 032d 49       		.uleb128 0x49
 4938 032e 13       		.uleb128 0x13
 4939 032f 00       		.byte	0
 4940 0330 00       		.byte	0
 4941 0331 39       		.uleb128 0x39
 4942 0332 2E       		.uleb128 0x2e
 4943 0333 00       		.byte	0
 4944 0334 3F       		.uleb128 0x3f
 4945 0335 19       		.uleb128 0x19
 4946 0336 3C       		.uleb128 0x3c
 4947 0337 19       		.uleb128 0x19
 4948 0338 6E       		.uleb128 0x6e
 4949 0339 0E       		.uleb128 0xe
 4950 033a 03       		.uleb128 0x3
 4951 033b 0E       		.uleb128 0xe
 4952 033c 3A       		.uleb128 0x3a
 4953 033d 0B       		.uleb128 0xb
 4954 033e 3B       		.uleb128 0x3b
 4955 033f 0B       		.uleb128 0xb
 4956 0340 00       		.byte	0
 4957 0341 00       		.byte	0
 4958 0342 00       		.byte	0
 4959              		.section	.debug_loc,"",%progbits
 4960              	.Ldebug_loc0:
 4961              	.LLST0:
 4962 0000 00000000 		.4byte	.LVL0
 4963 0004 0A000000 		.4byte	.LVL1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 150


 4964 0008 0200     		.2byte	0x2
 4965 000a 30       		.byte	0x30
 4966 000b 9F       		.byte	0x9f
 4967 000c 0A000000 		.4byte	.LVL1
 4968 0010 16000000 		.4byte	.LVL2
 4969 0014 0100     		.2byte	0x1
 4970 0016 53       		.byte	0x53
 4971 0017 16000000 		.4byte	.LVL2
 4972 001b 18000000 		.4byte	.LVL3
 4973 001f 0300     		.2byte	0x3
 4974 0021 73       		.byte	0x73
 4975 0022 7D       		.sleb128 -3
 4976 0023 9F       		.byte	0x9f
 4977 0024 18000000 		.4byte	.LVL3
 4978 0028 20000000 		.4byte	.LVL5
 4979 002c 0100     		.2byte	0x1
 4980 002e 53       		.byte	0x53
 4981 002f 00000000 		.4byte	0
 4982 0033 00000000 		.4byte	0
 4983              	.LLST1:
 4984 0037 00000000 		.4byte	.LVL0
 4985 003b 16000000 		.4byte	.LVL2
 4986 003f 0200     		.2byte	0x2
 4987 0041 33       		.byte	0x33
 4988 0042 9F       		.byte	0x9f
 4989 0043 16000000 		.4byte	.LVL2
 4990 0047 18000000 		.4byte	.LVL3
 4991 004b 0100     		.2byte	0x1
 4992 004d 53       		.byte	0x53
 4993 004e 18000000 		.4byte	.LVL3
 4994 0052 20000000 		.4byte	.LVL5
 4995 0056 0200     		.2byte	0x2
 4996 0058 33       		.byte	0x33
 4997 0059 9F       		.byte	0x9f
 4998 005a 20000000 		.4byte	.LVL5
 4999 005e 2E000000 		.4byte	.LVL6
 5000 0062 0100     		.2byte	0x1
 5001 0064 53       		.byte	0x53
 5002 0065 2E000000 		.4byte	.LVL6
 5003 0069 30000000 		.4byte	.LVL7
 5004 006d 0700     		.2byte	0x7
 5005 006f 73       		.byte	0x73
 5006 0070 B39C8080 		.sleb128 -268431821
 5006      7F
 5007 0075 9F       		.byte	0x9f
 5008 0076 00000000 		.4byte	0
 5009 007a 00000000 		.4byte	0
 5010              	.LLST2:
 5011 007e 00000000 		.4byte	.LVL9
 5012 0082 07000000 		.4byte	.LVL10-1
 5013 0086 0100     		.2byte	0x1
 5014 0088 50       		.byte	0x50
 5015 0089 07000000 		.4byte	.LVL10-1
 5016 008d 1A000000 		.4byte	.LVL14
 5017 0091 0100     		.2byte	0x1
 5018 0093 54       		.byte	0x54
 5019 0094 1A000000 		.4byte	.LVL14
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 151


 5020 0098 20000000 		.4byte	.LFE6
 5021 009c 0400     		.2byte	0x4
 5022 009e F3       		.byte	0xf3
 5023 009f 01       		.uleb128 0x1
 5024 00a0 50       		.byte	0x50
 5025 00a1 9F       		.byte	0x9f
 5026 00a2 00000000 		.4byte	0
 5027 00a6 00000000 		.4byte	0
 5028              	.LLST3:
 5029 00aa 08000000 		.4byte	.LVL10
 5030 00ae 19000000 		.4byte	.LVL13-1
 5031 00b2 0100     		.2byte	0x1
 5032 00b4 50       		.byte	0x50
 5033 00b5 00000000 		.4byte	0
 5034 00b9 00000000 		.4byte	0
 5035              	.LLST4:
 5036 00bd 10000000 		.4byte	.LVL11
 5037 00c1 14000000 		.4byte	.LVL12
 5038 00c5 0100     		.2byte	0x1
 5039 00c7 52       		.byte	0x52
 5040 00c8 14000000 		.4byte	.LVL12
 5041 00cc 19000000 		.4byte	.LVL13-1
 5042 00d0 0100     		.2byte	0x1
 5043 00d2 53       		.byte	0x53
 5044 00d3 00000000 		.4byte	0
 5045 00d7 00000000 		.4byte	0
 5046              	.LLST5:
 5047 00db 06000000 		.4byte	.LVL16
 5048 00df 0D000000 		.4byte	.LVL18-1
 5049 00e3 0100     		.2byte	0x1
 5050 00e5 50       		.byte	0x50
 5051 00e6 00000000 		.4byte	0
 5052 00ea 00000000 		.4byte	0
 5053              	.LLST6:
 5054 00ee 0A000000 		.4byte	.LVL17
 5055 00f2 12000000 		.4byte	.LVL19
 5056 00f6 0500     		.2byte	0x5
 5057 00f8 74       		.byte	0x74
 5058 00f9 00       		.sleb128 0
 5059 00fa 37       		.byte	0x37
 5060 00fb 1A       		.byte	0x1a
 5061 00fc 9F       		.byte	0x9f
 5062 00fd 12000000 		.4byte	.LVL19
 5063 0101 18000000 		.4byte	.LFE8
 5064 0105 0100     		.2byte	0x1
 5065 0107 50       		.byte	0x50
 5066 0108 00000000 		.4byte	0
 5067 010c 00000000 		.4byte	0
 5068              	.LLST7:
 5069 0110 00000000 		.4byte	.LVL20
 5070 0114 07000000 		.4byte	.LVL21-1
 5071 0118 0100     		.2byte	0x1
 5072 011a 50       		.byte	0x50
 5073 011b 07000000 		.4byte	.LVL21-1
 5074 011f 0C000000 		.4byte	.LVL22
 5075 0123 0100     		.2byte	0x1
 5076 0125 54       		.byte	0x54
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 152


 5077 0126 0C000000 		.4byte	.LVL22
 5078 012a 2C000000 		.4byte	.LFE9
 5079 012e 0400     		.2byte	0x4
 5080 0130 F3       		.byte	0xf3
 5081 0131 01       		.uleb128 0x1
 5082 0132 50       		.byte	0x50
 5083 0133 9F       		.byte	0x9f
 5084 0134 00000000 		.4byte	0
 5085 0138 00000000 		.4byte	0
 5086              	.LLST8:
 5087 013c 08000000 		.4byte	.LVL21
 5088 0140 21000000 		.4byte	.LVL23-1
 5089 0144 0100     		.2byte	0x1
 5090 0146 50       		.byte	0x50
 5091 0147 00000000 		.4byte	0
 5092 014b 00000000 		.4byte	0
 5093              	.LLST9:
 5094 014f 00000000 		.4byte	.LVL24
 5095 0153 08000000 		.4byte	.LVL25
 5096 0157 0100     		.2byte	0x1
 5097 0159 50       		.byte	0x50
 5098 015a 08000000 		.4byte	.LVL25
 5099 015e 14000000 		.4byte	.LFE15
 5100 0162 0100     		.2byte	0x1
 5101 0164 52       		.byte	0x52
 5102 0165 00000000 		.4byte	0
 5103 0169 00000000 		.4byte	0
 5104              	.LLST10:
 5105 016d 0A000000 		.4byte	.LVL26
 5106 0171 0C000000 		.4byte	.LVL27
 5107 0175 0500     		.2byte	0x5
 5108 0177 70       		.byte	0x70
 5109 0178 00       		.sleb128 0
 5110 0179 49       		.byte	0x49
 5111 017a 1A       		.byte	0x1a
 5112 017b 9F       		.byte	0x9f
 5113 017c 0C000000 		.4byte	.LVL27
 5114 0180 14000000 		.4byte	.LFE15
 5115 0184 0100     		.2byte	0x1
 5116 0186 50       		.byte	0x50
 5117 0187 00000000 		.4byte	0
 5118 018b 00000000 		.4byte	0
 5119              	.LLST11:
 5120 018f 00000000 		.4byte	.LVL30
 5121 0193 04000000 		.4byte	.LVL31
 5122 0197 0100     		.2byte	0x1
 5123 0199 50       		.byte	0x50
 5124 019a 04000000 		.4byte	.LVL31
 5125 019e 0E000000 		.4byte	.LFE18
 5126 01a2 0400     		.2byte	0x4
 5127 01a4 F3       		.byte	0xf3
 5128 01a5 01       		.uleb128 0x1
 5129 01a6 50       		.byte	0x50
 5130 01a7 9F       		.byte	0x9f
 5131 01a8 00000000 		.4byte	0
 5132 01ac 00000000 		.4byte	0
 5133              	.LLST12:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 153


 5134 01b0 00000000 		.4byte	.LVL33
 5135 01b4 04000000 		.4byte	.LVL34
 5136 01b8 0100     		.2byte	0x1
 5137 01ba 50       		.byte	0x50
 5138 01bb 04000000 		.4byte	.LVL34
 5139 01bf 0C000000 		.4byte	.LFE19
 5140 01c3 0400     		.2byte	0x4
 5141 01c5 F3       		.byte	0xf3
 5142 01c6 01       		.uleb128 0x1
 5143 01c7 50       		.byte	0x50
 5144 01c8 9F       		.byte	0x9f
 5145 01c9 00000000 		.4byte	0
 5146 01cd 00000000 		.4byte	0
 5147              	.LLST13:
 5148 01d1 00000000 		.4byte	.LVL35
 5149 01d5 04000000 		.4byte	.LVL36
 5150 01d9 0100     		.2byte	0x1
 5151 01db 50       		.byte	0x50
 5152 01dc 04000000 		.4byte	.LVL36
 5153 01e0 10000000 		.4byte	.LFE20
 5154 01e4 0400     		.2byte	0x4
 5155 01e6 F3       		.byte	0xf3
 5156 01e7 01       		.uleb128 0x1
 5157 01e8 50       		.byte	0x50
 5158 01e9 9F       		.byte	0x9f
 5159 01ea 00000000 		.4byte	0
 5160 01ee 00000000 		.4byte	0
 5161              	.LLST14:
 5162 01f2 00000000 		.4byte	.LVL38
 5163 01f6 04000000 		.4byte	.LVL39
 5164 01fa 0100     		.2byte	0x1
 5165 01fc 50       		.byte	0x50
 5166 01fd 04000000 		.4byte	.LVL39
 5167 0201 10000000 		.4byte	.LFE21
 5168 0205 0400     		.2byte	0x4
 5169 0207 F3       		.byte	0xf3
 5170 0208 01       		.uleb128 0x1
 5171 0209 50       		.byte	0x50
 5172 020a 9F       		.byte	0x9f
 5173 020b 00000000 		.4byte	0
 5174 020f 00000000 		.4byte	0
 5175              	.LLST15:
 5176 0213 00000000 		.4byte	.LVL40
 5177 0217 17000000 		.4byte	.LVL42-1
 5178 021b 0100     		.2byte	0x1
 5179 021d 50       		.byte	0x50
 5180 021e 17000000 		.4byte	.LVL42-1
 5181 0222 34000000 		.4byte	.LFE22
 5182 0226 0400     		.2byte	0x4
 5183 0228 F3       		.byte	0xf3
 5184 0229 01       		.uleb128 0x1
 5185 022a 50       		.byte	0x50
 5186 022b 9F       		.byte	0x9f
 5187 022c 00000000 		.4byte	0
 5188 0230 00000000 		.4byte	0
 5189              	.LLST16:
 5190 0234 00000000 		.4byte	.LVL40
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 154


 5191 0238 17000000 		.4byte	.LVL42-1
 5192 023c 0100     		.2byte	0x1
 5193 023e 51       		.byte	0x51
 5194 023f 17000000 		.4byte	.LVL42-1
 5195 0243 34000000 		.4byte	.LFE22
 5196 0247 0400     		.2byte	0x4
 5197 0249 F3       		.byte	0xf3
 5198 024a 01       		.uleb128 0x1
 5199 024b 51       		.byte	0x51
 5200 024c 9F       		.byte	0x9f
 5201 024d 00000000 		.4byte	0
 5202 0251 00000000 		.4byte	0
 5203              	.LLST17:
 5204 0255 18000000 		.4byte	.LVL42
 5205 0259 2B000000 		.4byte	.LVL46-1
 5206 025d 0100     		.2byte	0x1
 5207 025f 50       		.byte	0x50
 5208 0260 00000000 		.4byte	0
 5209 0264 00000000 		.4byte	0
 5210              	.LLST18:
 5211 0268 10000000 		.4byte	.LVL41
 5212 026c 2C000000 		.4byte	.LVL47
 5213 0270 0100     		.2byte	0x1
 5214 0272 55       		.byte	0x55
 5215 0273 00000000 		.4byte	0
 5216 0277 00000000 		.4byte	0
 5217              	.LLST19:
 5218 027b 22000000 		.4byte	.LVL43
 5219 027f 26000000 		.4byte	.LVL45
 5220 0283 0100     		.2byte	0x1
 5221 0285 53       		.byte	0x53
 5222 0286 26000000 		.4byte	.LVL45
 5223 028a 2C000000 		.4byte	.LVL48
 5224 028e 0100     		.2byte	0x1
 5225 0290 57       		.byte	0x57
 5226 0291 00000000 		.4byte	0
 5227 0295 00000000 		.4byte	0
 5228              	.LLST20:
 5229 0299 00000000 		.4byte	.LVL49
 5230 029d 18000000 		.4byte	.LVL52
 5231 02a1 0100     		.2byte	0x1
 5232 02a3 50       		.byte	0x50
 5233 02a4 18000000 		.4byte	.LVL52
 5234 02a8 20000000 		.4byte	.LFE23
 5235 02ac 0400     		.2byte	0x4
 5236 02ae F3       		.byte	0xf3
 5237 02af 01       		.uleb128 0x1
 5238 02b0 50       		.byte	0x50
 5239 02b1 9F       		.byte	0x9f
 5240 02b2 00000000 		.4byte	0
 5241 02b6 00000000 		.4byte	0
 5242              	.LLST21:
 5243 02ba 0A000000 		.4byte	.LVL50
 5244 02be 16000000 		.4byte	.LVL51
 5245 02c2 0F00     		.2byte	0xf
 5246 02c4 71       		.byte	0x71
 5247 02c5 00       		.sleb128 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 155


 5248 02c6 70       		.byte	0x70
 5249 02c7 00       		.sleb128 0
 5250 02c8 33       		.byte	0x33
 5251 02c9 1A       		.byte	0x1a
 5252 02ca 08       		.byte	0x8
 5253 02cb FF       		.byte	0xff
 5254 02cc 1A       		.byte	0x1a
 5255 02cd 33       		.byte	0x33
 5256 02ce 24       		.byte	0x24
 5257 02cf 23       		.byte	0x23
 5258 02d0 06       		.uleb128 0x6
 5259 02d1 25       		.byte	0x25
 5260 02d2 9F       		.byte	0x9f
 5261 02d3 00000000 		.4byte	0
 5262 02d7 00000000 		.4byte	0
 5263              	.LLST22:
 5264 02db 00000000 		.4byte	.LVL53
 5265 02df 04000000 		.4byte	.LVL54
 5266 02e3 0100     		.2byte	0x1
 5267 02e5 50       		.byte	0x50
 5268 02e6 04000000 		.4byte	.LVL54
 5269 02ea 14000000 		.4byte	.LFE24
 5270 02ee 0400     		.2byte	0x4
 5271 02f0 F3       		.byte	0xf3
 5272 02f1 01       		.uleb128 0x1
 5273 02f2 50       		.byte	0x50
 5274 02f3 9F       		.byte	0x9f
 5275 02f4 00000000 		.4byte	0
 5276 02f8 00000000 		.4byte	0
 5277              	.LLST23:
 5278 02fc 00000000 		.4byte	.LVL55
 5279 0300 06000000 		.4byte	.LVL56
 5280 0304 0100     		.2byte	0x1
 5281 0306 50       		.byte	0x50
 5282 0307 06000000 		.4byte	.LVL56
 5283 030b 18000000 		.4byte	.LFE25
 5284 030f 0400     		.2byte	0x4
 5285 0311 F3       		.byte	0xf3
 5286 0312 01       		.uleb128 0x1
 5287 0313 50       		.byte	0x50
 5288 0314 9F       		.byte	0x9f
 5289 0315 00000000 		.4byte	0
 5290 0319 00000000 		.4byte	0
 5291              	.LLST24:
 5292 031d 00000000 		.4byte	.LVL57
 5293 0321 04000000 		.4byte	.LVL58
 5294 0325 0100     		.2byte	0x1
 5295 0327 50       		.byte	0x50
 5296 0328 04000000 		.4byte	.LVL58
 5297 032c 14000000 		.4byte	.LFE26
 5298 0330 0400     		.2byte	0x4
 5299 0332 F3       		.byte	0xf3
 5300 0333 01       		.uleb128 0x1
 5301 0334 50       		.byte	0x50
 5302 0335 9F       		.byte	0x9f
 5303 0336 00000000 		.4byte	0
 5304 033a 00000000 		.4byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 156


 5305              	.LLST25:
 5306 033e 00000000 		.4byte	.LVL59
 5307 0342 04000000 		.4byte	.LVL60
 5308 0346 0100     		.2byte	0x1
 5309 0348 50       		.byte	0x50
 5310 0349 04000000 		.4byte	.LVL60
 5311 034d 14000000 		.4byte	.LFE27
 5312 0351 0400     		.2byte	0x4
 5313 0353 F3       		.byte	0xf3
 5314 0354 01       		.uleb128 0x1
 5315 0355 50       		.byte	0x50
 5316 0356 9F       		.byte	0x9f
 5317 0357 00000000 		.4byte	0
 5318 035b 00000000 		.4byte	0
 5319              	.LLST26:
 5320 035f 00000000 		.4byte	.LVL61
 5321 0363 04000000 		.4byte	.LVL62
 5322 0367 0100     		.2byte	0x1
 5323 0369 50       		.byte	0x50
 5324 036a 04000000 		.4byte	.LVL62
 5325 036e 14000000 		.4byte	.LFE28
 5326 0372 0400     		.2byte	0x4
 5327 0374 F3       		.byte	0xf3
 5328 0375 01       		.uleb128 0x1
 5329 0376 50       		.byte	0x50
 5330 0377 9F       		.byte	0x9f
 5331 0378 00000000 		.4byte	0
 5332 037c 00000000 		.4byte	0
 5333              	.LLST27:
 5334 0380 00000000 		.4byte	.LVL64
 5335 0384 08000000 		.4byte	.LVL65
 5336 0388 0100     		.2byte	0x1
 5337 038a 50       		.byte	0x50
 5338 038b 08000000 		.4byte	.LVL65
 5339 038f 22000000 		.4byte	.LVL69
 5340 0393 0100     		.2byte	0x1
 5341 0395 54       		.byte	0x54
 5342 0396 00000000 		.4byte	0
 5343 039a 00000000 		.4byte	0
 5344              	.LLST28:
 5345 039e 14000000 		.4byte	.LVL73
 5346 03a2 1A000000 		.4byte	.LVL74
 5347 03a6 0200     		.2byte	0x2
 5348 03a8 30       		.byte	0x30
 5349 03a9 9F       		.byte	0x9f
 5350 03aa 1A000000 		.4byte	.LVL74
 5351 03ae 26000000 		.4byte	.LVL75
 5352 03b2 0100     		.2byte	0x1
 5353 03b4 53       		.byte	0x53
 5354 03b5 26000000 		.4byte	.LVL75
 5355 03b9 28000000 		.4byte	.LVL76
 5356 03bd 0300     		.2byte	0x3
 5357 03bf 73       		.byte	0x73
 5358 03c0 7D       		.sleb128 -3
 5359 03c1 9F       		.byte	0x9f
 5360 03c2 28000000 		.4byte	.LVL76
 5361 03c6 30000000 		.4byte	.LVL78
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 157


 5362 03ca 0100     		.2byte	0x1
 5363 03cc 53       		.byte	0x53
 5364 03cd 00000000 		.4byte	0
 5365 03d1 00000000 		.4byte	0
 5366              	.LLST29:
 5367 03d5 14000000 		.4byte	.LVL73
 5368 03d9 26000000 		.4byte	.LVL75
 5369 03dd 0200     		.2byte	0x2
 5370 03df 33       		.byte	0x33
 5371 03e0 9F       		.byte	0x9f
 5372 03e1 26000000 		.4byte	.LVL75
 5373 03e5 28000000 		.4byte	.LVL76
 5374 03e9 0100     		.2byte	0x1
 5375 03eb 53       		.byte	0x53
 5376 03ec 28000000 		.4byte	.LVL76
 5377 03f0 30000000 		.4byte	.LVL78
 5378 03f4 0200     		.2byte	0x2
 5379 03f6 33       		.byte	0x33
 5380 03f7 9F       		.byte	0x9f
 5381 03f8 30000000 		.4byte	.LVL78
 5382 03fc 60000000 		.4byte	.LVL82
 5383 0400 0100     		.2byte	0x1
 5384 0402 53       		.byte	0x53
 5385 0403 00000000 		.4byte	0
 5386 0407 00000000 		.4byte	0
 5387              	.LLST30:
 5388 040b 14000000 		.4byte	.LVL73
 5389 040f B8000000 		.4byte	.LVL91
 5390 0413 0200     		.2byte	0x2
 5391 0415 91       		.byte	0x91
 5392 0416 5C       		.sleb128 -36
 5393 0417 00000000 		.4byte	0
 5394 041b 00000000 		.4byte	0
 5395              	.LLST31:
 5396 041f 50000000 		.4byte	.LVL79
 5397 0423 54000000 		.4byte	.LVL80
 5398 0427 0A00     		.2byte	0xa
 5399 0429 71       		.byte	0x71
 5400 042a 00       		.sleb128 0
 5401 042b 11       		.byte	0x11
 5402 042c 80F08380 		.sleb128 -1073678336
 5402      7C
 5403 0431 1A       		.byte	0x1a
 5404 0432 9F       		.byte	0x9f
 5405 0433 54000000 		.4byte	.LVL80
 5406 0437 5A000000 		.4byte	.LVL81
 5407 043b 0100     		.2byte	0x1
 5408 043d 51       		.byte	0x51
 5409 043e 6C000000 		.4byte	.LVL83
 5410 0442 70000000 		.4byte	.LVL84
 5411 0446 0100     		.2byte	0x1
 5412 0448 53       		.byte	0x53
 5413 0449 70000000 		.4byte	.LVL84
 5414 044d 74000000 		.4byte	.LVL85
 5415 0451 0200     		.2byte	0x2
 5416 0453 74       		.byte	0x74
 5417 0454 00       		.sleb128 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 158


 5418 0455 8C000000 		.4byte	.LVL87
 5419 0459 B8000000 		.4byte	.LVL91
 5420 045d 0100     		.2byte	0x1
 5421 045f 57       		.byte	0x57
 5422 0460 00000000 		.4byte	0
 5423 0464 00000000 		.4byte	0
 5424              	.LLST32:
 5425 0468 8C000000 		.4byte	.LVL87
 5426 046c 90000000 		.4byte	.LVL88
 5427 0470 0100     		.2byte	0x1
 5428 0472 55       		.byte	0x55
 5429 0473 90000000 		.4byte	.LVL88
 5430 0477 94000000 		.4byte	.LVL89
 5431 047b 0300     		.2byte	0x3
 5432 047d 75       		.byte	0x75
 5433 047e 70       		.sleb128 -16
 5434 047f 9F       		.byte	0x9f
 5435 0480 94000000 		.4byte	.LVL89
 5436 0484 B8000000 		.4byte	.LVL91
 5437 0488 0100     		.2byte	0x1
 5438 048a 55       		.byte	0x55
 5439 048b 00000000 		.4byte	0
 5440 048f 00000000 		.4byte	0
 5441              	.LLST33:
 5442 0493 00000000 		.4byte	.LVL92
 5443 0497 09000000 		.4byte	.LVL93-1
 5444 049b 0100     		.2byte	0x1
 5445 049d 50       		.byte	0x50
 5446 049e 09000000 		.4byte	.LVL93-1
 5447 04a2 30000000 		.4byte	.LVL99
 5448 04a6 0100     		.2byte	0x1
 5449 04a8 54       		.byte	0x54
 5450 04a9 30000000 		.4byte	.LVL99
 5451 04ad 80000000 		.4byte	.LFE10
 5452 04b1 0400     		.2byte	0x4
 5453 04b3 F3       		.byte	0xf3
 5454 04b4 01       		.uleb128 0x1
 5455 04b5 50       		.byte	0x50
 5456 04b6 9F       		.byte	0x9f
 5457 04b7 00000000 		.4byte	0
 5458 04bb 00000000 		.4byte	0
 5459              	.LLST34:
 5460 04bf 00000000 		.4byte	.LVL92
 5461 04c3 16000000 		.4byte	.LVL96
 5462 04c7 0200     		.2byte	0x2
 5463 04c9 30       		.byte	0x30
 5464 04ca 9F       		.byte	0x9f
 5465 04cb 16000000 		.4byte	.LVL96
 5466 04cf 1C000000 		.4byte	.LVL98
 5467 04d3 0200     		.2byte	0x2
 5468 04d5 31       		.byte	0x31
 5469 04d6 9F       		.byte	0x9f
 5470 04d7 1C000000 		.4byte	.LVL98
 5471 04db 55000000 		.4byte	.LVL100-1
 5472 04df 0100     		.2byte	0x1
 5473 04e1 52       		.byte	0x52
 5474 04e2 00000000 		.4byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 159


 5475 04e6 00000000 		.4byte	0
 5476              	.LLST35:
 5477 04ea 0C000000 		.4byte	.LVL94
 5478 04ee 5E000000 		.4byte	.LVL102
 5479 04f2 0100     		.2byte	0x1
 5480 04f4 55       		.byte	0x55
 5481 04f5 00000000 		.4byte	0
 5482 04f9 00000000 		.4byte	0
 5483              	.LLST36:
 5484 04fd 00000000 		.4byte	.LVL103
 5485 0501 08000000 		.4byte	.LVL104
 5486 0505 0100     		.2byte	0x1
 5487 0507 50       		.byte	0x50
 5488 0508 08000000 		.4byte	.LVL104
 5489 050c 14000000 		.4byte	.LFE32
 5490 0510 0400     		.2byte	0x4
 5491 0512 F3       		.byte	0xf3
 5492 0513 01       		.uleb128 0x1
 5493 0514 50       		.byte	0x50
 5494 0515 9F       		.byte	0x9f
 5495 0516 00000000 		.4byte	0
 5496 051a 00000000 		.4byte	0
 5497              	.LLST37:
 5498 051e 00000000 		.4byte	.LVL106
 5499 0522 0E000000 		.4byte	.LVL107
 5500 0526 0100     		.2byte	0x1
 5501 0528 50       		.byte	0x50
 5502 0529 0E000000 		.4byte	.LVL107
 5503 052d 44000000 		.4byte	.LFE11
 5504 0531 0400     		.2byte	0x4
 5505 0533 F3       		.byte	0xf3
 5506 0534 01       		.uleb128 0x1
 5507 0535 50       		.byte	0x50
 5508 0536 9F       		.byte	0x9f
 5509 0537 00000000 		.4byte	0
 5510 053b 00000000 		.4byte	0
 5511              	.LLST38:
 5512 053f 00000000 		.4byte	.LVL109
 5513 0543 18000000 		.4byte	.LVL110
 5514 0547 0100     		.2byte	0x1
 5515 0549 50       		.byte	0x50
 5516 054a 18000000 		.4byte	.LVL110
 5517 054e 48000000 		.4byte	.LFE33
 5518 0552 0400     		.2byte	0x4
 5519 0554 F3       		.byte	0xf3
 5520 0555 01       		.uleb128 0x1
 5521 0556 50       		.byte	0x50
 5522 0557 9F       		.byte	0x9f
 5523 0558 00000000 		.4byte	0
 5524 055c 00000000 		.4byte	0
 5525              	.LLST39:
 5526 0560 00000000 		.4byte	.LVL113
 5527 0564 0C000000 		.4byte	.LVL114
 5528 0568 0200     		.2byte	0x2
 5529 056a 30       		.byte	0x30
 5530 056b 9F       		.byte	0x9f
 5531 056c 0C000000 		.4byte	.LVL114
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 160


 5532 0570 10000000 		.4byte	.LVL115
 5533 0574 0200     		.2byte	0x2
 5534 0576 31       		.byte	0x31
 5535 0577 9F       		.byte	0x9f
 5536 0578 10000000 		.4byte	.LVL115
 5537 057c 12000000 		.4byte	.LVL116
 5538 0580 0200     		.2byte	0x2
 5539 0582 32       		.byte	0x32
 5540 0583 9F       		.byte	0x9f
 5541 0584 12000000 		.4byte	.LVL116
 5542 0588 14000000 		.4byte	.LVL117
 5543 058c 0200     		.2byte	0x2
 5544 058e 33       		.byte	0x33
 5545 058f 9F       		.byte	0x9f
 5546 0590 14000000 		.4byte	.LVL117
 5547 0594 54000000 		.4byte	.LFE35
 5548 0598 0200     		.2byte	0x2
 5549 059a 35       		.byte	0x35
 5550 059b 9F       		.byte	0x9f
 5551 059c 00000000 		.4byte	0
 5552 05a0 00000000 		.4byte	0
 5553              	.LLST40:
 5554 05a4 18000000 		.4byte	.LVL119
 5555 05a8 22000000 		.4byte	.LVL120
 5556 05ac 0200     		.2byte	0x2
 5557 05ae 31       		.byte	0x31
 5558 05af 9F       		.byte	0x9f
 5559 05b0 00000000 		.4byte	0
 5560 05b4 00000000 		.4byte	0
 5561              	.LLST42:
 5562 05b8 14000000 		.4byte	.LVL117
 5563 05bc 18000000 		.4byte	.LVL119
 5564 05c0 0600     		.2byte	0x6
 5565 05c2 03       		.byte	0x3
 5566 05c3 00000000 		.4byte	CySysTickServiceCallbacks
 5567 05c7 9F       		.byte	0x9f
 5568 05c8 00000000 		.4byte	0
 5569 05cc 00000000 		.4byte	0
 5570              	.LLST43:
 5571 05d0 14000000 		.4byte	.LVL117
 5572 05d4 18000000 		.4byte	.LVL119
 5573 05d8 0200     		.2byte	0x2
 5574 05da 3F       		.byte	0x3f
 5575 05db 9F       		.byte	0x9f
 5576 05dc 00000000 		.4byte	0
 5577 05e0 00000000 		.4byte	0
 5578              	.LLST44:
 5579 05e4 14000000 		.4byte	.LVL117
 5580 05e8 16000000 		.4byte	.LVL118
 5581 05ec 0500     		.2byte	0x5
 5582 05ee 0C       		.byte	0xc
 5583 05ef 3C000020 		.4byte	0x2000003c
 5584 05f3 16000000 		.4byte	.LVL118
 5585 05f7 18000000 		.4byte	.LVL119
 5586 05fb 0200     		.2byte	0x2
 5587 05fd 73       		.byte	0x73
 5588 05fe 00       		.sleb128 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 161


 5589 05ff 00000000 		.4byte	0
 5590 0603 00000000 		.4byte	0
 5591              	.LLST45:
 5592 0607 2C000000 		.4byte	.LVL121
 5593 060b 30000000 		.4byte	.LVL122
 5594 060f 0100     		.2byte	0x1
 5595 0611 50       		.byte	0x50
 5596 0612 00000000 		.4byte	0
 5597 0616 00000000 		.4byte	0
 5598              	.LLST46:
 5599 061a 00000000 		.4byte	.LVL126
 5600 061e 04000000 		.4byte	.LVL127
 5601 0622 0100     		.2byte	0x1
 5602 0624 50       		.byte	0x50
 5603 0625 04000000 		.4byte	.LVL127
 5604 0629 10000000 		.4byte	.LFE40
 5605 062d 0400     		.2byte	0x4
 5606 062f F3       		.byte	0xf3
 5607 0630 01       		.uleb128 0x1
 5608 0631 50       		.byte	0x50
 5609 0632 9F       		.byte	0x9f
 5610 0633 00000000 		.4byte	0
 5611 0637 00000000 		.4byte	0
 5612              	.LLST47:
 5613 063b 0A000000 		.4byte	.LVL129
 5614 063f 0E000000 		.4byte	.LVL130
 5615 0643 0200     		.2byte	0x2
 5616 0645 31       		.byte	0x31
 5617 0646 9F       		.byte	0x9f
 5618 0647 00000000 		.4byte	0
 5619 064b 00000000 		.4byte	0
 5620              	.LLST48:
 5621 064f 00000000 		.4byte	.LVL133
 5622 0653 06000000 		.4byte	.LVL134
 5623 0657 0100     		.2byte	0x1
 5624 0659 50       		.byte	0x50
 5625 065a 06000000 		.4byte	.LVL134
 5626 065e 10000000 		.4byte	.LFE47
 5627 0662 0400     		.2byte	0x4
 5628 0664 F3       		.byte	0xf3
 5629 0665 01       		.uleb128 0x1
 5630 0666 50       		.byte	0x50
 5631 0667 9F       		.byte	0x9f
 5632 0668 00000000 		.4byte	0
 5633 066c 00000000 		.4byte	0
 5634              	.LLST49:
 5635 0670 00000000 		.4byte	.LVL135
 5636 0674 04000000 		.4byte	.LVL136
 5637 0678 0100     		.2byte	0x1
 5638 067a 50       		.byte	0x50
 5639 067b 04000000 		.4byte	.LVL136
 5640 067f 0C000000 		.4byte	.LFE48
 5641 0683 0400     		.2byte	0x4
 5642 0685 F3       		.byte	0xf3
 5643 0686 01       		.uleb128 0x1
 5644 0687 50       		.byte	0x50
 5645 0688 9F       		.byte	0x9f
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 162


 5646 0689 00000000 		.4byte	0
 5647 068d 00000000 		.4byte	0
 5648              	.LLST50:
 5649 0691 00000000 		.4byte	.LVL138
 5650 0695 08000000 		.4byte	.LVL139
 5651 0699 0100     		.2byte	0x1
 5652 069b 50       		.byte	0x50
 5653 069c 08000000 		.4byte	.LVL139
 5654 06a0 20000000 		.4byte	.LFE51
 5655 06a4 0400     		.2byte	0x4
 5656 06a6 F3       		.byte	0xf3
 5657 06a7 01       		.uleb128 0x1
 5658 06a8 50       		.byte	0x50
 5659 06a9 9F       		.byte	0x9f
 5660 06aa 00000000 		.4byte	0
 5661 06ae 00000000 		.4byte	0
 5662              	.LLST51:
 5663 06b2 0A000000 		.4byte	.LVL140
 5664 06b6 12000000 		.4byte	.LVL141
 5665 06ba 0100     		.2byte	0x1
 5666 06bc 53       		.byte	0x53
 5667 06bd 12000000 		.4byte	.LVL141
 5668 06c1 20000000 		.4byte	.LFE51
 5669 06c5 0100     		.2byte	0x1
 5670 06c7 50       		.byte	0x50
 5671 06c8 00000000 		.4byte	0
 5672 06cc 00000000 		.4byte	0
 5673              	.LLST52:
 5674 06d0 00000000 		.4byte	.LVL142
 5675 06d4 08000000 		.4byte	.LVL143
 5676 06d8 0100     		.2byte	0x1
 5677 06da 50       		.byte	0x50
 5678 06db 08000000 		.4byte	.LVL143
 5679 06df 20000000 		.4byte	.LFE52
 5680 06e3 0400     		.2byte	0x4
 5681 06e5 F3       		.byte	0xf3
 5682 06e6 01       		.uleb128 0x1
 5683 06e7 50       		.byte	0x50
 5684 06e8 9F       		.byte	0x9f
 5685 06e9 00000000 		.4byte	0
 5686 06ed 00000000 		.4byte	0
 5687              	.LLST53:
 5688 06f1 0A000000 		.4byte	.LVL144
 5689 06f5 12000000 		.4byte	.LVL145
 5690 06f9 0100     		.2byte	0x1
 5691 06fb 53       		.byte	0x53
 5692 06fc 12000000 		.4byte	.LVL145
 5693 0700 20000000 		.4byte	.LFE52
 5694 0704 0100     		.2byte	0x1
 5695 0706 50       		.byte	0x50
 5696 0707 00000000 		.4byte	0
 5697 070b 00000000 		.4byte	0
 5698              	.LLST54:
 5699 070f 00000000 		.4byte	.LVL146
 5700 0713 08000000 		.4byte	.LVL147
 5701 0717 0100     		.2byte	0x1
 5702 0719 50       		.byte	0x50
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 163


 5703 071a 08000000 		.4byte	.LVL147
 5704 071e 20000000 		.4byte	.LFE53
 5705 0722 0400     		.2byte	0x4
 5706 0724 F3       		.byte	0xf3
 5707 0725 01       		.uleb128 0x1
 5708 0726 50       		.byte	0x50
 5709 0727 9F       		.byte	0x9f
 5710 0728 00000000 		.4byte	0
 5711 072c 00000000 		.4byte	0
 5712              	.LLST55:
 5713 0730 0A000000 		.4byte	.LVL148
 5714 0734 12000000 		.4byte	.LVL149
 5715 0738 0100     		.2byte	0x1
 5716 073a 53       		.byte	0x53
 5717 073b 12000000 		.4byte	.LVL149
 5718 073f 20000000 		.4byte	.LFE53
 5719 0743 0100     		.2byte	0x1
 5720 0745 50       		.byte	0x50
 5721 0746 00000000 		.4byte	0
 5722 074a 00000000 		.4byte	0
 5723              	.LLST56:
 5724 074e 00000000 		.4byte	.LVL150
 5725 0752 06000000 		.4byte	.LVL151
 5726 0756 0100     		.2byte	0x1
 5727 0758 50       		.byte	0x50
 5728 0759 06000000 		.4byte	.LVL151
 5729 075d 08000000 		.4byte	.LVL152
 5730 0761 0400     		.2byte	0x4
 5731 0763 F3       		.byte	0xf3
 5732 0764 01       		.uleb128 0x1
 5733 0765 50       		.byte	0x50
 5734 0766 9F       		.byte	0x9f
 5735 0767 08000000 		.4byte	.LVL152
 5736 076b 0E000000 		.4byte	.LVL153
 5737 076f 0100     		.2byte	0x1
 5738 0771 50       		.byte	0x50
 5739 0772 0E000000 		.4byte	.LVL153
 5740 0776 10000000 		.4byte	.LVL154
 5741 077a 0400     		.2byte	0x4
 5742 077c F3       		.byte	0xf3
 5743 077d 01       		.uleb128 0x1
 5744 077e 50       		.byte	0x50
 5745 077f 9F       		.byte	0x9f
 5746 0780 10000000 		.4byte	.LVL154
 5747 0784 16000000 		.4byte	.LVL155
 5748 0788 0100     		.2byte	0x1
 5749 078a 50       		.byte	0x50
 5750 078b 16000000 		.4byte	.LVL155
 5751 078f 3C000000 		.4byte	.LFE54
 5752 0793 0400     		.2byte	0x4
 5753 0795 F3       		.byte	0xf3
 5754 0796 01       		.uleb128 0x1
 5755 0797 50       		.byte	0x50
 5756 0798 9F       		.byte	0x9f
 5757 0799 00000000 		.4byte	0
 5758 079d 00000000 		.4byte	0
 5759              	.LLST57:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 164


 5760 07a1 00000000 		.4byte	.LVL150
 5761 07a5 1C000000 		.4byte	.LVL156
 5762 07a9 0100     		.2byte	0x1
 5763 07ab 51       		.byte	0x51
 5764 07ac 1C000000 		.4byte	.LVL156
 5765 07b0 3C000000 		.4byte	.LFE54
 5766 07b4 0400     		.2byte	0x4
 5767 07b6 F3       		.byte	0xf3
 5768 07b7 01       		.uleb128 0x1
 5769 07b8 51       		.byte	0x51
 5770 07b9 9F       		.byte	0x9f
 5771 07ba 00000000 		.4byte	0
 5772 07be 00000000 		.4byte	0
 5773              	.LLST58:
 5774 07c2 1E000000 		.4byte	.LVL157
 5775 07c6 26000000 		.4byte	.LVL158
 5776 07ca 0100     		.2byte	0x1
 5777 07cc 53       		.byte	0x53
 5778 07cd 26000000 		.4byte	.LVL158
 5779 07d1 28000000 		.4byte	.LVL159
 5780 07d5 0100     		.2byte	0x1
 5781 07d7 51       		.byte	0x51
 5782 07d8 00000000 		.4byte	0
 5783 07dc 00000000 		.4byte	0
 5784              		.section	.debug_aranges,"",%progbits
 5785 0000 C4010000 		.4byte	0x1c4
 5786 0004 0200     		.2byte	0x2
 5787 0006 00000000 		.4byte	.Ldebug_info0
 5788 000a 04       		.byte	0x4
 5789 000b 00       		.byte	0
 5790 000c 0000     		.2byte	0
 5791 000e 0000     		.2byte	0
 5792 0010 00000000 		.4byte	.LFB1
 5793 0014 14000000 		.4byte	.LFE1-.LFB1
 5794 0018 00000000 		.4byte	.LFB4
 5795 001c 50000000 		.4byte	.LFE4-.LFB4
 5796 0020 00000000 		.4byte	.LFB2
 5797 0024 18000000 		.4byte	.LFE2-.LFB2
 5798 0028 00000000 		.4byte	.LFB5
 5799 002c 10000000 		.4byte	.LFE5-.LFB5
 5800 0030 00000000 		.4byte	.LFB6
 5801 0034 20000000 		.4byte	.LFE6-.LFB6
 5802 0038 00000000 		.4byte	.LFB7
 5803 003c 34000000 		.4byte	.LFE7-.LFB7
 5804 0040 00000000 		.4byte	.LFB8
 5805 0044 18000000 		.4byte	.LFE8-.LFB8
 5806 0048 00000000 		.4byte	.LFB9
 5807 004c 2C000000 		.4byte	.LFE9-.LFB9
 5808 0050 00000000 		.4byte	.LFB12
 5809 0054 20000000 		.4byte	.LFE12-.LFB12
 5810 0058 00000000 		.4byte	.LFB13
 5811 005c 10000000 		.4byte	.LFE13-.LFB13
 5812 0060 00000000 		.4byte	.LFB14
 5813 0064 0C000000 		.4byte	.LFE14-.LFB14
 5814 0068 00000000 		.4byte	.LFB15
 5815 006c 14000000 		.4byte	.LFE15-.LFB15
 5816 0070 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 165


 5817 0074 10000000 		.4byte	.LFE16-.LFB16
 5818 0078 00000000 		.4byte	.LFB17
 5819 007c 0C000000 		.4byte	.LFE17-.LFB17
 5820 0080 00000000 		.4byte	.LFB18
 5821 0084 0E000000 		.4byte	.LFE18-.LFB18
 5822 0088 00000000 		.4byte	.LFB19
 5823 008c 0C000000 		.4byte	.LFE19-.LFB19
 5824 0090 00000000 		.4byte	.LFB20
 5825 0094 10000000 		.4byte	.LFE20-.LFB20
 5826 0098 00000000 		.4byte	.LFB21
 5827 009c 10000000 		.4byte	.LFE21-.LFB21
 5828 00a0 00000000 		.4byte	.LFB22
 5829 00a4 34000000 		.4byte	.LFE22-.LFB22
 5830 00a8 00000000 		.4byte	.LFB23
 5831 00ac 20000000 		.4byte	.LFE23-.LFB23
 5832 00b0 00000000 		.4byte	.LFB24
 5833 00b4 14000000 		.4byte	.LFE24-.LFB24
 5834 00b8 00000000 		.4byte	.LFB25
 5835 00bc 18000000 		.4byte	.LFE25-.LFB25
 5836 00c0 00000000 		.4byte	.LFB26
 5837 00c4 14000000 		.4byte	.LFE26-.LFB26
 5838 00c8 00000000 		.4byte	.LFB27
 5839 00cc 14000000 		.4byte	.LFE27-.LFB27
 5840 00d0 00000000 		.4byte	.LFB28
 5841 00d4 14000000 		.4byte	.LFE28-.LFB28
 5842 00d8 00000000 		.4byte	.LFB29
 5843 00dc 04000000 		.4byte	.LFE29-.LFB29
 5844 00e0 00000000 		.4byte	.LFB30
 5845 00e4 18000000 		.4byte	.LFE30-.LFB30
 5846 00e8 00000000 		.4byte	.LFB31
 5847 00ec 2C000000 		.4byte	.LFE31-.LFB31
 5848 00f0 00000000 		.4byte	.LFB3
 5849 00f4 E4000000 		.4byte	.LFE3-.LFB3
 5850 00f8 00000000 		.4byte	.LFB10
 5851 00fc 80000000 		.4byte	.LFE10-.LFB10
 5852 0100 00000000 		.4byte	.LFB32
 5853 0104 14000000 		.4byte	.LFE32-.LFB32
 5854 0108 00000000 		.4byte	.LFB11
 5855 010c 44000000 		.4byte	.LFE11-.LFB11
 5856 0110 00000000 		.4byte	.LFB33
 5857 0114 48000000 		.4byte	.LFE33-.LFB33
 5858 0118 00000000 		.4byte	.LFB35
 5859 011c 54000000 		.4byte	.LFE35-.LFB35
 5860 0120 00000000 		.4byte	.LFB37
 5861 0124 10000000 		.4byte	.LFE37-.LFB37
 5862 0128 00000000 		.4byte	.LFB38
 5863 012c 10000000 		.4byte	.LFE38-.LFB38
 5864 0130 00000000 		.4byte	.LFB36
 5865 0134 18000000 		.4byte	.LFE36-.LFB36
 5866 0138 00000000 		.4byte	.LFB34
 5867 013c 1C000000 		.4byte	.LFE34-.LFB34
 5868 0140 00000000 		.4byte	.LFB39
 5869 0144 10000000 		.4byte	.LFE39-.LFB39
 5870 0148 00000000 		.4byte	.LFB40
 5871 014c 10000000 		.4byte	.LFE40-.LFB40
 5872 0150 00000000 		.4byte	.LFB41
 5873 0154 10000000 		.4byte	.LFE41-.LFB41
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 166


 5874 0158 00000000 		.4byte	.LFB42
 5875 015c 10000000 		.4byte	.LFE42-.LFB42
 5876 0160 00000000 		.4byte	.LFB43
 5877 0164 18000000 		.4byte	.LFE43-.LFB43
 5878 0168 00000000 		.4byte	.LFB44
 5879 016c 10000000 		.4byte	.LFE44-.LFB44
 5880 0170 00000000 		.4byte	.LFB45
 5881 0174 10000000 		.4byte	.LFE45-.LFB45
 5882 0178 00000000 		.4byte	.LFB49
 5883 017c 24000000 		.4byte	.LFE49-.LFB49
 5884 0180 00000000 		.4byte	.LFB46
 5885 0184 0C000000 		.4byte	.LFE46-.LFB46
 5886 0188 00000000 		.4byte	.LFB47
 5887 018c 10000000 		.4byte	.LFE47-.LFB47
 5888 0190 00000000 		.4byte	.LFB48
 5889 0194 0C000000 		.4byte	.LFE48-.LFB48
 5890 0198 00000000 		.4byte	.LFB50
 5891 019c 74000000 		.4byte	.LFE50-.LFB50
 5892 01a0 00000000 		.4byte	.LFB51
 5893 01a4 20000000 		.4byte	.LFE51-.LFB51
 5894 01a8 00000000 		.4byte	.LFB52
 5895 01ac 20000000 		.4byte	.LFE52-.LFB52
 5896 01b0 00000000 		.4byte	.LFB53
 5897 01b4 20000000 		.4byte	.LFE53-.LFB53
 5898 01b8 00000000 		.4byte	.LFB54
 5899 01bc 3C000000 		.4byte	.LFE54-.LFB54
 5900 01c0 00000000 		.4byte	0
 5901 01c4 00000000 		.4byte	0
 5902              		.section	.debug_ranges,"",%progbits
 5903              	.Ldebug_ranges0:
 5904 0000 2C000000 		.4byte	.LBB16
 5905 0004 2E000000 		.4byte	.LBE16
 5906 0008 2E000000 		.4byte	.LBB19
 5907 000c 30000000 		.4byte	.LBE19
 5908 0010 00000000 		.4byte	0
 5909 0014 00000000 		.4byte	0
 5910 0018 04000000 		.4byte	.LBB30
 5911 001c 06000000 		.4byte	.LBE30
 5912 0020 18000000 		.4byte	.LBB43
 5913 0024 1E000000 		.4byte	.LBE43
 5914 0028 20000000 		.4byte	.LBB44
 5915 002c 22000000 		.4byte	.LBE44
 5916 0030 00000000 		.4byte	0
 5917 0034 00000000 		.4byte	0
 5918 0038 08000000 		.4byte	.LBB37
 5919 003c 0A000000 		.4byte	.LBE37
 5920 0040 14000000 		.4byte	.LBB41
 5921 0044 16000000 		.4byte	.LBE41
 5922 0048 16000000 		.4byte	.LBB42
 5923 004c 18000000 		.4byte	.LBE42
 5924 0050 00000000 		.4byte	0
 5925 0054 00000000 		.4byte	0
 5926 0058 04000000 		.4byte	.LBB51
 5927 005c 06000000 		.4byte	.LBE51
 5928 0060 0A000000 		.4byte	.LBB54
 5929 0064 0E000000 		.4byte	.LBE54
 5930 0068 00000000 		.4byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 167


 5931 006c 00000000 		.4byte	0
 5932 0070 00000000 		.4byte	.LFB1
 5933 0074 14000000 		.4byte	.LFE1
 5934 0078 00000000 		.4byte	.LFB4
 5935 007c 50000000 		.4byte	.LFE4
 5936 0080 00000000 		.4byte	.LFB2
 5937 0084 18000000 		.4byte	.LFE2
 5938 0088 00000000 		.4byte	.LFB5
 5939 008c 10000000 		.4byte	.LFE5
 5940 0090 00000000 		.4byte	.LFB6
 5941 0094 20000000 		.4byte	.LFE6
 5942 0098 00000000 		.4byte	.LFB7
 5943 009c 34000000 		.4byte	.LFE7
 5944 00a0 00000000 		.4byte	.LFB8
 5945 00a4 18000000 		.4byte	.LFE8
 5946 00a8 00000000 		.4byte	.LFB9
 5947 00ac 2C000000 		.4byte	.LFE9
 5948 00b0 00000000 		.4byte	.LFB12
 5949 00b4 20000000 		.4byte	.LFE12
 5950 00b8 00000000 		.4byte	.LFB13
 5951 00bc 10000000 		.4byte	.LFE13
 5952 00c0 00000000 		.4byte	.LFB14
 5953 00c4 0C000000 		.4byte	.LFE14
 5954 00c8 00000000 		.4byte	.LFB15
 5955 00cc 14000000 		.4byte	.LFE15
 5956 00d0 00000000 		.4byte	.LFB16
 5957 00d4 10000000 		.4byte	.LFE16
 5958 00d8 00000000 		.4byte	.LFB17
 5959 00dc 0C000000 		.4byte	.LFE17
 5960 00e0 00000000 		.4byte	.LFB18
 5961 00e4 0E000000 		.4byte	.LFE18
 5962 00e8 00000000 		.4byte	.LFB19
 5963 00ec 0C000000 		.4byte	.LFE19
 5964 00f0 00000000 		.4byte	.LFB20
 5965 00f4 10000000 		.4byte	.LFE20
 5966 00f8 00000000 		.4byte	.LFB21
 5967 00fc 10000000 		.4byte	.LFE21
 5968 0100 00000000 		.4byte	.LFB22
 5969 0104 34000000 		.4byte	.LFE22
 5970 0108 00000000 		.4byte	.LFB23
 5971 010c 20000000 		.4byte	.LFE23
 5972 0110 00000000 		.4byte	.LFB24
 5973 0114 14000000 		.4byte	.LFE24
 5974 0118 00000000 		.4byte	.LFB25
 5975 011c 18000000 		.4byte	.LFE25
 5976 0120 00000000 		.4byte	.LFB26
 5977 0124 14000000 		.4byte	.LFE26
 5978 0128 00000000 		.4byte	.LFB27
 5979 012c 14000000 		.4byte	.LFE27
 5980 0130 00000000 		.4byte	.LFB28
 5981 0134 14000000 		.4byte	.LFE28
 5982 0138 00000000 		.4byte	.LFB29
 5983 013c 04000000 		.4byte	.LFE29
 5984 0140 00000000 		.4byte	.LFB30
 5985 0144 18000000 		.4byte	.LFE30
 5986 0148 00000000 		.4byte	.LFB31
 5987 014c 2C000000 		.4byte	.LFE31
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 168


 5988 0150 00000000 		.4byte	.LFB3
 5989 0154 E4000000 		.4byte	.LFE3
 5990 0158 00000000 		.4byte	.LFB10
 5991 015c 80000000 		.4byte	.LFE10
 5992 0160 00000000 		.4byte	.LFB32
 5993 0164 14000000 		.4byte	.LFE32
 5994 0168 00000000 		.4byte	.LFB11
 5995 016c 44000000 		.4byte	.LFE11
 5996 0170 00000000 		.4byte	.LFB33
 5997 0174 48000000 		.4byte	.LFE33
 5998 0178 00000000 		.4byte	.LFB35
 5999 017c 54000000 		.4byte	.LFE35
 6000 0180 00000000 		.4byte	.LFB37
 6001 0184 10000000 		.4byte	.LFE37
 6002 0188 00000000 		.4byte	.LFB38
 6003 018c 10000000 		.4byte	.LFE38
 6004 0190 00000000 		.4byte	.LFB36
 6005 0194 18000000 		.4byte	.LFE36
 6006 0198 00000000 		.4byte	.LFB34
 6007 019c 1C000000 		.4byte	.LFE34
 6008 01a0 00000000 		.4byte	.LFB39
 6009 01a4 10000000 		.4byte	.LFE39
 6010 01a8 00000000 		.4byte	.LFB40
 6011 01ac 10000000 		.4byte	.LFE40
 6012 01b0 00000000 		.4byte	.LFB41
 6013 01b4 10000000 		.4byte	.LFE41
 6014 01b8 00000000 		.4byte	.LFB42
 6015 01bc 10000000 		.4byte	.LFE42
 6016 01c0 00000000 		.4byte	.LFB43
 6017 01c4 18000000 		.4byte	.LFE43
 6018 01c8 00000000 		.4byte	.LFB44
 6019 01cc 10000000 		.4byte	.LFE44
 6020 01d0 00000000 		.4byte	.LFB45
 6021 01d4 10000000 		.4byte	.LFE45
 6022 01d8 00000000 		.4byte	.LFB49
 6023 01dc 24000000 		.4byte	.LFE49
 6024 01e0 00000000 		.4byte	.LFB46
 6025 01e4 0C000000 		.4byte	.LFE46
 6026 01e8 00000000 		.4byte	.LFB47
 6027 01ec 10000000 		.4byte	.LFE47
 6028 01f0 00000000 		.4byte	.LFB48
 6029 01f4 0C000000 		.4byte	.LFE48
 6030 01f8 00000000 		.4byte	.LFB50
 6031 01fc 74000000 		.4byte	.LFE50
 6032 0200 00000000 		.4byte	.LFB51
 6033 0204 20000000 		.4byte	.LFE51
 6034 0208 00000000 		.4byte	.LFB52
 6035 020c 20000000 		.4byte	.LFE52
 6036 0210 00000000 		.4byte	.LFB53
 6037 0214 20000000 		.4byte	.LFE53
 6038 0218 00000000 		.4byte	.LFB54
 6039 021c 3C000000 		.4byte	.LFE54
 6040 0220 00000000 		.4byte	0
 6041 0224 00000000 		.4byte	0
 6042              		.section	.debug_line,"",%progbits
 6043              	.Ldebug_line0:
 6044 0000 C1050000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 169


 6044      02006700 
 6044      00000201 
 6044      FB0E0D00 
 6044      01010101 
 6045              	.LASF36:
 6046 0000 72616D56 		.ascii	"ramVectorTable\000"
 6046      6563746F 
 6046      72546162 
 6046      6C6500
 6047              	.LASF10:
 6048 000f 75696E74 		.ascii	"uint16\000"
 6048      313600
 6049              	.LASF56:
 6050 0016 696E7453 		.ascii	"intState\000"
 6050      74617465 
 6050      00
 6051              	.LASF39:
 6052 001f 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 6052      73436C6B 
 6052      57726974 
 6052      65486663 
 6052      6C6B4469 
 6053              	.LASF113:
 6054 0038 43795379 		.ascii	"CySysClkPumpConfig\000"
 6054      73436C6B 
 6054      50756D70 
 6054      436F6E66 
 6054      696700
 6055              	.LASF35:
 6056 004b 6F6C6449 		.ascii	"oldIsr\000"
 6056      737200
 6057              	.LASF96:
 6058 0052 72657456 		.ascii	"retVal\000"
 6058      616C00
 6059              	.LASF55:
 6060 0059 43794469 		.ascii	"CyDisableInts\000"
 6060      7361626C 
 6060      65496E74 
 6060      7300
 6061              	.LASF7:
 6062 0067 6C6F6E67 		.ascii	"long long unsigned int\000"
 6062      206C6F6E 
 6062      6720756E 
 6062      7369676E 
 6062      65642069 
 6063              	.LASF76:
 6064 007e 70617261 		.ascii	"parameters\000"
 6064      6D657465 
 6064      727300
 6065              	.LASF57:
 6066 0089 4379456E 		.ascii	"CyEnableInts\000"
 6066      61626C65 
 6066      496E7473 
 6066      00
 6067              	.LASF105:
 6068 0096 696E7465 		.ascii	"interfaceNumber\000"
 6068      72666163 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 170


 6068      654E756D 
 6068      62657200 
 6069              	.LASF72:
 6070 00a6 4379536F 		.ascii	"CySoftwareReset\000"
 6070      66747761 
 6070      72655265 
 6070      73657400 
 6071              	.LASF86:
 6072 00b6 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 6072      73546963 
 6072      6B456E61 
 6072      626C6549 
 6072      6E746572 
 6073              	.LASF67:
 6074 00cf 4379496E 		.ascii	"CyIntGetState\000"
 6074      74476574 
 6074      53746174 
 6074      6500
 6075              	.LASF6:
 6076 00dd 6C6F6E67 		.ascii	"long long int\000"
 6076      206C6F6E 
 6076      6720696E 
 6076      7400
 6077              	.LASF0:
 6078 00eb 7369676E 		.ascii	"signed char\000"
 6078      65642063 
 6078      68617200 
 6079              	.LASF21:
 6080 00f7 66726571 		.ascii	"freq\000"
 6080      00
 6081              	.LASF83:
 6082 00fc 43794465 		.ascii	"CyDelayFreq\000"
 6082      6C617946 
 6082      72657100 
 6083              	.LASF22:
 6084 0108 696E7465 		.ascii	"interruptState\000"
 6084      72727570 
 6084      74537461 
 6084      746500
 6085              	.LASF24:
 6086 0117 6C664C69 		.ascii	"lfLimit\000"
 6086      6D697400 
 6087              	.LASF90:
 6088 011f 43795379 		.ascii	"CySysTickGetReload\000"
 6088      73546963 
 6088      6B476574 
 6088      52656C6F 
 6088      616400
 6089              	.LASF49:
 6090 0132 43795379 		.ascii	"CySysClkImoGetWcoLock\000"
 6090      73436C6B 
 6090      496D6F47 
 6090      65745763 
 6090      6F4C6F63 
 6091              	.LASF78:
 6092 0148 77636F4C 		.ascii	"wcoLock\000"
 6092      6F636B00 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 171


 6093              	.LASF4:
 6094 0150 6C6F6E67 		.ascii	"long int\000"
 6094      20696E74 
 6094      00
 6095              	.LASF68:
 6096 0159 4379496E 		.ascii	"CyIntDisable\000"
 6096      74446973 
 6096      61626C65 
 6096      00
 6097              	.LASF77:
 6098 0166 72656756 		.ascii	"regValues\000"
 6098      616C7565 
 6098      7300
 6099              	.LASF41:
 6100 0170 43795379 		.ascii	"CySysEnablePumpClock\000"
 6100      73456E61 
 6100      626C6550 
 6100      756D7043 
 6100      6C6F636B 
 6101              	.LASF9:
 6102 0185 75696E74 		.ascii	"uint8\000"
 6102      3800
 6103              	.LASF108:
 6104 018b 63796465 		.ascii	"cydelayFreqKhz\000"
 6104      6C617946 
 6104      7265714B 
 6104      687A00
 6105              	.LASF43:
 6106 019a 656E6162 		.ascii	"enable\000"
 6106      6C6500
 6107              	.LASF13:
 6108 01a1 646F7562 		.ascii	"double\000"
 6108      6C6500
 6109              	.LASF64:
 6110 01a8 73686966 		.ascii	"shift\000"
 6110      7400
 6111              	.LASF28:
 6112 01ae 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 6112      734C7664 
 6112      436C6561 
 6112      72496E74 
 6112      65727275 
 6113              	.LASF11:
 6114 01c5 75696E74 		.ascii	"uint32\000"
 6114      333200
 6115              	.LASF58:
 6116 01cc 6D61736B 		.ascii	"mask\000"
 6116      00
 6117              	.LASF51:
 6118 01d1 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 6118      73436C6B 
 6118      47657453 
 6118      7973636C 
 6118      6B536F75 
 6119              	.LASF26:
 6120 01e9 43795379 		.ascii	"CySysClkImoEnableWcoLock\000"
 6120      73436C6B 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 172


 6120      496D6F45 
 6120      6E61626C 
 6120      6557636F 
 6121              	.LASF65:
 6122 0202 4379496E 		.ascii	"CyIntGetPriority\000"
 6122      74476574 
 6122      5072696F 
 6122      72697479 
 6122      00
 6123              	.LASF110:
 6124 0213 63796465 		.ascii	"cydelay32kMs\000"
 6124      6C617933 
 6124      326B4D73 
 6124      00
 6125              	.LASF84:
 6126 0220 43795379 		.ascii	"CySysTickInit\000"
 6126      73546963 
 6126      6B496E69 
 6126      7400
 6127              	.LASF32:
 6128 022e 76616C75 		.ascii	"value\000"
 6128      6500
 6129              	.LASF31:
 6130 0234 636C6F63 		.ascii	"clockSource\000"
 6130      6B536F75 
 6130      72636500 
 6131              	.LASF98:
 6132 0240 43794765 		.ascii	"CyGetUniqueId\000"
 6132      74556E69 
 6132      71756549 
 6132      6400
 6133              	.LASF93:
 6134 024e 43795379 		.ascii	"CySysTickGetCountFlag\000"
 6134      73546963 
 6134      6B476574 
 6134      436F756E 
 6134      74466C61 
 6135              	.LASF8:
 6136 0264 756E7369 		.ascii	"unsigned int\000"
 6136      676E6564 
 6136      20696E74 
 6136      00
 6137              	.LASF29:
 6138 0271 43795379 		.ascii	"CySysTickClear\000"
 6138      73546963 
 6138      6B436C65 
 6138      617200
 6139              	.LASF5:
 6140 0280 6C6F6E67 		.ascii	"long unsigned int\000"
 6140      20756E73 
 6140      69676E65 
 6140      6420696E 
 6140      7400
 6141              	.LASF50:
 6142 0292 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 6142      734C7664 
 6142      47657449 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 173


 6142      6E746572 
 6142      72757074 
 6143              	.LASF38:
 6144 02ad 43795379 		.ascii	"CySysClkImoStop\000"
 6144      73436C6B 
 6144      496D6F53 
 6144      746F7000 
 6145              	.LASF114:
 6146 02bd 4379456E 		.ascii	"CyEnterCriticalSection\000"
 6146      74657243 
 6146      72697469 
 6146      63616C53 
 6146      65637469 
 6147              	.LASF69:
 6148 02d4 4379496E 		.ascii	"CyIntSetPending\000"
 6148      74536574 
 6148      50656E64 
 6148      696E6700 
 6149              	.LASF97:
 6150 02e4 43795379 		.ascii	"CySysTickGetCallback\000"
 6150      73546963 
 6150      6B476574 
 6150      43616C6C 
 6150      6261636B 
 6151              	.LASF52:
 6152 02f9 43795379 		.ascii	"CySysGetResetReason\000"
 6152      73476574 
 6152      52657365 
 6152      74526561 
 6152      736F6E00 
 6153              	.LASF3:
 6154 030d 73686F72 		.ascii	"short unsigned int\000"
 6154      7420756E 
 6154      7369676E 
 6154      65642069 
 6154      6E7400
 6155              	.LASF23:
 6156 0320 72656754 		.ascii	"regTmp\000"
 6156      6D7000
 6157              	.LASF27:
 6158 0327 43795379 		.ascii	"CySysTickSetClockSource\000"
 6158      73546963 
 6158      6B536574 
 6158      436C6F63 
 6158      6B536F75 
 6159              	.LASF60:
 6160 033f 4379496E 		.ascii	"CyIntSetVector\000"
 6160      74536574 
 6160      56656374 
 6160      6F7200
 6161              	.LASF33:
 6162 034e 6E756D62 		.ascii	"number\000"
 6162      657200
 6163              	.LASF63:
 6164 0355 7072696F 		.ascii	"priority\000"
 6164      72697479 
 6164      00
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 174


 6165              	.LASF75:
 6166 035e 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 6166      73436C6B 
 6166      57726974 
 6166      65496D6F 
 6166      46726571 
 6167              	.LASF102:
 6168 0373 43795379 		.ascii	"CySysSetFlashAccessArbPriority\000"
 6168      73536574 
 6168      466C6173 
 6168      68416363 
 6168      65737341 
 6169              	.LASF123:
 6170 0392 4379496E 		.ascii	"CyIntSetSysVector\000"
 6170      74536574 
 6170      53797356 
 6170      6563746F 
 6170      7200
 6171              	.LASF37:
 6172 03a4 43795379 		.ascii	"CySysClkImoDisableWcoLock\000"
 6172      73436C6B 
 6172      496D6F44 
 6172      69736162 
 6172      6C655763 
 6173              	.LASF16:
 6174 03be 72656733 		.ascii	"reg32\000"
 6174      3200
 6175              	.LASF88:
 6176 03c4 43795379 		.ascii	"CySysTickStart\000"
 6176      73546963 
 6176      6B537461 
 6176      727400
 6177              	.LASF54:
 6178 03d3 72657475 		.ascii	"returnStatus\000"
 6178      726E5374 
 6178      61747573 
 6178      00
 6179              	.LASF101:
 6180 03e0 736F7572 		.ascii	"source\000"
 6180      636500
 6181              	.LASF19:
 6182 03e7 73697A65 		.ascii	"sizetype\000"
 6182      74797065 
 6182      00
 6183              	.LASF111:
 6184 03f0 43795379 		.ascii	"CySysTickInitVar\000"
 6184      73546963 
 6184      6B496E69 
 6184      74566172 
 6184      00
 6185              	.LASF104:
 6186 0401 43795379 		.ascii	"CySysSetPeripheralAccessArbPriority\000"
 6186      73536574 
 6186      50657269 
 6186      70686572 
 6186      616C4163 
 6187              	.LASF70:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 175


 6188 0425 4379496E 		.ascii	"CyIntClearPending\000"
 6188      74436C65 
 6188      61725065 
 6188      6E64696E 
 6188      6700
 6189              	.LASF18:
 6190 0437 6C6F6E67 		.ascii	"long double\000"
 6190      20646F75 
 6190      626C6500 
 6191              	.LASF34:
 6192 0443 61646472 		.ascii	"address\000"
 6192      65737300 
 6193              	.LASF119:
 6194 044b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6194      43313120 
 6194      352E342E 
 6194      31203230 
 6194      31363036 
 6195 047e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 6195      20726576 
 6195      6973696F 
 6195      6E203233 
 6195      37373135 
 6196 04b1 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 6196      66756E63 
 6196      74696F6E 
 6196      2D736563 
 6196      74696F6E 
 6197              	.LASF44:
 6198 04d9 73797363 		.ascii	"sysclkSource\000"
 6198      6C6B536F 
 6198      75726365 
 6198      00
 6199              	.LASF95:
 6200 04e6 66756E63 		.ascii	"function\000"
 6200      74696F6E 
 6200      00
 6201              	.LASF112:
 6202 04ef 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 6202      6F467265 
 6202      714D687A 
 6202      32526567 
 6202      00
 6203              	.LASF91:
 6204 0500 43795379 		.ascii	"CySysTickGetValue\000"
 6204      73546963 
 6204      6B476574 
 6204      56616C75 
 6204      6500
 6205              	.LASF107:
 6206 0512 63796465 		.ascii	"cydelayFreqHz\000"
 6206      6C617946 
 6206      72657148 
 6206      7A00
 6207              	.LASF62:
 6208 0520 4379496E 		.ascii	"CyIntSetPriority\000"
 6208      74536574 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 176


 6208      5072696F 
 6208      72697479 
 6208      00
 6209              	.LASF12:
 6210 0531 666C6F61 		.ascii	"float\000"
 6210      7400
 6211              	.LASF115:
 6212 0537 43794578 		.ascii	"CyExitCriticalSection\000"
 6212      69744372 
 6212      69746963 
 6212      616C5365 
 6212      6374696F 
 6213              	.LASF81:
 6214 054d 43795379 		.ascii	"CySysLvdEnable\000"
 6214      734C7664 
 6214      456E6162 
 6214      6C6500
 6215              	.LASF20:
 6216 055c 63795379 		.ascii	"cySysTickCallback\000"
 6216      73546963 
 6216      6B43616C 
 6216      6C626163 
 6216      6B00
 6217              	.LASF61:
 6218 056e 4379496E 		.ascii	"CyIntGetVector\000"
 6218      74476574 
 6218      56656374 
 6218      6F7200
 6219              	.LASF74:
 6220 057d 6D696C6C 		.ascii	"milliseconds\000"
 6220      69736563 
 6220      6F6E6473 
 6220      00
 6221              	.LASF121:
 6222 058a 443A5C5F 		.ascii	"D:\\_Project\\_MD\\cypress_button\\EZIIC_button.cyd"
 6222      50726F6A 
 6222      6563745C 
 6222      5F4D445C 
 6222      63797072 
 6223 05b9 736E00   		.ascii	"sn\000"
 6224              	.LASF116:
 6225 05bc 43794465 		.ascii	"CyDelayCycles\000"
 6225      6C617943 
 6225      79636C65 
 6225      7300
 6226              	.LASF15:
 6227 05ca 72656738 		.ascii	"reg8\000"
 6227      00
 6228              	.LASF82:
 6229 05cf 74687265 		.ascii	"threshold\000"
 6229      73686F6C 
 6229      6400
 6230              	.LASF71:
 6231 05d9 43794861 		.ascii	"CyHalt\000"
 6231      6C7400
 6232              	.LASF100:
 6233 05e0 43795379 		.ascii	"CySysSetRamAccessArbPriority\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 177


 6233      73536574 
 6233      52616D41 
 6233      63636573 
 6233      73417262 
 6234              	.LASF1:
 6235 05fd 756E7369 		.ascii	"unsigned char\000"
 6235      676E6564 
 6235      20636861 
 6235      7200
 6236              	.LASF53:
 6237 060b 72656173 		.ascii	"reason\000"
 6237      6F6E00
 6238              	.LASF2:
 6239 0612 73686F72 		.ascii	"short int\000"
 6239      7420696E 
 6239      7400
 6240              	.LASF66:
 6241 061c 4379496E 		.ascii	"CyIntEnable\000"
 6241      74456E61 
 6241      626C6500 
 6242              	.LASF59:
 6243 0628 4379496E 		.ascii	"CyIntGetSysVector\000"
 6243      74476574 
 6243      53797356 
 6243      6563746F 
 6243      7200
 6244              	.LASF42:
 6245 063a 636C6B53 		.ascii	"clkSelect\000"
 6245      656C6563 
 6245      7400
 6246              	.LASF79:
 6247 0644 43794465 		.ascii	"CyDelayUs\000"
 6247      6C617955 
 6247      7300
 6248              	.LASF122:
 6249 064e 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 6249      73546963 
 6249      6B536572 
 6249      76696365 
 6249      43616C6C 
 6250              	.LASF14:
 6251 0668 63686172 		.ascii	"char\000"
 6251      00
 6252              	.LASF17:
 6253 066d 63796973 		.ascii	"cyisraddress\000"
 6253      72616464 
 6253      72657373 
 6253      00
 6254              	.LASF87:
 6255 067a 43795379 		.ascii	"CySysTickEnable\000"
 6255      73546963 
 6255      6B456E61 
 6255      626C6500 
 6256              	.LASF45:
 6257 068a 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 6257      73436C6B 
 6257      57726974 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 178


 6257      65537973 
 6257      636C6B44 
 6258              	.LASF94:
 6259 06a1 43795379 		.ascii	"CySysTickSetCallback\000"
 6259      73546963 
 6259      6B536574 
 6259      43616C6C 
 6259      6261636B 
 6260              	.LASF106:
 6261 06b6 43795379 		.ascii	"CySysTickCallbacks\000"
 6261      73546963 
 6261      6B43616C 
 6261      6C626163 
 6261      6B7300
 6262              	.LASF99:
 6263 06c9 756E6971 		.ascii	"uniqueId\000"
 6263      75654964 
 6263      00
 6264              	.LASF25:
 6265 06d2 666C6173 		.ascii	"flashCtlReg\000"
 6265      6843746C 
 6265      52656700 
 6266              	.LASF73:
 6267 06de 43794465 		.ascii	"CyDelay\000"
 6267      6C617900 
 6268              	.LASF92:
 6269 06e6 43795379 		.ascii	"CySysTickGetClockSource\000"
 6269      73546963 
 6269      6B476574 
 6269      436C6F63 
 6269      6B536F75 
 6270              	.LASF89:
 6271 06fe 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 6271      73546963 
 6271      6B446973 
 6271      61626C65 
 6271      496E7465 
 6272              	.LASF48:
 6273 0718 43795379 		.ascii	"CySysLvdDisable\000"
 6273      734C7664 
 6273      44697361 
 6273      626C6500 
 6274              	.LASF109:
 6275 0728 63796465 		.ascii	"cydelayFreqMhz\000"
 6275      6C617946 
 6275      7265714D 
 6275      687A00
 6276              	.LASF118:
 6277 0737 43795379 		.ascii	"CySysClkWcoEnabled\000"
 6277      73436C6B 
 6277      57636F45 
 6277      6E61626C 
 6277      656400
 6278              	.LASF103:
 6279 074a 43795379 		.ascii	"CySysSetDmacAccessArbPriority\000"
 6279      73536574 
 6279      446D6163 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\ccWnbKaw.s 			page 179


 6279      41636365 
 6279      73734172 
 6280              	.LASF85:
 6281 0768 43795379 		.ascii	"CySysTickStop\000"
 6281      73546963 
 6281      6B53746F 
 6281      7000
 6282              	.LASF46:
 6283 0776 64697669 		.ascii	"divider\000"
 6283      64657200 
 6284              	.LASF47:
 6285 077e 43795379 		.ascii	"CySysClkImoStart\000"
 6285      73436C6B 
 6285      496D6F53 
 6285      74617274 
 6285      00
 6286              	.LASF117:
 6287 078f 43795379 		.ascii	"CySysFlashSetWaitCycles\000"
 6287      73466C61 
 6287      73685365 
 6287      74576169 
 6287      74437963 
 6288              	.LASF120:
 6289 07a7 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 6289      72617465 
 6289      645F536F 
 6289      75726365 
 6289      5C50536F 
 6290              	.LASF80:
 6291 07c6 6D696372 		.ascii	"microseconds\000"
 6291      6F736563 
 6291      6F6E6473 
 6291      00
 6292              	.LASF40:
 6293 07d3 746D7052 		.ascii	"tmpReg\000"
 6293      656700
 6294              	.LASF30:
 6295 07da 43795379 		.ascii	"CySysTickSetReload\000"
 6295      73546963 
 6295      6B536574 
 6295      52656C6F 
 6295      616400
 6296              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
