ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_Sensing.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_uidivmod
  20              		.section	.text.CapSense_SsCalcLfsrSize,"ax",%progbits
  21              		.align	2
  22              		.code	16
  23              		.thumb_func
  24              		.type	CapSense_SsCalcLfsrSize, %function
  25              	CapSense_SsCalcLfsrSize:
  26              	.LFB21:
  27              		.file 1 "Generated_Source\\PSoC4\\CapSense_Sensing.c"
   1:Generated_Source\PSoC4/CapSense_Sensing.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CapSense_Sensing.c **** * \file CapSense_Sensing.c
   3:Generated_Source\PSoC4/CapSense_Sensing.c **** * \version 7.0
   4:Generated_Source\PSoC4/CapSense_Sensing.c **** *
   5:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
   6:Generated_Source\PSoC4/CapSense_Sensing.c **** *   This file contains the source of functions common for
   7:Generated_Source\PSoC4/CapSense_Sensing.c **** *   different sensing methods.
   8:Generated_Source\PSoC4/CapSense_Sensing.c **** *
   9:Generated_Source\PSoC4/CapSense_Sensing.c **** * \see CapSense v7.0 Datasheet
  10:Generated_Source\PSoC4/CapSense_Sensing.c **** *
  11:Generated_Source\PSoC4/CapSense_Sensing.c **** *//*****************************************************************************
  12:Generated_Source\PSoC4/CapSense_Sensing.c **** * Copyright (2016-2019), Cypress Semiconductor Corporation.
  13:Generated_Source\PSoC4/CapSense_Sensing.c **** ********************************************************************************
  14:Generated_Source\PSoC4/CapSense_Sensing.c **** * This software is owned by Cypress Semiconductor Corporation (Cypress) and is
  15:Generated_Source\PSoC4/CapSense_Sensing.c **** * protected by and subject to worldwide patent protection (United States and
  16:Generated_Source\PSoC4/CapSense_Sensing.c **** * foreign), United States copyright laws and international treaty provisions.
  17:Generated_Source\PSoC4/CapSense_Sensing.c **** * Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
  18:Generated_Source\PSoC4/CapSense_Sensing.c **** * license to copy, use, modify, create derivative works of, and compile the
  19:Generated_Source\PSoC4/CapSense_Sensing.c **** * Cypress Source Code and derivative works for the sole purpose of creating
  20:Generated_Source\PSoC4/CapSense_Sensing.c **** * custom software in support of licensee product to be used only in conjunction
  21:Generated_Source\PSoC4/CapSense_Sensing.c **** * with a Cypress integrated circuit as specified in the applicable agreement.
  22:Generated_Source\PSoC4/CapSense_Sensing.c **** * Any reproduction, modification, translation, compilation, or representation of
  23:Generated_Source\PSoC4/CapSense_Sensing.c **** * this software except as specified above is prohibited without the express
  24:Generated_Source\PSoC4/CapSense_Sensing.c **** * written permission of Cypress.
  25:Generated_Source\PSoC4/CapSense_Sensing.c **** *
  26:Generated_Source\PSoC4/CapSense_Sensing.c **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH
  27:Generated_Source\PSoC4/CapSense_Sensing.c **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  28:Generated_Source\PSoC4/CapSense_Sensing.c **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  29:Generated_Source\PSoC4/CapSense_Sensing.c **** * Cypress reserves the right to make changes without further notice to the
  30:Generated_Source\PSoC4/CapSense_Sensing.c **** * materials described herein. Cypress does not assume any liability arising out
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 2


  31:Generated_Source\PSoC4/CapSense_Sensing.c **** * of the application or use of any product or circuit described herein. Cypress
  32:Generated_Source\PSoC4/CapSense_Sensing.c **** * does not authorize its products for use as critical components in life-support
  33:Generated_Source\PSoC4/CapSense_Sensing.c **** * systems where a malfunction or failure may reasonably be expected to result in
  34:Generated_Source\PSoC4/CapSense_Sensing.c **** * significant injury to the user. The inclusion of Cypress' product in a life-
  35:Generated_Source\PSoC4/CapSense_Sensing.c **** * support systems application implies that the manufacturer assumes all risk of
  36:Generated_Source\PSoC4/CapSense_Sensing.c **** * such use and in doing so indemnifies Cypress against all charges. Use may be
  37:Generated_Source\PSoC4/CapSense_Sensing.c **** * limited by and subject to the applicable Cypress software license agreement.
  38:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
  39:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  40:Generated_Source\PSoC4/CapSense_Sensing.c **** #include "cyfitter.h"
  41:Generated_Source\PSoC4/CapSense_Sensing.c **** #include "CapSense_Configuration.h"
  42:Generated_Source\PSoC4/CapSense_Sensing.c **** #include "CapSense_Structure.h"
  43:Generated_Source\PSoC4/CapSense_Sensing.c **** #include "CapSense_Sensing.h"
  44:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSX_EN)
  45:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_SensingCSX_LL.h"
  46:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  47:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_ISX_EN)
  48:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_SensingISX_LL.h"
  49:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  50:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_EN)
  51:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_SensingCSD_LL.h"
  52:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  53:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_CSD_SS_DIS != CapSense_CSD_AUTOTUNE)
  54:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_SmartSense_LL.h"
  55:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  56:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_ADC_EN)
  57:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_Adc.h"
  58:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  59:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_SELF_TEST_EN)
  60:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_SelfTest.h"
  61:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  62:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  63:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (0u != CapSense_ISX_EN)
  64:Generated_Source\PSoC4/CapSense_Sensing.c ****     #include "CapSense_DigPrt2.h"
  65:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_USES_PORT_3)
  66:Generated_Source\PSoC4/CapSense_Sensing.c ****         #include "CapSense_DigPrt3.h"
  67:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
  68:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
  69:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  70:Generated_Source\PSoC4/CapSense_Sensing.c **** /***************************************
  71:Generated_Source\PSoC4/CapSense_Sensing.c **** * API Constants
  72:Generated_Source\PSoC4/CapSense_Sensing.c **** ***************************************/
  73:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  74:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_IMO_FREQUENCY_OFFSET_MIN               (0u)
  75:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_IMO_FREQUENCY_OFFSET_MAX               (255u)
  76:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_AUTOTUNE_CALIBRATION_RESOLUTION        (12u)
  77:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_AUTOTUNE_CALIBRATION_FREQ_KHZ          (1500u)
  78:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_AUTOTUNE_CAL_LEVEL                     (CapSense_CSD_RAWCOUNT_CAL_LEVEL)
  79:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_AUTOTUNE_CAL_UNITS                     (1000u)
  80:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_AUTOTUNE_CP_MAX                        (69000Lu)
  81:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_CLK_SOURCE_LFSR_SCALE_OFFSET           (4u)
  82:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  83:Generated_Source\PSoC4/CapSense_Sensing.c **** /* HW IP Block limitation */
  84:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSDV2)
  85:Generated_Source\PSoC4/CapSense_Sensing.c ****     #define CapSense_CSD_SNS_FREQ_KHZ_MAX               (6000u)
  86:Generated_Source\PSoC4/CapSense_Sensing.c **** #else
  87:Generated_Source\PSoC4/CapSense_Sensing.c ****     #define CapSense_CSD_SNS_FREQ_KHZ_MAX               (12600u)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 3


  88:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
  89:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  90:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_FLIP_FLOP_DIV                          (1u)
  91:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  92:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_MOD_CSD_CLK_12000KHZ                   (12000uL)
  93:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_MOD_CSD_CLK_24000KHZ                   (24000uL)
  94:Generated_Source\PSoC4/CapSense_Sensing.c **** #define CapSense_MOD_CSD_CLK_48000KHZ                   (48000uL)
  95:Generated_Source\PSoC4/CapSense_Sensing.c **** 
  96:Generated_Source\PSoC4/CapSense_Sensing.c **** /*****************************************************************************/
  97:Generated_Source\PSoC4/CapSense_Sensing.c **** /* Enumeration types definition                                              */
  98:Generated_Source\PSoC4/CapSense_Sensing.c **** /*****************************************************************************/
  99:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 100:Generated_Source\PSoC4/CapSense_Sensing.c **** typedef enum
 101:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 102:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_RES_PULLUP_E   = 0x02u,
 103:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_RES_PULLDOWN_E = 0x03u
 104:Generated_Source\PSoC4/CapSense_Sensing.c **** } CapSense_PORT_TEST_DM;
 105:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 106:Generated_Source\PSoC4/CapSense_Sensing.c **** typedef enum
 107:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 108:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_STS_RESET      = 0x01u,
 109:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_STS_NO_RESET   = 0x02u
 110:Generated_Source\PSoC4/CapSense_Sensing.c **** } CapSense_TEST_TYPE;
 111:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 112:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 113:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 114:Generated_Source\PSoC4/CapSense_Sensing.c **** * Static Function Prototypes
 115:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 116:Generated_Source\PSoC4/CapSense_Sensing.c **** /**
 117:Generated_Source\PSoC4/CapSense_Sensing.c **** * \cond SECTION_C_INTERNAL
 118:Generated_Source\PSoC4/CapSense_Sensing.c **** * \addtogroup group_c_internal
 119:Generated_Source\PSoC4/CapSense_Sensing.c **** * \{
 120:Generated_Source\PSoC4/CapSense_Sensing.c **** */
 121:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 122:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_DISABLE == CapSense_CSDV2)
 123:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsTrimIdacs(void);
 124:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if ((CapSense_ENABLE == CapSense_CSX_EN) || \
 125:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_ENABLE == CapSense_ISX_EN) || \
 126:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_IDAC_SINKING == CapSense_CSD_IDAC_CONFIG))
 127:Generated_Source\PSoC4/CapSense_Sensing.c ****         static void CapSense_SsTrimIdacsSinking(void);
 128:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_CSX_EN) || \
 129:Generated_Source\PSoC4/CapSense_Sensing.c ****                (CapSense_IDAC_SINKING == CapSense_CSD_IDAC_CONFIG)) */
 130:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if ((CapSense_ENABLE == CapSense_CSX_EN) || \
 131:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_ENABLE == CapSense_ISX_EN) || \
 132:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_IDAC_SOURCING == CapSense_CSD_IDAC_CONFIG))
 133:Generated_Source\PSoC4/CapSense_Sensing.c ****         static void CapSense_SsTrimIdacsSourcing(void);
 134:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_CSX_EN) || \
 135:Generated_Source\PSoC4/CapSense_Sensing.c ****                (CapSense_IDAC_SOURCING == CapSense_CSD_IDAC_CONFIG)) */
 136:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
 137:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 138:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_EN)
 139:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsCSDDisableMode(void);
 140:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 141:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSX_EN)
 142:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsDisableCSXMode(void);
 143:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSX_EN) */
 144:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_ISX_EN)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 4


 145:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsDisableISXMode(void);
 146:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_ISX_EN) */
 147:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 148:Generated_Source\PSoC4/CapSense_Sensing.c **** #if(((CapSense_ENABLE == CapSense_CSX_EN) && \
 149:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_CSDV2) && \
 150:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSX_TX_CLK_SOURCE) && \
 151:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_DISABLE == CapSense_CSX_SKIP_OVSMPL_SPECIFIC_NODES)) ||\
 152:Generated_Source\PSoC4/CapSense_Sensing.c ****     ((CapSense_ENABLE == CapSense_CSD_EN) && \
 153:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_CSDV2) && \
 154:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE)))
 155:Generated_Source\PSoC4/CapSense_Sensing.c ****     static uint8 CapSense_SsCalcLfsrSize(uint32 snsClkDivider, uint32 conversionsNum);
 156:Generated_Source\PSoC4/CapSense_Sensing.c ****     static uint8 CapSense_SsCalcLfsrScale(uint32 snsClkDivider, uint8 lfsrSize);
 157:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
 158:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 159:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_EN)
 160:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsSetWidgetSenseClkSrc(uint32 wdgtIndex, CapSense_RAM_WD_BASE_STRUCT * ptr
 161:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
 162:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 163:Generated_Source\PSoC4/CapSense_Sensing.c **** #if ((CapSense_ENABLE == CapSense_CSX_EN) && (CapSense_ENABLE == CapSense_CSDV2))
 164:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsSetWidgetTxClkSrc(uint32 wdgtIndex, CapSense_RAM_WD_BASE_STRUCT * ptrWdg
 165:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
 166:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 167:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 168:Generated_Source\PSoC4/CapSense_Sensing.c **** /** \}
 169:Generated_Source\PSoC4/CapSense_Sensing.c **** * \endcond */
 170:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 171:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 172:Generated_Source\PSoC4/CapSense_Sensing.c **** * Defines module variables
 173:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 174:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 175:Generated_Source\PSoC4/CapSense_Sensing.c **** CapSense_SENSE_METHOD_ENUM CapSense_currentSenseMethod = CapSense_UNDEFINED_E;
 176:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 177:Generated_Source\PSoC4/CapSense_Sensing.c **** #if(CapSense_ENABLE == CapSense_MULTI_FREQ_SCAN_EN)
 178:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Module variable keep track of multi-frequency scan channel index */
 179:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8 CapSense_scanFreqIndex = 0u;
 180:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Variable keep frequency offsets */
 181:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8 CapSense_immunity[CapSense_NUM_SCAN_FREQS] = {0u, 0u, 0u};
 182:Generated_Source\PSoC4/CapSense_Sensing.c **** #else
 183:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* const allows C-compiler to do optimization */
 184:Generated_Source\PSoC4/CapSense_Sensing.c ****     const uint8 CapSense_scanFreqIndex = 0u;
 185:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
 186:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 187:Generated_Source\PSoC4/CapSense_Sensing.c **** /* Global software variables */
 188:Generated_Source\PSoC4/CapSense_Sensing.c **** volatile uint8 CapSense_widgetIndex = 0u;    /* Index of the scanning widget */
 189:Generated_Source\PSoC4/CapSense_Sensing.c **** volatile uint8 CapSense_sensorIndex = 0u;    /* Index of the scanning sensor */
 190:Generated_Source\PSoC4/CapSense_Sensing.c **** uint8 CapSense_requestScanAllWidget = 0u;
 191:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 192:Generated_Source\PSoC4/CapSense_Sensing.c **** /* Pointer to RAM_SNS_STRUCT structure */
 193:Generated_Source\PSoC4/CapSense_Sensing.c **** CapSense_RAM_SNS_STRUCT *CapSense_curRamSnsPtr;
 194:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 195:Generated_Source\PSoC4/CapSense_Sensing.c **** #if ((CapSense_ENABLE == CapSense_CSD_GANGED_SNS_EN) || \
 196:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_CSX_EN) || \
 197:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_ISX_EN))
 198:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Pointer to Flash structure holding configuration of widget to be scanned */
 199:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_FLASH_WD_STRUCT const *CapSense_curFlashWdgtPtr = 0u;
 200:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
 201:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 5


 202:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_GANGED_SNS_EN)
 203:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Pointer to Flash structure holding info of sensor to be scanned */
 204:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_FLASH_SNS_STRUCT const *CapSense_curFlashSnsPtr = 0u;
 205:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif
 206:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 207:Generated_Source\PSoC4/CapSense_Sensing.c **** /* Pointer to Flash structure to hold Sns electrode that was connected previously */
 208:Generated_Source\PSoC4/CapSense_Sensing.c **** CapSense_FLASH_IO_STRUCT const *CapSense_curSnsIOPtr;
 209:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 210:Generated_Source\PSoC4/CapSense_Sensing.c **** CapSense_IDAC_GAIN_TABLE_STRUCT const CapSense_idacGainTable[CapSense_IDAC_GAIN_NUMBER] = CapSense_
 211:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 212:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 213:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 214:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_IsBusy
 215:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 216:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 217:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 218:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the current status of the Component (Scan is completed or Scan is in
 219:Generated_Source\PSoC4/CapSense_Sensing.c **** *  progress).
 220:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 221:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 222:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function returns a status of the hardware block whether a scan is
 223:Generated_Source\PSoC4/CapSense_Sensing.c **** *  currently in progress or not. If the Component is busy, no new scan or Widget
 224:Generated_Source\PSoC4/CapSense_Sensing.c **** *  setup is made. The critical section (i.e. disable global interrupt)
 225:Generated_Source\PSoC4/CapSense_Sensing.c **** *  is recommended for the application when the device transitions from
 226:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the active mode to sleep or deep sleep modes.
 227:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 228:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
 229:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the current status of the Component:
 230:Generated_Source\PSoC4/CapSense_Sensing.c **** *    - CapSense_NOT_BUSY - No scan is in progress and a next scan
 231:Generated_Source\PSoC4/CapSense_Sensing.c **** *      can be initiated.
 232:Generated_Source\PSoC4/CapSense_Sensing.c **** *    - CapSense_SW_STS_BUSY - The previous scanning is not completed
 233:Generated_Source\PSoC4/CapSense_Sensing.c **** *      and the hardware block is busy.
 234:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 235:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 236:Generated_Source\PSoC4/CapSense_Sensing.c **** uint32 CapSense_IsBusy(void)
 237:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 238:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (CapSense_dsRam.status & CapSense_SW_STS_BUSY);
 239:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 240:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 241:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 242:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SetupWidget
 243:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 244:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 245:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 246:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Performs the initialization required to scan the specified widget.
 247:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 248:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 249:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function prepares the Component to scan all the sensors in the specified
 250:Generated_Source\PSoC4/CapSense_Sensing.c **** *  widget by executing the following tasks:
 251:Generated_Source\PSoC4/CapSense_Sensing.c **** *    1. Re-initialize the hardware if it is not configured to perform the
 252:Generated_Source\PSoC4/CapSense_Sensing.c **** *       sensing method used by the specified widget, this happens only if multiple
 253:Generated_Source\PSoC4/CapSense_Sensing.c **** *       sensing methods are used in the Component.
 254:Generated_Source\PSoC4/CapSense_Sensing.c **** *    2. Initialize the hardware with specific sensing configuration (e.g.
 255:Generated_Source\PSoC4/CapSense_Sensing.c **** *       sensor clock, scan resolution) used by the widget.
 256:Generated_Source\PSoC4/CapSense_Sensing.c **** *    3. Disconnect all previously connected electrodes, if the electrodes
 257:Generated_Source\PSoC4/CapSense_Sensing.c **** *       connected by the lower level SetupWidgetExt() or ConnectSns() functions
 258:Generated_Source\PSoC4/CapSense_Sensing.c ****         and not disconnected.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 6


 259:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 260:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function does not start sensor scanning, the CapSense_Scan()
 261:Generated_Source\PSoC4/CapSense_Sensing.c **** *  function must be called to start the scan sensors in the widget. If this
 262:Generated_Source\PSoC4/CapSense_Sensing.c **** *  function is called more than once, it does not break the Component operation,
 263:Generated_Source\PSoC4/CapSense_Sensing.c **** *  but only the last initialized widget is in effect.
 264:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 265:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param widgetId
 266:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the ID number of the widget to be initialized for scanning.
 267:Generated_Source\PSoC4/CapSense_Sensing.c **** *  A macro for the widget ID can be found in the
 268:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense Configuration header file defined as
 269:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_<WidgetName>_WDGT_ID.
 270:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 271:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
 272:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the status of the widget setting up operation:
 273:Generated_Source\PSoC4/CapSense_Sensing.c **** *    - CYRET_SUCCESS - The operation is successfully completed.
 274:Generated_Source\PSoC4/CapSense_Sensing.c **** *    - CYRET_BAD_PARAM - The widget is invalid or if the specified widget is
 275:Generated_Source\PSoC4/CapSense_Sensing.c **** *      disabled
 276:Generated_Source\PSoC4/CapSense_Sensing.c **** *    - CYRET_INVALID_STATE - The previous scanning is not completed and the
 277:Generated_Source\PSoC4/CapSense_Sensing.c **** *      hardware block is busy.
 278:Generated_Source\PSoC4/CapSense_Sensing.c **** *    - CYRET_UNKNOWN - An unknown sensing method is used by the widget or any
 279:Generated_Source\PSoC4/CapSense_Sensing.c **** *      other spurious error occurred.
 280:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 281:Generated_Source\PSoC4/CapSense_Sensing.c **** **********************************************************************************/
 282:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_SetupWidget(uint32 widgetId)
 283:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 284:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus widgetStatus;
 285:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 286:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_WDGT_SW_STS_BUSY == (CapSense_dsRam.status & CapSense_WDGT_SW_STS_BUSY))
 287:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 288:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Previous widget is being scanned. Return error. */
 289:Generated_Source\PSoC4/CapSense_Sensing.c ****         widgetStatus = CYRET_INVALID_STATE;
 290:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 291:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
 292:Generated_Source\PSoC4/CapSense_Sensing.c ****      *  Check if widget id is valid, specified widget is enabled and widget did not
 293:Generated_Source\PSoC4/CapSense_Sensing.c ****      *  detect any fault conditions if BIST is enabled. If all conditions are met,
 294:Generated_Source\PSoC4/CapSense_Sensing.c ****      *  set widgetStatus as good, if not, set widgetStatus as bad.
 295:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
 296:Generated_Source\PSoC4/CapSense_Sensing.c ****     else if ((CapSense_TOTAL_WIDGETS > widgetId) &&
 297:Generated_Source\PSoC4/CapSense_Sensing.c ****         (0uL != CapSense_GET_WIDGET_EN_STATUS(widgetId)))
 298:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 299:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 300:Generated_Source\PSoC4/CapSense_Sensing.c ****         widgetStatus = CYRET_SUCCESS;
 301:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 302:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
 303:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 304:Generated_Source\PSoC4/CapSense_Sensing.c ****         widgetStatus = CYRET_BAD_PARAM;
 305:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 306:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 307:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
 308:Generated_Source\PSoC4/CapSense_Sensing.c ****      * Check widgetStatus flag that is set earlier, if flag is good, then set up only
 309:Generated_Source\PSoC4/CapSense_Sensing.c ****      * widget
 310:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
 311:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CYRET_SUCCESS == widgetStatus)
 312:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 313:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch (CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[widgetId]))
 314:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 315:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 7


 316:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSX_E:
 317:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set up widget for CSX scan */
 318:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSXSetupWidget(widgetId);
 319:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 320:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 321:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
 322:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSD_E:
 323:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set up widget for CSD scan */
 324:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSDSetupWidget(widgetId);
 325:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 326:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 327:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_ISX_EN)
 328:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_ISX_E:
 329:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set up widget for ISX scan */
 330:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ISXSetupWidget(widgetId);
 331:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 332:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 333:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
 334:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Sensing method is invalid, return error to caller */
 335:Generated_Source\PSoC4/CapSense_Sensing.c ****             widgetStatus = CYRET_UNKNOWN;
 336:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 337:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 338:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 339:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (widgetStatus);
 340:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 341:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 342:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 343:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 344:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_Scan
 345:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 346:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 347:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 348:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Initiates scanning of all the sensors in the widget initialized by
 349:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_SetupWidget(), if no scan is in progress.
 350:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 351:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 352:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function is called only after the CapSense_SetupWidget()
 353:Generated_Source\PSoC4/CapSense_Sensing.c **** *  function is called to start the scanning of the sensors in the widget. The
 354:Generated_Source\PSoC4/CapSense_Sensing.c **** *  status of a sensor scan must be checked using the CapSense_IsBusy()
 355:Generated_Source\PSoC4/CapSense_Sensing.c **** *  API prior to starting a next scan or setting up another widget.
 356:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 357:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
 358:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the status of the scan initiation operation:
 359:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_SUCCESS - Scanning is successfully started.
 360:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_INVALID_STATE - The previous scanning is not completed and the
 361:Generated_Source\PSoC4/CapSense_Sensing.c **** *    hardware block is busy.
 362:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_UNKNOWN - An unknown sensing method is used by the widget.
 363:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 364:Generated_Source\PSoC4/CapSense_Sensing.c **** ********************************************************************************/
 365:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_Scan(void)
 366:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 367:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus scanStatus = CYRET_SUCCESS;
 368:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 369:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_WDGT_SW_STS_BUSY == (CapSense_dsRam.status & CapSense_WDGT_SW_STS_BUSY))
 370:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 371:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Previous widget is being scanned. Return error. */
 372:Generated_Source\PSoC4/CapSense_Sensing.c ****         scanStatus = CYRET_INVALID_STATE;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 8


 373:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 374:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
 375:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 376:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch (CapSense_currentSenseMethod)
 377:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 378:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
 379:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSX_E:
 380:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSXScan();
 381:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 382:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 383:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
 384:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSD_E:
 385:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSDScan();
 386:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 387:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 388:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_ISX_EN)
 389:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_ISX_E:
 390:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ISXScan();
 391:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 392:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 393:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
 394:Generated_Source\PSoC4/CapSense_Sensing.c ****             scanStatus = CYRET_UNKNOWN;
 395:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 396:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 397:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 398:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (scanStatus);
 399:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 400:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 401:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 402:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_ScanAllWidgets
 404:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 405:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 406:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 407:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Initializes the first enabled widget and scanning of all the sensors in the
 408:Generated_Source\PSoC4/CapSense_Sensing.c **** *  widget, then the same process is repeated for all the widgets in the Component,
 409:Generated_Source\PSoC4/CapSense_Sensing.c **** *  i.e. scanning of all the widgets in the Component.
 410:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 411:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 412:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function initializes a widget and scans all the sensors in the widget,
 413:Generated_Source\PSoC4/CapSense_Sensing.c **** *  and then repeats the same for all the widgets in the Component. The tasks of
 414:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the CapSense_SetupWidget() and CapSense_Scan() functions are
 415:Generated_Source\PSoC4/CapSense_Sensing.c **** *  executed by these functions. The status of a sensor scan must be checked
 416:Generated_Source\PSoC4/CapSense_Sensing.c **** *  using the CapSense_IsBusy() API prior to starting a next scan
 417:Generated_Source\PSoC4/CapSense_Sensing.c **** *  or setting up another widget.
 418:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 419:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
 420:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the status of the operation:
 421:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_SUCCESS - Scanning is successfully started.
 422:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_BAD_PARAM - All the widgets are disabled.
 423:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_INVALID_STATE - The previous scanning is not completed and the HW block is busy.
 424:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_UNKNOWN - There are unknown errors.
 425:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 426:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 427:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_ScanAllWidgets(void)
 428:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 429:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus scanStatus = CYRET_UNKNOWN;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 9


 430:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 431:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 wdgtIndex;
 432:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 433:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_SW_STS_BUSY == (CapSense_dsRam.status & CapSense_SW_STS_BUSY))
 434:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 435:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Previous widget is being scanned. Return error. */
 436:Generated_Source\PSoC4/CapSense_Sensing.c ****         scanStatus = CYRET_INVALID_STATE;
 437:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 438:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
 439:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 440:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
 441:Generated_Source\PSoC4/CapSense_Sensing.c ****          *  Set up widget first widget.
 442:Generated_Source\PSoC4/CapSense_Sensing.c ****          *  If widget returned error, set up next, continue same until widget does not return error
 443:Generated_Source\PSoC4/CapSense_Sensing.c ****          */
 444:Generated_Source\PSoC4/CapSense_Sensing.c ****         for (wdgtIndex = 0u;
 445:Generated_Source\PSoC4/CapSense_Sensing.c ****              wdgtIndex < CapSense_TOTAL_WIDGETS;
 446:Generated_Source\PSoC4/CapSense_Sensing.c ****              wdgtIndex++)
 447:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 448:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 449:Generated_Source\PSoC4/CapSense_Sensing.c ****             scanStatus = CapSense_SetupWidget(wdgtIndex);
 450:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 451:Generated_Source\PSoC4/CapSense_Sensing.c ****             if (CYRET_SUCCESS == scanStatus)
 452:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
 453:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (0u != (CapSense_TOTAL_WIDGETS - 1u))
 454:Generated_Source\PSoC4/CapSense_Sensing.c ****                     /* If there are more than one widget to be scanned, request callback to scan ne
 455:Generated_Source\PSoC4/CapSense_Sensing.c ****                     if ((CapSense_TOTAL_WIDGETS - 1u) > wdgtIndex)
 456:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
 457:Generated_Source\PSoC4/CapSense_Sensing.c ****                          /* Request callback to scan next widget in ISR */
 458:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_requestScanAllWidget = CapSense_ENABLE;
 459:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
 460:Generated_Source\PSoC4/CapSense_Sensing.c ****                     else
 461:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
 462:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Request to exit in ISR (Do not scan the next widgets) */
 463:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_requestScanAllWidget = CapSense_DISABLE;
 464:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
 465:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #else
 466:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
 467:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Request to exit in ISR (We have only one widget) */
 468:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_requestScanAllWidget = CapSense_DISABLE;
 469:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
 470:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif  /* (0u != (CapSense_TOTAL_WIDGETS - 1u)) */
 471:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 472:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Initiate scan and quit loop */
 473:Generated_Source\PSoC4/CapSense_Sensing.c ****                 scanStatus = CapSense_Scan();
 474:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 475:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 476:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 477:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 478:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 479:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 480:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (scanStatus);
 481:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 482:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 483:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 484:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 485:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SetupWidgetExt
 486:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 10


 487:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 488:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 489:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Performs extended initialization for the specified widget and also performs
 490:Generated_Source\PSoC4/CapSense_Sensing.c **** *  initialization required for a specific sensor in the widget. This function
 491:Generated_Source\PSoC4/CapSense_Sensing.c **** *  requires using the CapSense_ScanExt() function to initiate a scan.
 492:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 493:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 494:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function does the same as CapSense_SetupWidget() and also
 495:Generated_Source\PSoC4/CapSense_Sensing.c **** *  does the following tasks:
 496:Generated_Source\PSoC4/CapSense_Sensing.c **** *    1. Connects the first sensor of the widget.
 497:Generated_Source\PSoC4/CapSense_Sensing.c **** *    2. Configures the CSD HW block to perform a scan of the specified sensor.
 498:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 499:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Once this function is called to initialize a widget and a sensor, the
 500:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_ScanExt() function is called to scan the sensor.
 501:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 502:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function is called when no scanning is in progress. I.e.
 503:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_IsBusy() returns a non-busy status.
 504:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 505:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Calling this function directly from the application layer is not
 506:Generated_Source\PSoC4/CapSense_Sensing.c **** *  recommended. This function is used to implement only the user's specific
 507:Generated_Source\PSoC4/CapSense_Sensing.c **** *  use cases (for faster execution time or pipeline scanning for example).
 508:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 509:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param widgetId
 510:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the ID number of the widget to perform hardware and firmware
 511:Generated_Source\PSoC4/CapSense_Sensing.c **** *  initialization required for scanning the specific sensor in the specific
 512:Generated_Source\PSoC4/CapSense_Sensing.c **** *  widget.
 513:Generated_Source\PSoC4/CapSense_Sensing.c **** *  A macro for the widget ID can be found in the CapSense
 514:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Configuration header file defined as CapSense_<WidgetName>_WDGT_ID.
 515:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 516:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param sensorId
 517:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the ID number of the sensor within the widget to perform hardware
 518:Generated_Source\PSoC4/CapSense_Sensing.c **** *  and firmware initialization required for scanning a specific sensor in a
 519:Generated_Source\PSoC4/CapSense_Sensing.c **** *  specific widget.
 520:Generated_Source\PSoC4/CapSense_Sensing.c **** *  A macro for the sensor ID within a specified widget can be found in the
 521:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense Configuration header file defined as
 522:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_<WidgetName>_SNS<SensorNumber>_ID
 523:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 524:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
 525:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the status of the operation:
 526:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_SUCCESS - The operation is successfully completed.
 527:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_BAD_PARAM - The widget is invalid or if the specified widget is
 528:Generated_Source\PSoC4/CapSense_Sensing.c **** *    disabled
 529:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_INVALID_STATE - The previous scanning is not completed and the
 530:Generated_Source\PSoC4/CapSense_Sensing.c **** *    hardware block is busy.
 531:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_UNKNOWN - An unknown sensing method is used by the widget or any
 532:Generated_Source\PSoC4/CapSense_Sensing.c **** *    other spurious error occurred.
 533:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 534:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 535:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_SetupWidgetExt(uint32 widgetId, uint32 sensorId)
 536:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 537:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus widgetStatus;
 538:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 539:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_WDGT_SW_STS_BUSY == (CapSense_dsRam.status & CapSense_WDGT_SW_STS_BUSY))
 540:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 541:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Previous widget is being scanned. Return error. */
 542:Generated_Source\PSoC4/CapSense_Sensing.c ****         widgetStatus = CYRET_INVALID_STATE;
 543:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 11


 544:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
 545:Generated_Source\PSoC4/CapSense_Sensing.c ****      *  Check if widget id is valid, specified widget is enabled and widget did not
 546:Generated_Source\PSoC4/CapSense_Sensing.c ****      *  detect any fault conditions if BIST is enabled. If all conditions are met,
 547:Generated_Source\PSoC4/CapSense_Sensing.c ****      *  set widgetStatus as good, if not, set widgetStatus as bad.
 548:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
 549:Generated_Source\PSoC4/CapSense_Sensing.c ****     else if ((CapSense_TOTAL_WIDGETS > widgetId) &&
 550:Generated_Source\PSoC4/CapSense_Sensing.c ****         (0uL != CapSense_GET_WIDGET_EN_STATUS(widgetId)) &&
 551:Generated_Source\PSoC4/CapSense_Sensing.c ****         (sensorId < CapSense_GET_SENSOR_COUNT(widgetId)))
 552:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 553:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 554:Generated_Source\PSoC4/CapSense_Sensing.c ****         widgetStatus = CYRET_SUCCESS;
 555:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 556:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
 557:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 558:Generated_Source\PSoC4/CapSense_Sensing.c ****         widgetStatus = CYRET_BAD_PARAM;
 559:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 560:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 561:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
 562:Generated_Source\PSoC4/CapSense_Sensing.c ****      * Check widgetStatus flag that is set earlier, if flag is good, then set up only
 563:Generated_Source\PSoC4/CapSense_Sensing.c ****      * widget
 564:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
 565:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CYRET_SUCCESS == widgetStatus)
 566:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 567:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch (CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[widgetId]))
 568:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 569:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
 570:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSX_E:
 571:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set up widget for CSX scan */
 572:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSXSetupWidgetExt(widgetId, sensorId);
 573:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 574:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 575:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
 576:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSD_E:
 577:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set up widget for CSD scan */
 578:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSDSetupWidgetExt(widgetId, sensorId);
 579:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 580:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 581:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_ISX_EN)
 582:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_ISX_E:
 583:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set up widget for ISX scan */
 584:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ISXSetupWidgetExt(widgetId, sensorId);
 585:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 586:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 587:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
 588:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Sensing method is invalid, return error to caller */
 589:Generated_Source\PSoC4/CapSense_Sensing.c ****             widgetStatus = CYRET_UNKNOWN;
 590:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 591:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 592:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 593:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (widgetStatus);
 594:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 595:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 596:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 597:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 598:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_ScanExt
 599:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 600:Generated_Source\PSoC4/CapSense_Sensing.c **** *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 12


 601:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 602:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Starts a conversion on the pre-configured sensor. This function requires
 603:Generated_Source\PSoC4/CapSense_Sensing.c **** *  using the CapSense_SetupWidgetExt() function to set up the a
 604:Generated_Source\PSoC4/CapSense_Sensing.c **** *  widget.
 605:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 606:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 607:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function performs single scanning of one sensor in the widget configured
 608:Generated_Source\PSoC4/CapSense_Sensing.c **** *  by the CapSense_SetupWidgetExt() function.
 609:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 610:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Calling this function directly from the application layer is not
 611:Generated_Source\PSoC4/CapSense_Sensing.c **** *  recommended. This function is used to implement only the user's specific
 612:Generated_Source\PSoC4/CapSense_Sensing.c **** *  use cases (for faster execution time or pipeline scanning for example).
 613:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function is called when no scanning is in progress. I.e.
 614:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_IsBusy() returns a non-busy status.
 615:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 616:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The sensor must be preconfigured by using the
 617:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_SetupWidgetExt() API prior to calling this function.
 618:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The sensor remains ready for a next scan if a previous scan was triggered
 619:Generated_Source\PSoC4/CapSense_Sensing.c **** *  by using the CapSense_ScanExt() function. In this case, calling
 620:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_SetupWidgetExt() is not required every time before the
 621:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_ScanExt() function. If a previous scan was triggered in
 622:Generated_Source\PSoC4/CapSense_Sensing.c **** *  any other way - CapSense_Scan(), CapSense_ScanAllWidgets() or
 623:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_RunTuner() - (see the CapSense_RunTuner() function
 624:Generated_Source\PSoC4/CapSense_Sensing.c **** *  description for more details), the sensor must be preconfigured again by
 625:Generated_Source\PSoC4/CapSense_Sensing.c **** *  using the CapSense_SetupWidgetExt() API prior to calling the
 626:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_ScanExt() function.
 627:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 628:Generated_Source\PSoC4/CapSense_Sensing.c **** *  If disconnection of the sensors is required after calling
 629:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_ScanExt(), the CapSense_CSDDisconnectSns() or
 630:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_CSXDisconnectTx() or CapSense_CSXDisconnectRx()
 631:Generated_Source\PSoC4/CapSense_Sensing.c **** *  functions can be used.
 632:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 633:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
 634:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the status of the scan initiation operation:
 635:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_SUCCESS - Scanning is successfully started.
 636:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_INVALID_STATE - The previous scanning is not completed and the
 637:Generated_Source\PSoC4/CapSense_Sensing.c **** *    hardware block is busy.
 638:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CYRET_UNKNOWN - An unknown sensing method is used by the widget.
 639:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 640:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 641:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_ScanExt(void)
 642:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 643:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus scanStatus = CYRET_SUCCESS;
 644:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 645:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_WDGT_SW_STS_BUSY == (CapSense_dsRam.status & CapSense_WDGT_SW_STS_BUSY))
 646:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 647:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Previous widget is being scanned. Return error. */
 648:Generated_Source\PSoC4/CapSense_Sensing.c ****         scanStatus = CYRET_INVALID_STATE;
 649:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 650:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
 651:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 652:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch (CapSense_currentSenseMethod)
 653:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 654:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
 655:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSX_E:
 656:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSXScanExt();
 657:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 13


 658:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 659:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
 660:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSD_E:
 661:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSDScanExt();
 662:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 663:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 664:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_ISX_EN)
 665:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_ISX_E:
 666:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ISXScanExt();
 667:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 668:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 669:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
 670:Generated_Source\PSoC4/CapSense_Sensing.c ****             scanStatus = CYRET_UNKNOWN;
 671:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 672:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 673:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 674:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (scanStatus);
 675:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 676:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 677:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 678:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 679:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsInitialize
 680:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 681:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 682:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 683:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Performs hardware and firmware initialization required for proper operation
 684:Generated_Source\PSoC4/CapSense_Sensing.c **** *  of the CapSense Component. This function is called from
 685:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the CapSense_Start() API prior to calling any other APIs of the Component.
 686:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 687:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 688:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Performs hardware and firmware initialization required for proper operation
 689:Generated_Source\PSoC4/CapSense_Sensing.c **** *  of the CapSense Component. This function is called from
 690:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the CapSense_Start() API prior to calling any other APIs of the Component.
 691:Generated_Source\PSoC4/CapSense_Sensing.c **** *  1. Depending on the configuration, the function initializes the CSD block
 692:Generated_Source\PSoC4/CapSense_Sensing.c **** *     for the corresponding sensing mode.
 693:Generated_Source\PSoC4/CapSense_Sensing.c **** *  2. The function updates the dsRam.wdgtWorking variable with 1 when Self-test
 694:Generated_Source\PSoC4/CapSense_Sensing.c **** *     is enabled.
 695:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 696:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Calling the CapSense_Start API is the recommended method to initialize
 697:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the CapSense Component at power-up. The CapSense_SsInitialize()
 698:Generated_Source\PSoC4/CapSense_Sensing.c **** *  API should not be used for initialization, resume, or wake-up operations.
 699:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The dsRam.wdgtWorking variable is updated.
 700:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 701:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return status
 702:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns status of operation:
 703:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - Zero        - Indicates successful initialization.
 704:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - Non-zero    - One or more errors occurred in the initialization process.
 705:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 706:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 707:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_SsInitialize(void)
 708:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 709:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus initStatus;
 710:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 711:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if ((CapSense_ENABLE == CapSense_MULTI_FREQ_SCAN_EN) &&\
 712:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_MFS_IMO == CapSense_MFS_METHOD))
 713:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 centerFreqTrim;
 714:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 14


 715:Generated_Source\PSoC4/CapSense_Sensing.c ****         centerFreqTrim = (uint8)CY_GET_REG32(CY_SYS_CLK_IMO_TRIM1_PTR);
 716:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_immunity[CapSense_FREQ_CHANNEL_0] = centerFreqTrim;
 717:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 718:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (centerFreqTrim < CapSense_IMO_FREQUENCY_OFFSET_F1)
 719:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 720:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_immunity[CapSense_FREQ_CHANNEL_1] = centerFreqTrim + CapSense_IMO_FREQUENCY_OF
 721:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_immunity[CapSense_FREQ_CHANNEL_2] = centerFreqTrim + (CapSense_IMO_FREQUENCY_O
 722:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                                                            CapSense
 723:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 724:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (centerFreqTrim > (CapSense_IMO_FREQUENCY_OFFSET_MAX - CapSense_IMO_FREQUENCY_OFFSE
 725:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 726:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_immunity[CapSense_FREQ_CHANNEL_1] = centerFreqTrim - CapSense_IMO_FREQUENCY_OF
 727:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_immunity[CapSense_FREQ_CHANNEL_2] = centerFreqTrim - (CapSense_IMO_FREQUENCY_O
 728:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                                                            CapSense
 729:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 730:Generated_Source\PSoC4/CapSense_Sensing.c ****         else
 731:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 732:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_immunity[CapSense_FREQ_CHANNEL_1] = centerFreqTrim - CapSense_IMO_FREQUENCY_OF
 733:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_immunity[CapSense_FREQ_CHANNEL_2] = centerFreqTrim + CapSense_IMO_FREQUENCY_OF
 734:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 735:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 736:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_MULTI_FREQ_SCAN_EN) &&\
 737:Generated_Source\PSoC4/CapSense_Sensing.c ****                (CapSense_MFS_IMO == CapSense_MFS_METHOD)) */
 738:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 739:Generated_Source\PSoC4/CapSense_Sensing.c ****     initStatus = CYRET_SUCCESS;
 740:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 741:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_DISABLE == CapSense_CSDV2)
 742:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsTrimIdacs();
 743:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
 744:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 745:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if((CapSense_ENABLE == CapSense_CSD_EN) ||\
 746:Generated_Source\PSoC4/CapSense_Sensing.c ****     ((CapSense_ENABLE == CapSense_CSX_EN) && (CapSense_ENABLE == CapSense_CSDV2)))
 747:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsInitializeSourceSenseClk();
 748:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_CSD_EN) ||\
 749:Generated_Source\PSoC4/CapSense_Sensing.c ****               ((CapSense_ENABLE == CapSense_CSX_EN) && (CapSense_ENABLE == CapSense_CSDV2))) */
 750:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 751:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Set all IO states to the default state */
 752:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_SsSetAllIOsState((uint32)CapSense_SNS_CONNECTION_GROUND);
 753:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_dsRam.scanCurrentISC = CapSense_SNS_CONNECTION_GROUND;
 754:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 755:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_SsSwitchSensingMode(CapSense_UNDEFINED_E);
 756:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_ENABLE == CapSense_MANY_SENSE_MODES_EN)
 757:Generated_Source\PSoC4/CapSense_Sensing.c ****     #elif (CapSense_ENABLE == CapSense_CSD_EN)
 758:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsSwitchSensingMode(CapSense_SENSE_METHOD_CSD_E);
 759:Generated_Source\PSoC4/CapSense_Sensing.c ****     #elif (CapSense_ENABLE == CapSense_CSX_EN)
 760:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsSwitchSensingMode(CapSense_SENSE_METHOD_CSX_E);
 761:Generated_Source\PSoC4/CapSense_Sensing.c ****     #elif (CapSense_ENABLE == CapSense_ISX_EN)
 762:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsSwitchSensingMode(CapSense_SENSE_METHOD_ISX_E);
 763:Generated_Source\PSoC4/CapSense_Sensing.c ****     #else
 764:Generated_Source\PSoC4/CapSense_Sensing.c ****         #error "No sensing method enabled, Component cannot work in this mode"
 765:Generated_Source\PSoC4/CapSense_Sensing.c ****         initStatus = CYRET_UNKNOWN;
 766:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
 767:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 768:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (initStatus);
 769:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 770:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 771:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 15


 772:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
 773:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SetPinState
 774:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
 775:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 776:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
 777:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets the state (drive mode and output state) of the port pin used by a sensor.
 778:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The possible states are GND, Shield, High-Z, Tx or Rx, Sensor. If the sensor
 779:Generated_Source\PSoC4/CapSense_Sensing.c **** *  specified in the input parameter is a ganged sensor, then the state of all pins
 780:Generated_Source\PSoC4/CapSense_Sensing.c **** *  associated with the ganged sensor is updated.
 781:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 782:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
 783:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function sets a specified state for a specified sensor element. For the
 784:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CSD widgets, sensor element is a sensor ID, for the CSX widgets, it is either
 785:Generated_Source\PSoC4/CapSense_Sensing.c **** *  an Rx or Tx electrode ID. If the specified sensor is a ganged sensor, then
 786:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the specified state is set for all the electrodes belong to the sensor.
 787:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function must not be called while the Component is in the busy state.
 788:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 789:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function accepts the CapSense_SHIELD and
 790:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense_SENSOR states as an input only if there is at least
 791:Generated_Source\PSoC4/CapSense_Sensing.c **** *  one CSD widget. Similarly, this function accepts the CapSense_TX_PIN
 792:Generated_Source\PSoC4/CapSense_Sensing.c **** *  and CapSense_RX_PIN states as an input only if there is at least
 793:Generated_Source\PSoC4/CapSense_Sensing.c **** *  one CSX widget in the project.
 794:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 795:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Calling this function directly from the application layer is not
 796:Generated_Source\PSoC4/CapSense_Sensing.c **** *  recommended. This function is used to implement only the custom-specific
 797:Generated_Source\PSoC4/CapSense_Sensing.c **** *  use cases. Functions that perform a setup and scan of a sensor/widget
 798:Generated_Source\PSoC4/CapSense_Sensing.c **** *  automatically set the required pin states. They ignore changes
 799:Generated_Source\PSoC4/CapSense_Sensing.c **** *  in the design made by the CapSense_SetPinState() function.
 800:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function neither check wdgtIndex nor sensorElement for the correctness.
 801:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 802:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param widgetId
 803:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the ID of the widget to change the pin state of the specified
 804:Generated_Source\PSoC4/CapSense_Sensing.c **** *  sensor.
 805:Generated_Source\PSoC4/CapSense_Sensing.c **** *  A macro for the widget ID can be found in the CapSense Configuration
 806:Generated_Source\PSoC4/CapSense_Sensing.c **** *  header file defined as CapSense_<WidgetName>_WDGT_ID.
 807:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 808:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param sensorElement
 809:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the ID of the sensor element within the widget to change
 810:Generated_Source\PSoC4/CapSense_Sensing.c **** *  its pin state.
 811:Generated_Source\PSoC4/CapSense_Sensing.c **** *  \if SECTION_C_LOW_LEVEL
 812:Generated_Source\PSoC4/CapSense_Sensing.c **** *  For the CSD widgets, sensorElement is the sensor ID and can be found in the
 813:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense Configuration header file defined as
 814:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_<WidgetName>_SNS<SensorNumber>_ID.
 815:Generated_Source\PSoC4/CapSense_Sensing.c **** *  For the CSX widgets, sensorElement is defined either as Rx ID or Tx ID.
 816:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The first Rx in a widget corresponds to sensorElement = 0, the second
 817:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Rx in a widget corresponds to sensorElement = 1, and so on.
 818:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The last Tx in a widget corresponds to sensorElement = (RxNum + TxNum).
 819:Generated_Source\PSoC4/CapSense_Sensing.c **** *  \endif
 820:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Macros for Rx and Tx IDs can be found in the
 821:Generated_Source\PSoC4/CapSense_Sensing.c **** *  CapSense Configuration header file defined as:
 822:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_<WidgetName>_RX<RXNumber>_ID
 823:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_<WidgetName>_TX<TXNumber>_ID.
 824:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 825:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param state
 826:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the state of the sensor to be set:
 827:Generated_Source\PSoC4/CapSense_Sensing.c **** *     1. CapSense_GROUND - The pin is connected to the ground.
 828:Generated_Source\PSoC4/CapSense_Sensing.c **** *     2. CapSense_HIGHZ - The drive mode of the pin is set to High-Z
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 16


 829:Generated_Source\PSoC4/CapSense_Sensing.c **** *        Analog.
 830:Generated_Source\PSoC4/CapSense_Sensing.c **** *     3. CapSense_SHIELD - The shield signal is routed to the pin
 831:Generated_Source\PSoC4/CapSense_Sensing.c **** *        (available only if CSD sensing method with shield electrode is enabled).
 832:Generated_Source\PSoC4/CapSense_Sensing.c **** *     4. CapSense_SENSOR - The pin is connected to the scanning bus
 833:Generated_Source\PSoC4/CapSense_Sensing.c **** *        (available only if CSD sensing method is enabled).
 834:Generated_Source\PSoC4/CapSense_Sensing.c **** *     5. CapSense_TX_PIN - The Tx or Lx signal is routed to the sensor
 835:Generated_Source\PSoC4/CapSense_Sensing.c **** *        (available only if CSX or ISX sensing method is enabled).
 836:Generated_Source\PSoC4/CapSense_Sensing.c **** *     6. CapSense_RX_PIN - The pin is connected to the scanning bus
 837:Generated_Source\PSoC4/CapSense_Sensing.c **** *        (available only if CSX or ISX sensing method is enabled).
 838:Generated_Source\PSoC4/CapSense_Sensing.c **** *
 839:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
 840:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SetPinState(uint32 widgetId, uint32 sensorElement, uint32 state)
 841:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 842:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 eltdNum;
 843:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 eltdIndex;
 844:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8  interruptState;
 845:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_FLASH_IO_STRUCT const *ioPtr;
 846:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_ENABLE == CapSense_GANGED_SNS_EN)
 847:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_FLASH_SNS_STRUCT const *curFlashSnsPtr;
 848:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
 849:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 850:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Getting sensor element pointer and number of electrodes */
 851:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_ENABLE == CapSense_GANGED_SNS_EN)
 852:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Check the ganged sns flag */
 853:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (CapSense_GANGED_SNS_MASK == (CapSense_dsFlash.wdgtArray[widgetId].staticConfig & CapSen
 854:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 855:Generated_Source\PSoC4/CapSense_Sensing.c ****             curFlashSnsPtr = CapSense_dsFlash.wdgtArray[widgetId].ptr2SnsFlash;
 856:Generated_Source\PSoC4/CapSense_Sensing.c ****             curFlashSnsPtr += sensorElement;
 857:Generated_Source\PSoC4/CapSense_Sensing.c ****             ioPtr = &CapSense_ioList[curFlashSnsPtr->firstPinId];
 858:Generated_Source\PSoC4/CapSense_Sensing.c ****             eltdNum = curFlashSnsPtr->numPins;
 859:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 860:Generated_Source\PSoC4/CapSense_Sensing.c ****         else
 861:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 862:Generated_Source\PSoC4/CapSense_Sensing.c ****             ioPtr = (CapSense_FLASH_IO_STRUCT const *)CapSense_dsFlash.wdgtArray[widgetId].ptr2SnsF
 863:Generated_Source\PSoC4/CapSense_Sensing.c ****             eltdNum = 1u;
 864:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 865:Generated_Source\PSoC4/CapSense_Sensing.c ****     #else
 866:Generated_Source\PSoC4/CapSense_Sensing.c ****         ioPtr = (CapSense_FLASH_IO_STRUCT const *)CapSense_dsFlash.wdgtArray[widgetId].ptr2SnsFlash
 867:Generated_Source\PSoC4/CapSense_Sensing.c ****         eltdNum = 1u;
 868:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
 869:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 870:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Loop through all electrodes of the specified sensor element */
 871:Generated_Source\PSoC4/CapSense_Sensing.c ****     for (eltdIndex = 0u; eltdIndex < eltdNum; eltdIndex++)
 872:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 873:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Reset HSIOM and PC registers */
 874:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 875:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(ioPtr->hsiomPtr, CY_GET_REG32(ioPtr->hsiomPtr) & ~(CapSense_HSIOM_SEL_MASK << 
 876:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(ioPtr->pcPtr, CY_GET_REG32(ioPtr->pcPtr) & ~(CapSense_GPIO_PC_MASK << ioPtr->s
 877:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 878:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 879:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch (state)
 880:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 881:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_GROUND:
 882:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 883:Generated_Source\PSoC4/CapSense_Sensing.c ****             interruptState = CyEnterCriticalSection();
 884:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(ioPtr->pcPtr, CY_GET_REG32(ioPtr->pcPtr) | (CapSense_SNS_GROUND_CONNECT <<
 885:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(ioPtr->drPtr, CY_GET_REG32(ioPtr->drPtr) & (uint32)(~(uint32)((uint32)1u <
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 17


 886:Generated_Source\PSoC4/CapSense_Sensing.c ****             CyExitCriticalSection(interruptState);
 887:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 888:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 889:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_HIGHZ:
 890:Generated_Source\PSoC4/CapSense_Sensing.c ****             interruptState = CyEnterCriticalSection();
 891:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(ioPtr->drPtr, CY_GET_REG32(ioPtr->drPtr) & (uint32)~(uint32)((uint32)1u <<
 892:Generated_Source\PSoC4/CapSense_Sensing.c ****             CyExitCriticalSection(interruptState);
 893:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 894:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 895:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
 896:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSOR:
 897:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Enable sensor */
 898:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSDConnectSns(ioPtr);
 899:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 900:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 901:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSD_SHIELD_EN)
 902:Generated_Source\PSoC4/CapSense_Sensing.c ****                 case CapSense_SHIELD:
 903:Generated_Source\PSoC4/CapSense_Sensing.c ****                     /* Set appropriate bit in HSIOM register to configure pin to shield mode */
 904:Generated_Source\PSoC4/CapSense_Sensing.c ****                     interruptState = CyEnterCriticalSection();
 905:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CY_SET_REG32(ioPtr->hsiomPtr, CY_GET_REG32(ioPtr->hsiomPtr) | (CapSense_HSIOM_S
 906:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CyExitCriticalSection(interruptState);
 907:Generated_Source\PSoC4/CapSense_Sensing.c ****                     break;
 908:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_SHIELD_EN) */
 909:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 910:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 911:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_ENABLE == CapSense_CSX_EN) || \
 912:Generated_Source\PSoC4/CapSense_Sensing.c ****              (CapSense_ENABLE == CapSense_ISX_EN))
 913:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_TX_PIN:
 914:Generated_Source\PSoC4/CapSense_Sensing.c ****                 interruptState = CyEnterCriticalSection();
 915:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CY_SET_REG32(ioPtr->hsiomPtr, CY_GET_REG32(ioPtr->hsiomPtr) | (CapSense_HSIOM_SEL_C
 916:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CY_SET_REG32(ioPtr->pcPtr, CY_GET_REG32(ioPtr->pcPtr) | (CapSense_GPIO_STRGDRV << i
 917:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CyExitCriticalSection(interruptState);
 918:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 919:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 920:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_RX_PIN:
 921:Generated_Source\PSoC4/CapSense_Sensing.c ****                 interruptState = CyEnterCriticalSection();
 922:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CY_SET_REG32(ioPtr->hsiomPtr, CY_GET_REG32(ioPtr->hsiomPtr) | (CapSense_HSIOM_SEL_A
 923:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CY_SET_REG32(ioPtr->pcPtr, CY_GET_REG32(ioPtr->pcPtr) & ~(CapSense_GPIO_PC_MASK << 
 924:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CyExitCriticalSection(interruptState);
 925:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 926:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 927:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 928:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
 929:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Wrong state */
 930:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 931:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 932:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 933:Generated_Source\PSoC4/CapSense_Sensing.c ****         ioPtr++;
 934:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 935:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 936:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 937:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_EN)
 938:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
 939:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsCSDDisableMode
 940:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
 941:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
 942:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 18


 943:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function disables CSD mode.
 944:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
 945:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
 946:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  To disable CSD mode the following tasks are performed:
 947:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  1. Disconnect Cmod from AMUXBUS-A.
 948:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  2. Disconnect previous CSX electrode if it has been connected.
 949:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  3. Disconnect Csh from AMUXBUS-B.
 950:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  4. Disable Shield Electrodes.
 951:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
 952:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
 953:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsCSDDisableMode(void)
 954:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 955:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_ENABLE == CapSense_CSDV2) && \
 956:Generated_Source\PSoC4/CapSense_Sensing.c ****              (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN))
 957:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 958:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 newRegValue;
 959:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 960:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Disconnect IDACA and IDACB */
 961:Generated_Source\PSoC4/CapSense_Sensing.c ****             newRegValue = CY_GET_REG32(CapSense_SW_REFGEN_SEL_PTR);
 962:Generated_Source\PSoC4/CapSense_Sensing.c ****             newRegValue &= (uint32)(~CapSense_SW_REFGEN_SEL_SW_IAIB_MASK);
 963:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(CapSense_SW_REFGEN_SEL_PTR, newRegValue);
 964:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* ((CapSense_ENABLE == CapSense_CSDV2) && \
 965:Generated_Source\PSoC4/CapSense_Sensing.c ****                    (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN)) */
 966:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 967:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect Cmod from AMUXBUS-A using HSIOM registers */
 968:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_WriteBitsSafe(CapSense_CMOD_HSIOM_PTR, CapSense_CMOD_HSIOM_MASK, 0u);
 969:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 970:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect previous CSD electrode if it has been connected */
 971:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsCSDElectrodeCheck();
 972:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 973:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect Csh from AMUXBUS-B */
 974:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_ENABLE == CapSense_CSD_SHIELD_EN) && \
 975:Generated_Source\PSoC4/CapSense_Sensing.c ****              (CapSense_ENABLE == CapSense_CSD_SHIELD_TANK_EN))
 976:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CSH_HSIOM_PTR, CapSense_CSH_HSIOM_MASK, 0u);
 977:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 978:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 979:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_ENABLE == CapSense_CSD_SHIELD_EN) && \
 980:Generated_Source\PSoC4/CapSense_Sensing.c ****              (0u != CapSense_CSD_TOTAL_SHIELD_COUNT))
 981:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsCSDDisableShieldElectrodes();
 982:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 983:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 984:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 985:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 986:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 987:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSX_EN)
 988:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
 989:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsDisableCSXMode
 990:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
 991:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
 992:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
 993:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function disables CSX mode.
 994:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
 995:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
 996:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  To disable CSX mode the following tasks are performed:
 997:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  1. Disconnect CintA and CintB from AMUXBUS-A.
 998:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  2. Disconnect previous CSX electrode if it has been connected.
 999:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 19


1000:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
1001:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsDisableCSXMode(void)
1002:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1003:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect CintA from AMUXBUS-A using HSIOM registers */
1004:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_WriteBitsSafe(CapSense_CintA_HSIOM_PTR, CapSense_CintA_HSIOM_MASK, 0u);
1005:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect CintB from AMUXBUS-A using HSIOM registers */
1006:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_WriteBitsSafe(CapSense_CintB_HSIOM_PTR, CapSense_CintB_HSIOM_MASK, 0u);
1007:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect previous CSX electrode if it has been connected */
1008:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_CSXElectrodeCheck();
1009:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1010:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSX_EN) */
1011:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1012:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1013:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_ISX_EN)
1014:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
1015:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsDisableISXMode
1016:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
1017:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1018:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
1019:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function disables ISX mode.
1020:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1021:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
1022:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  To disable ISX mode the following tasks are performed:
1023:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  1. Disconnect CintA and CintB from AMUXBUS-A
1024:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  2. Disconnect previous ISX electrode if it has been connected
1025:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1026:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
1027:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsDisableISXMode(void)
1028:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1029:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect CintA from AMUXBUS-A using HSIOM registers */
1030:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_WriteBitsSafe(CapSense_CintA_HSIOM_PTR, CapSense_CintA_HSIOM_MASK, 0u);
1031:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect CintB from AMUXBUS-A using HSIOM registers */
1032:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_WriteBitsSafe(CapSense_CintB_HSIOM_PTR, CapSense_CintB_HSIOM_MASK, 0u);
1033:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect previous ISX electrode if it has been connected */
1034:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_ISXElectrodeCheck();
1035:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_DigPrt2_Stop();
1036:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_USES_PORT_3)
1037:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_DigPrt3_Stop();
1038:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
1039:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1040:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_ISX_EN) */
1041:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1042:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1043:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1044:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsSwitchSensingMode
1045:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1046:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1047:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1048:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function changes the Сomponent settings for operation in a specified
1049:Generated_Source\PSoC4/CapSense_Sensing.c **** *  sensing mode.
1050:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1051:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1052:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function performs following tasks:
1053:Generated_Source\PSoC4/CapSense_Sensing.c **** *  1. Releasing the CSD HW block.
1054:Generated_Source\PSoC4/CapSense_Sensing.c **** *  2. Disconnecting external capacitors.
1055:Generated_Source\PSoC4/CapSense_Sensing.c **** *  3. Setting new mode.
1056:Generated_Source\PSoC4/CapSense_Sensing.c **** *  4. Configuring HW to the new sensing mode.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 20


1057:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1058:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param mode
1059:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies the scan mode:
1060:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_SENSE_METHOD_CSD_E
1061:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_SENSE_METHOD_CSX_E
1062:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_SENSE_METHOD_ISX_E
1063:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_SENSE_METHOD_BIST_E
1064:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - CapSense_UNDEFINED_E
1065:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1066:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1067:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsSwitchSensingMode(CapSense_SENSE_METHOD_ENUM mode)
1068:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1069:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_currentSenseMethod != mode)
1070:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1071:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* The requested mode differs to the current one. Disable the current mode */
1072:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (CapSense_SENSE_METHOD_CSD_E == CapSense_currentSenseMethod)
1073:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1074:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSD_EN)
1075:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsCSDDisableMode();
1076:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
1077:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1078:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (CapSense_SENSE_METHOD_CSX_E == CapSense_currentSenseMethod)
1079:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1080:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSX_EN)
1081:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsDisableCSXMode();
1082:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSX_EN) */
1083:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1084:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (CapSense_SENSE_METHOD_ISX_E == CapSense_currentSenseMethod)
1085:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1086:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_ISX_EN)
1087:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsDisableISXMode();
1088:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_ISX_EN) */
1089:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1090:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (CapSense_SENSE_METHOD_BIST_E == CapSense_currentSenseMethod)
1091:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1092:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_SELF_TEST_EN)
1093:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_BistDisableMode();
1094:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_SELF_TEST_EN) */
1095:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1096:Generated_Source\PSoC4/CapSense_Sensing.c ****         else
1097:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1098:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_ADC_EN)
1099:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Release ADC resources */
1100:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (void)CapSense_AdcReleaseResources();
1101:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_ADC_EN) */
1102:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1103:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1104:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Enable the specified mode */
1105:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (CapSense_SENSE_METHOD_CSD_E == mode)
1106:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1107:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSD_EN)
1108:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Initialize CSD mode to guarantee configured CSD mode */
1109:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsCSDInitialize();
1110:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_currentSenseMethod = CapSense_SENSE_METHOD_CSD_E;
1111:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
1112:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1113:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (CapSense_SENSE_METHOD_CSX_E == mode)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 21


1114:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1115:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSX_EN)
1116:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Initialize CSX mode to guarantee configured CSX mode */
1117:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_CSXInitialize();
1118:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_currentSenseMethod = CapSense_SENSE_METHOD_CSX_E;
1119:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSX_EN) */
1120:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1121:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (CapSense_SENSE_METHOD_ISX_E == mode)
1122:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1123:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_ISX_EN)
1124:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Initialize ISX mode to guarantee configured ISX mode */
1125:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ISXInitialize();
1126:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_currentSenseMethod = CapSense_SENSE_METHOD_ISX_E;
1127:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_ISX_EN) */
1128:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1129:Generated_Source\PSoC4/CapSense_Sensing.c ****         else if (CapSense_SENSE_METHOD_BIST_E == mode)
1130:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1131:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_SELF_TEST_EN)
1132:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_BistInitialize();
1133:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_currentSenseMethod = CapSense_SENSE_METHOD_BIST_E;
1134:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_SELF_TEST_EN) */
1135:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1136:Generated_Source\PSoC4/CapSense_Sensing.c ****         else
1137:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1138:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_currentSenseMethod = CapSense_UNDEFINED_E;
1139:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1140:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1141:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1142:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1143:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1144:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1145:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsSetAllIOsState
1146:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1147:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1148:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1149:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets all electrodes into a default state.
1150:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1151:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1152:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets all the CSD/CSX IOs into a default state:
1153:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - HSIOM   - Disconnected, the GPIO mode.
1154:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - DM      - Strong drive.
1155:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - State   - Zero.
1156:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1157:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets all the ADC channels into a default state:
1158:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - HSIOM   - Disconnected, the GPIO mode.
1159:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - DM      - HiZ-Analog.
1160:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - State   - Zero.
1161:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1162:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is not recommended to call this function directly from the application
1163:Generated_Source\PSoC4/CapSense_Sensing.c **** *  layer.
1164:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1165:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1166:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsSetAllIOsState(uint32 state)
1167:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1168:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8  interruptState;
1169:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1170:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 loopIndex;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 22


1171:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1172:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 newPinPcVal;
1173:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 newPinHsiomVal;
1174:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1175:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 tmpPcDrRegValue;
1176:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 tmpHsiomRegValue;
1177:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1178:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_FLASH_IO_STRUCT const *snsIoPtr;
1179:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1180:Generated_Source\PSoC4/CapSense_Sensing.c ****     switch(state)
1181:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1182:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_SNS_CONNECTION_GROUND:
1183:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinPcVal = CY_SYS_PINS_DM_STRONG;
1184:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_GPIO;
1185:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
1186:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_SNS_CONNECTION_HIGHZ:
1187:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinPcVal = CY_SYS_PINS_DM_ALG_HIZ;
1188:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_GPIO;
1189:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
1190:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_SNS_CONNECTION_SHIELD:
1191:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinPcVal = CY_SYS_PINS_DM_ALG_HIZ;
1192:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_CSD_SHIELD;
1193:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
1194:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
1195:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinPcVal = CY_SYS_PINS_DM_STRONG;
1196:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_GPIO;
1197:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
1198:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1199:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1200:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Loop through all electrodes */
1201:Generated_Source\PSoC4/CapSense_Sensing.c ****     snsIoPtr = &CapSense_ioList[0u];
1202:Generated_Source\PSoC4/CapSense_Sensing.c ****     for (loopIndex = 0u; loopIndex < CapSense_TOTAL_ELECTRODES; loopIndex++)
1203:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1204:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
1205:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1206:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpHsiomRegValue = CY_GET_REG32 (snsIoPtr->hsiomPtr);
1207:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpHsiomRegValue &= ~(snsIoPtr->hsiomMask);
1208:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->hsiomPtr, tmpHsiomRegValue);
1209:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1210:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue = CY_GET_REG32 (snsIoPtr->pcPtr);
1211:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue &= ~(CapSense_GPIO_PC_MASK << snsIoPtr->shift);
1212:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue |=  (newPinPcVal << snsIoPtr->shift);
1213:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->pcPtr, tmpPcDrRegValue);
1214:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1215:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpHsiomRegValue |=  (newPinHsiomVal << snsIoPtr->hsiomShift);
1216:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->hsiomPtr, tmpHsiomRegValue);
1217:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1218:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue = CY_GET_REG32 (snsIoPtr->drPtr);
1219:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue &= ~(snsIoPtr->mask);
1220:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->drPtr, tmpPcDrRegValue);
1221:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1222:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
1223:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1224:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Get next electrode */
1225:Generated_Source\PSoC4/CapSense_Sensing.c ****         snsIoPtr++;
1226:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1227:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 23


1228:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if ((CapSense_ENABLE == CapSense_CSD_EN) &&\
1229:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_ENABLE == CapSense_CSD_SHIELD_EN) &&\
1230:Generated_Source\PSoC4/CapSense_Sensing.c ****          (0u != CapSense_CSD_TOTAL_SHIELD_COUNT))
1231:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsCSDSetShieldElectrodesState(state);
1232:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
1233:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1234:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if(CapSense_ENABLE == CapSense_ADC_EN)
1235:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_ClearAdcChannels();
1236:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
1237:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1238:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1239:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1240:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_ADC_EN)
1241:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1242:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsReleaseResources()
1243:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1244:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1245:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1246:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This function sets the resources that do not belong to the sensing HW block to
1247:Generated_Source\PSoC4/CapSense_Sensing.c **** *  default state.
1248:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1249:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1250:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The function performs following tasks:
1251:Generated_Source\PSoC4/CapSense_Sensing.c **** *  1. Checks if CSD block busy and returns error if it is busy
1252:Generated_Source\PSoC4/CapSense_Sensing.c **** *  2. Disconnects integration capacitors (CintA, CintB for CSX mode and
1253:Generated_Source\PSoC4/CapSense_Sensing.c **** *     Cmod for CSD mode)
1254:Generated_Source\PSoC4/CapSense_Sensing.c **** *  3. Disconnect electroded if they have been connected.
1255:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1256:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
1257:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the status of the operation:
1258:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - Zero        - Resources released successfully.
1259:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - Non-zero    - One or more errors occurred in releasing process.
1260:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1261:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1262:Generated_Source\PSoC4/CapSense_Sensing.c **** cystatus CapSense_SsReleaseResources(void)
1263:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1264:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus busyStatus = CYRET_SUCCESS;
1265:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1266:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_SW_STS_BUSY == (CapSense_dsRam.status & CapSense_SW_STS_BUSY))
1267:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1268:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Previous widget is being scanned. Return error. */
1269:Generated_Source\PSoC4/CapSense_Sensing.c ****         busyStatus = CYRET_INVALID_STATE;
1270:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1271:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
1272:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1273:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
1274:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsDisableCSXMode();
1275:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSX_EN) */
1276:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1277:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_ISX_EN)
1278:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsDisableISXMode();
1279:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_ISX_EN) */
1280:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1281:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
1282:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsCSDDisableMode();
1283:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
1284:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 24


1285:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_SELF_TEST_EN)
1286:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_BistDisableMode();
1287:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_SELF_TEST_EN) */
1288:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1289:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsSetAllIOsState((uint32)CapSense_SNS_CONNECTION_GROUND);
1290:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1291:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
1292:Generated_Source\PSoC4/CapSense_Sensing.c ****          * Reset of the currentSenseMethod variable to make sure that the next
1293:Generated_Source\PSoC4/CapSense_Sensing.c ****          * call of SetupWidget() API setups the correct widget mode
1294:Generated_Source\PSoC4/CapSense_Sensing.c ****          */
1295:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_currentSenseMethod = CapSense_UNDEFINED_E;
1296:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1297:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1298:Generated_Source\PSoC4/CapSense_Sensing.c ****     return busyStatus;
1299:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1300:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_ADC_EN) */
1301:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1302:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1303:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1304:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsPostAllWidgetsScan
1305:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1306:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1307:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1308:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The ISR function for multiple widget scanning implementation.
1309:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1310:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1311:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This is the function used by the CapSense ISR to implement multiple widget
1312:Generated_Source\PSoC4/CapSense_Sensing.c **** *  scanning.
1313:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Should not be used by the application layer.
1314:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1315:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1316:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsPostAllWidgetsScan(void)
1317:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1318:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
1319:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  1. Increment widget index
1320:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  2. Check if all the widgets are scanned
1321:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  3. If all the widgets are not scanned, set up and scan next widget
1322:Generated_Source\PSoC4/CapSense_Sensing.c ****     */
1323:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (1u != CapSense_TOTAL_WIDGETS)
1324:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus postScanStatus;
1325:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1326:Generated_Source\PSoC4/CapSense_Sensing.c ****         do
1327:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1328:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_widgetIndex++;
1329:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1330:Generated_Source\PSoC4/CapSense_Sensing.c ****             postScanStatus = CapSense_SetupWidget((uint32)CapSense_widgetIndex);
1331:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1332:Generated_Source\PSoC4/CapSense_Sensing.c ****             if (CYRET_SUCCESS == postScanStatus)
1333:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1334:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if((CapSense_TOTAL_WIDGETS - 1u) == CapSense_widgetIndex)
1335:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1336:Generated_Source\PSoC4/CapSense_Sensing.c ****                     /* The last widget will be scanned. Reset flag to skip configuring the next wid
1337:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CapSense_requestScanAllWidget = CapSense_DISABLE;
1338:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1339:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (void)CapSense_Scan();
1340:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
1341:Generated_Source\PSoC4/CapSense_Sensing.c ****             else if((CapSense_TOTAL_WIDGETS - 1u) == CapSense_widgetIndex)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 25


1342:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1343:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if ((CapSense_ENABLE == CapSense_BLOCK_OFF_AFTER_SCAN_EN) && \
1344:Generated_Source\PSoC4/CapSense_Sensing.c ****                      (CapSense_ENABLE == CapSense_CSD_EN))
1345:Generated_Source\PSoC4/CapSense_Sensing.c ****                     if (CapSense_SENSE_METHOD_CSD_E ==
1346:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[CapSense_widgetIndex]
1347:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
1348:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Disable the CSD block */
1349:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CY_SET_REG32(CapSense_CONFIG_PTR, CapSense_configCsd);
1350:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
1351:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif /* ((CapSense_ENABLE == CapSense_BLOCK_OFF_AFTER_SCAN_EN) && \
1352:Generated_Source\PSoC4/CapSense_Sensing.c ****                            (CapSense_ENABLE == CapSense_CSD_EN)) */
1353:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1354:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Update scan Counter */
1355:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.scanCounter++;
1356:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* All widgets are totally processed. Reset BUSY flag */
1357:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status &= ~CapSense_SW_STS_BUSY;
1358:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1359:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Update status with with the failure */
1360:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status &= ~CapSense_STATUS_ERR_MASK;
1361:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status |= ((postScanStatus & CapSense_STATUS_ERR_SIZE) << CapSense_S
1362:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1363:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set postScanStatus to exit the while loop */
1364:Generated_Source\PSoC4/CapSense_Sensing.c ****                 postScanStatus = CYRET_SUCCESS;
1365:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
1366:Generated_Source\PSoC4/CapSense_Sensing.c ****             else
1367:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1368:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Update status with with the failure. Configure the next widget in while() loop *
1369:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status &= ~CapSense_STATUS_ERR_MASK;
1370:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status |= ((postScanStatus & CapSense_STATUS_ERR_SIZE) << CapSense_S
1371:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
1372:Generated_Source\PSoC4/CapSense_Sensing.c ****         } while (CYRET_SUCCESS != postScanStatus);
1373:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* (1u != CapSense_TOTAL_WIDGETS) */
1374:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1375:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1376:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1377:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1378:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsIsrInitialize
1379:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1380:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1381:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1382:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Enables and initializes for the function pointer for a callback for the ISR.
1383:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1384:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1385:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The "address" is a special type cyisraddress defined by Cylib. This function
1386:Generated_Source\PSoC4/CapSense_Sensing.c **** *  is used by Component APIs and should not be used by an application program for
1387:Generated_Source\PSoC4/CapSense_Sensing.c **** *  proper working of the Component.
1388:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1389:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param address
1390:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The address of the function to be called when interrupt is fired.
1391:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1392:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1393:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsIsrInitialize(cyisraddress address)
1394:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1395:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_ISR_StartEx(address);
1396:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1397:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1398:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 26


1399:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1400:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsSetModClkClockDivider
1401:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1402:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1403:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1404:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets the divider values for the modulator clock and then starts
1405:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the modulator clock.
1406:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1407:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1408:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is not recommended to call this function directly by the application layer.
1409:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is used by initialization, widget APIs or wakeup functions to
1410:Generated_Source\PSoC4/CapSense_Sensing.c **** *  enable the clocks.
1411:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1412:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param modClk
1413:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The divider value for the modulator clock.
1414:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1415:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1416:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsSetModClkClockDivider(uint32 modClk)
1417:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1418:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK)
1419:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Stop modulator clock */
1420:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_MODCLK_CMD_PTR,
1421:Generated_Source\PSoC4/CapSense_Sensing.c ****                  ((uint32)CapSense_ModClk__DIV_ID <<
1422:Generated_Source\PSoC4/CapSense_Sensing.c ****                  CapSense_MODCLK_CMD_DIV_SHIFT)|
1423:Generated_Source\PSoC4/CapSense_Sensing.c ****                  ((uint32)CapSense_MODCLK_CMD_DISABLE_MASK));
1424:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1425:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
1426:Generated_Source\PSoC4/CapSense_Sensing.c ****      * Set divider value for sense modClk.
1427:Generated_Source\PSoC4/CapSense_Sensing.c ****      * 1u is subtracted from modClk because Divider register value 0 corresponds
1428:Generated_Source\PSoC4/CapSense_Sensing.c ****      * to dividing by 1.
1429:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
1430:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_MODCLK_DIV_PTR, ((modClk - 1u) << 8u));
1431:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1432:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Check whether previous modulator clock start command has finished. */
1433:Generated_Source\PSoC4/CapSense_Sensing.c ****     while(0u != (CY_GET_REG32(CapSense_MODCLK_CMD_PTR) & CapSense_MODCLK_CMD_ENABLE_MASK))
1434:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1435:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Wait until previous modulator clock start command has finished */
1436:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1437:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1438:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Start modulator clock, aligned to HFCLK */
1439:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_MODCLK_CMD_PTR,
1440:Generated_Source\PSoC4/CapSense_Sensing.c ****                  (uint32)(((uint32)CapSense_ModClk__DIV_ID << CapSense_MODCLK_CMD_DIV_SHIFT) |
1441:Generated_Source\PSoC4/CapSense_Sensing.c ****                   ((uint32)CapSense_ModClk__PA_DIV_ID << CapSense_MODCLK_CMD_PA_DIV_SHIFT) |
1442:Generated_Source\PSoC4/CapSense_Sensing.c ****                   CapSense_MODCLK_CMD_ENABLE_MASK));
1443:Generated_Source\PSoC4/CapSense_Sensing.c **** #else
1444:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 newRegValue;
1445:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1446:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Clear bit to disable ModClk clock. */
1447:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_MODCLK_CMD_PTR,
1448:Generated_Source\PSoC4/CapSense_Sensing.c ****                  CY_GET_REG32(CapSense_MODCLK_CMD_PTR) &
1449:Generated_Source\PSoC4/CapSense_Sensing.c ****                  (uint32)(~CapSense_ModClk__ENABLE_MASK));
1450:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1451:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
1452:Generated_Source\PSoC4/CapSense_Sensing.c ****      * Update ModClk clock divider.
1453:Generated_Source\PSoC4/CapSense_Sensing.c ****      * 1u is subtracted from modClk because Divider register value has range (0-65535).
1454:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
1455:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue = CY_GET_REG32(CapSense_MODCLK_DIV_PTR) & (uint32)(~(uint32)CapSense_ModClk__DIVIDE
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 27


1456:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue |= (modClk - 1u);
1457:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_MODCLK_DIV_PTR, newRegValue);
1458:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1459:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Set bit to enable ModClk clock. */
1460:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_MODCLK_CMD_PTR,
1461:Generated_Source\PSoC4/CapSense_Sensing.c ****                  CY_GET_REG32(CapSense_MODCLK_CMD_PTR) |
1462:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ModClk__ENABLE_MASK);
1463:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK) */
1464:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1465:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1466:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1467:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1468:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsSetSnsClockDivider
1469:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1470:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1471:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1472:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets the divider values for the sense clock and then starts
1473:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the sense clock.
1474:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1475:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1476:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is not recommended to call this function directly by the application layer.
1477:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is used by initialization, widget APIs or wakeup functions to
1478:Generated_Source\PSoC4/CapSense_Sensing.c **** *  enable the clocks.
1479:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1480:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param
1481:Generated_Source\PSoC4/CapSense_Sensing.c **** *  snsClk The divider value for the sense clock.
1482:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1483:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1484:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsSetSnsClockDivider(uint32 snsClk)
1485:Generated_Source\PSoC4/CapSense_Sensing.c **** {
1486:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSDV2)
1487:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 newRegValue;
1488:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1489:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
1490:Generated_Source\PSoC4/CapSense_Sensing.c ****      * Set divider value for sense clock.
1491:Generated_Source\PSoC4/CapSense_Sensing.c ****      * 1u is subtracted from snsClk because SENSE_DIV value 0 corresponds
1492:Generated_Source\PSoC4/CapSense_Sensing.c ****      * to dividing by 1.
1493:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
1494:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue = CY_GET_REG32(CapSense_SENSE_PERIOD_PTR);
1495:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue &= (uint32)(~CapSense_SENSE_PERIOD_SENSE_DIV_MASK);
1496:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue |= snsClk - 1u;
1497:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_SENSE_PERIOD_PTR, newRegValue);
1498:Generated_Source\PSoC4/CapSense_Sensing.c **** #else
1499:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK)
1500:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Stop sense clock clock   */
1501:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_SNSCLK_CMD_PTR,
1502:Generated_Source\PSoC4/CapSense_Sensing.c ****                      ((uint32)CapSense_SnsClk__DIV_ID <<
1503:Generated_Source\PSoC4/CapSense_Sensing.c ****                      CapSense_SNSCLK_CMD_DIV_SHIFT)|
1504:Generated_Source\PSoC4/CapSense_Sensing.c ****                      ((uint32)CapSense_SNSCLK_CMD_DISABLE_MASK));
1505:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1506:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
1507:Generated_Source\PSoC4/CapSense_Sensing.c ****          * Set divider value for sense clock.
1508:Generated_Source\PSoC4/CapSense_Sensing.c ****          * 1u is subtracted from snsClk because Divider register value 0 corresponds
1509:Generated_Source\PSoC4/CapSense_Sensing.c ****          * to dividing by 1.
1510:Generated_Source\PSoC4/CapSense_Sensing.c ****          */
1511:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_SNSCLK_DIV_PTR, ((snsClk - 1u) << 8u));
1512:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 28


1513:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Check whether previous sense clock start command has finished. */
1514:Generated_Source\PSoC4/CapSense_Sensing.c ****         while(0u != (CY_GET_REG32(CapSense_SNSCLK_CMD_PTR) & CapSense_SNSCLK_CMD_ENABLE_MASK))
1515:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1516:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Wait until previous sense clock start command has finished. */
1517:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1518:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1519:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Start sense clock aligned to previously started modulator clock. */
1520:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_SNSCLK_CMD_PTR,
1521:Generated_Source\PSoC4/CapSense_Sensing.c ****                      (uint32)(((uint32)CapSense_SnsClk__DIV_ID << CapSense_SNSCLK_CMD_DIV_SHIFT) |
1522:Generated_Source\PSoC4/CapSense_Sensing.c ****                       ((uint32)CapSense_ModClk__PA_DIV_ID << CapSense_SNSCLK_CMD_PA_DIV_SHIFT) |
1523:Generated_Source\PSoC4/CapSense_Sensing.c ****                       CapSense_SNSCLK_CMD_ENABLE_MASK));
1524:Generated_Source\PSoC4/CapSense_Sensing.c ****     #else
1525:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 newRegValue;
1526:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1527:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Clear bit to disable SnsClk clock. */
1528:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_SNSCLK_CMD_PTR,
1529:Generated_Source\PSoC4/CapSense_Sensing.c ****                      CY_GET_REG32(CapSense_SNSCLK_CMD_PTR) &
1530:Generated_Source\PSoC4/CapSense_Sensing.c ****                      (uint32)(~(uint32)CapSense_SnsClk__ENABLE_MASK));
1531:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1532:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
1533:Generated_Source\PSoC4/CapSense_Sensing.c ****          * Update snsClk clock divider.
1534:Generated_Source\PSoC4/CapSense_Sensing.c ****          * 1u is subtracted from snsClk because Divider register value has range (0-65535).
1535:Generated_Source\PSoC4/CapSense_Sensing.c ****          */
1536:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_SNSCLK_DIV_PTR) & (uint32)(~(uint32)CapSense_SnsClk__DI
1537:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue |= (snsClk - 1u);
1538:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_SNSCLK_DIV_PTR, newRegValue);
1539:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1540:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Set bit to enable SnsClk clock. */
1541:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_SNSCLK_CMD_PTR,
1542:Generated_Source\PSoC4/CapSense_Sensing.c ****                      CY_GET_REG32(CapSense_SNSCLK_CMD_PTR) |
1543:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CapSense_SnsClk__ENABLE_MASK);
1544:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* (CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK) */
1545:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
1546:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1547:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1548:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1549:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
1550:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsSetClockDividers
1551:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
1552:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1553:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
1554:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets the divider values for sense and modulator clocks and then starts
1555:Generated_Source\PSoC4/CapSense_Sensing.c **** *  a modulator clock-phase aligned to HFCLK and sense clock-phase aligned to
1556:Generated_Source\PSoC4/CapSense_Sensing.c **** *  the modulator clock.
1557:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1558:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
1559:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is not recommended to call this function directly by the application layer.
1560:Generated_Source\PSoC4/CapSense_Sensing.c **** *  It is used by initialization, widget APIs or wakeup functions to
1561:Generated_Source\PSoC4/CapSense_Sensing.c **** *  enable the clocks.
1562:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1563:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param
1564:Generated_Source\PSoC4/CapSense_Sensing.c **** *  snsClk The divider value for the sense clock.
1565:Generated_Source\PSoC4/CapSense_Sensing.c **** *  modClk The divider value for the modulator clock.
1566:Generated_Source\PSoC4/CapSense_Sensing.c **** *
1567:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
1568:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsSetClockDividers(uint32 snsClk, uint32 modClk)
1569:Generated_Source\PSoC4/CapSense_Sensing.c **** {
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 29


1570:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Configure Mod clock */
1571:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_SsSetModClkClockDivider(modClk);
1572:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1573:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Configure Sns clock */
1574:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_SsSetSnsClockDivider(snsClk);
1575:Generated_Source\PSoC4/CapSense_Sensing.c **** }
1576:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1577:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1578:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ANYMODE_AUTOCAL)
1579:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
1580:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_CalibrateWidget
1581:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
1582:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1583:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
1584:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Calibrates the IDACs for all the sensors in the specified widget to the default
1585:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  target, this function detects the sensing method used by the
1586:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  widget prior to calibration.
1587:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1588:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
1589:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function performs exactly the same tasks as
1590:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  CapSense_CalibrateAllWidgets, but only for a specified widget.
1591:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function detects the sensing method used by the widgets and uses
1592:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  the Enable compensation IDAC parameter.
1593:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \if SECTION_I_REP
1594:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  For ISX mode, the frequency is also calibrated.
1595:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \endif
1596:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1597:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \if SECTION_C_LOW_LEVEL
1598:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function is available when the CSD and/or CSX Enable IDAC
1599:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  auto-calibration parameter is enabled.
1600:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \endif
1601:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \if SECTION_I_REP
1602:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function is available when the ISX Enable auto-calibration parameter
1603:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  is enabled.
1604:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \endif
1605:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1606:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param widgetId
1607:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Specifies the ID number of the widget to calibrate its raw count.
1608:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  A macro for the widget ID can be found in the
1609:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  CapSense Configuration header file defined as
1610:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  CapSense_<WidgetName>_WDGT_ID.
1611:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1612:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \return
1613:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Returns the status of the specified widget calibration:
1614:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_SUCCESS - The operation is successfully completed.
1615:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_BAD_PARAM - The input parameter is invalid.
1616:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_BAD_DATA - The calibration failed and the Component may not
1617:Generated_Source\PSoC4/CapSense_Sensing.c ****     *    operate as expected.
1618:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1619:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
1620:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus CapSense_CalibrateWidget(uint32 widgetId)
1621:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1622:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus calibrateStatus = CYRET_SUCCESS;
1623:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1624:Generated_Source\PSoC4/CapSense_Sensing.c ****         do
1625:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1626:Generated_Source\PSoC4/CapSense_Sensing.c ****             if (CapSense_TOTAL_WIDGETS <= widgetId)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 30


1627:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1628:Generated_Source\PSoC4/CapSense_Sensing.c ****                 calibrateStatus = CYRET_BAD_PARAM;
1629:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
1630:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1631:Generated_Source\PSoC4/CapSense_Sensing.c ****             /*
1632:Generated_Source\PSoC4/CapSense_Sensing.c ****              *  Check if widget id is valid, specified widget did not
1633:Generated_Source\PSoC4/CapSense_Sensing.c ****              *  detect any faults conditions if BIST is enabled.
1634:Generated_Source\PSoC4/CapSense_Sensing.c ****              */
1635:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_SELF_TEST_EN)
1636:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (0u != CapSense_GET_WIDGET_EN_STATUS(widgetId))
1637:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1638:Generated_Source\PSoC4/CapSense_Sensing.c ****                     calibrateStatus = CYRET_SUCCESS;
1639:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1640:Generated_Source\PSoC4/CapSense_Sensing.c ****                 else
1641:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1642:Generated_Source\PSoC4/CapSense_Sensing.c ****                     calibrateStatus = CYRET_INVALID_STATE;
1643:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1644:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif  /* (CapSense_ENABLE == CapSense_SELF_TEST_EN) */
1645:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1646:Generated_Source\PSoC4/CapSense_Sensing.c ****             if (CYRET_SUCCESS != calibrateStatus)
1647:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1648:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Exit from the loop because of a fail */
1649:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
1650:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
1651:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1652:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* If both CSD and CSX are enabled, calibrate widget using sensing method */
1653:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_MANY_WIDGET_METHODS_EN)
1654:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Check widget sensing method and call appropriate APIs */
1655:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (CapSense_ENABLE == CapSense_ISX_IDAC_AUTOCAL_EN)
1656:Generated_Source\PSoC4/CapSense_Sensing.c ****                     if (CapSense_SENSE_METHOD_ISX_E ==
1657:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[widgetId]))
1658:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
1659:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Calibrate CSX widget */
1660:Generated_Source\PSoC4/CapSense_Sensing.c ****                        CapSense_ISXCalibrateWidget(widgetId, CapSense_ISX_RAWCOUNT_CAL_LEVEL);
1661:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
1662:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif  /* (CapSense_ENABLE == CapSense_ISX_IDAC_AUTOCAL_EN) */
1663:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1664:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Check widget sensing method and call appropriate APIs */
1665:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (CapSense_ENABLE == CapSense_CSX_IDAC_AUTOCAL_EN)
1666:Generated_Source\PSoC4/CapSense_Sensing.c ****                     if (CapSense_SENSE_METHOD_CSX_E ==
1667:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[widgetId]))
1668:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
1669:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Calibrate CSX widget */
1670:Generated_Source\PSoC4/CapSense_Sensing.c ****                        calibrateStatus = CapSense_CSXCalibrateWidget(widgetId, CapSense_CSX_RAWCOUN
1671:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
1672:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif  /* (CapSense_ENABLE == CapSense_CSX_IDAC_AUTOCAL_EN) */
1673:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1674:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (CapSense_ENABLE == CapSense_CSD_IDAC_AUTOCAL_EN)
1675:Generated_Source\PSoC4/CapSense_Sensing.c ****                     if (CapSense_SENSE_METHOD_CSD_E ==
1676:Generated_Source\PSoC4/CapSense_Sensing.c ****                         CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[widgetId]))
1677:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
1678:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Calibrate CSD widget */
1679:Generated_Source\PSoC4/CapSense_Sensing.c ****                         calibrateStatus = CapSense_CSDCalibrateWidget(widgetId, CapSense_CSD_RAWCOU
1680:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
1681:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif  /* (CapSense_ENABLE == CapSense_CSD_IDAC_AUTOCAL_EN) */
1682:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1683:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* If only CSD is enabled, calibrate CSD sensor */
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 31


1684:Generated_Source\PSoC4/CapSense_Sensing.c ****             #elif (CapSense_ENABLE == CapSense_CSD_EN)
1685:Generated_Source\PSoC4/CapSense_Sensing.c ****                 calibrateStatus = CapSense_CSDCalibrateWidget(widgetId, CapSense_CSD_RAWCOUNT_CAL_L
1686:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1687:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* If only CSX is enabled, call CSX scan */
1688:Generated_Source\PSoC4/CapSense_Sensing.c ****             #elif (CapSense_ENABLE == CapSense_CSX_EN)
1689:Generated_Source\PSoC4/CapSense_Sensing.c ****                 calibrateStatus = CapSense_CSXCalibrateWidget(widgetId, CapSense_CSX_RAWCOUNT_CAL_L
1690:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1691:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* If only ISX is enabled, call ISX scan */
1692:Generated_Source\PSoC4/CapSense_Sensing.c ****             #elif (CapSense_ENABLE == CapSense_ISX_EN)
1693:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_ISXCalibrateWidget(widgetId, CapSense_ISX_RAWCOUNT_CAL_LEVEL);
1694:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1695:Generated_Source\PSoC4/CapSense_Sensing.c ****             #else
1696:Generated_Source\PSoC4/CapSense_Sensing.c ****                 calibrateStatus = CYRET_UNKNOWN;
1697:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
1698:Generated_Source\PSoC4/CapSense_Sensing.c ****         } while (0u);
1699:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1700:Generated_Source\PSoC4/CapSense_Sensing.c ****         return calibrateStatus;
1701:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1702:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1703:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1704:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
1705:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_CalibrateAllWidgets
1706:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
1707:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1708:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
1709:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Calibrates the IDACs for all the widgets in the Component to the default
1710:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  target, this function detects the sensing method used by the widgets
1711:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  prior to calibration.
1712:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1713:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
1714:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Calibrates the IDACs for all the widgets in the Component to the default
1715:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  target value. This function detects the sensing method used by the widgets
1716:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  and regards the Enable compensation IDAC parameter.
1717:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \if SECTION_I_REP
1718:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  For ISX mode, the frequency is also calibrated.
1719:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \endif
1720:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1721:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \cond SECTION_C_LOW_LEVEL
1722:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function is available when the CSD and/or CSX Enable IDAC
1723:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  auto-calibration parameter is enabled.
1724:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \endcond
1725:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \if SECTION_I_REP
1726:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function is available when the ISX Enable Auto-calibration parameter
1727:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  is enabled.
1728:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  \endif
1729:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1730:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \return
1731:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Returns the status of the calibration process:
1732:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_SUCCESS - The operation is successfully completed.
1733:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_BAD_DATA - The calibration failed and the Component may not
1734:Generated_Source\PSoC4/CapSense_Sensing.c ****     *    operate as expected.
1735:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1736:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
1737:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus CapSense_CalibrateAllWidgets(void)
1738:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1739:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus calibrateStatus = CYRET_SUCCESS;
1740:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 wdgtIndex;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 32


1741:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1742:Generated_Source\PSoC4/CapSense_Sensing.c ****         for (wdgtIndex = 0u; wdgtIndex < CapSense_TOTAL_WIDGETS; wdgtIndex++)
1743:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1744:Generated_Source\PSoC4/CapSense_Sensing.c ****             calibrateStatus |= CapSense_CalibrateWidget(wdgtIndex);
1745:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1746:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1747:Generated_Source\PSoC4/CapSense_Sensing.c ****         return calibrateStatus;
1748:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
1749:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ANYMODE_AUTOCAL) */
1750:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1751:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1752:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_CSD_SS_DIS != CapSense_CSD_AUTOTUNE)
1753:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
1754:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsAutoTuneWidget
1755:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
1756:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1757:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
1758:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This API performs the parameters auto-tuning for the optimal CapSense
1759:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  operation for a desired widget.
1760:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1761:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
1762:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This API performs the following:
1763:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Calibrates Modulator and Compensation IDACs.
1764:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Tunes the Sense Clock optimal value to get a Sense Clock period greater than
1765:Generated_Source\PSoC4/CapSense_Sensing.c ****     *    2*5*R*Cp.
1766:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Calculates the resolution for the optimal finger capacitance.
1767:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1768:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param widgetId
1769:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Specifies the ID number of a desired widget.
1770:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  A macro for the widget ID can be found in the
1771:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  CapSense Configuration header file defined as
1772:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  CapSense_<WidgetName>_WDGT_ID.
1773:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1774:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \return
1775:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Returns the status of the operation:
1776:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Zero     - All the widgets are auto-tuned successfully.
1777:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Non-zero - Auto-tuning failed for any widget.
1778:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
1779:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
1780:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus CapSense_SsAutoTuneWidget(uint32 widgetId)
1781:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
1782:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus autoTuneStatus = CYRET_SUCCESS;
1783:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1784:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 snsIndex;
1785:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 inputSnsClk;
1786:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 minSnsClkDiv;
1787:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 minSnsClkDivTmp;
1788:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1789:Generated_Source\PSoC4/CapSense_Sensing.c ****         AUTO_TUNE_CONFIG_TYPE autoTuneConfig;
1790:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1791:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 maxRaw = 0u;
1792:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 maxCp = 0u;
1793:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 maxIdacComp = 0u;
1794:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1795:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
1796:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 maxCpSnsId = 0u;
1797:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 maxCpRowSnsId = 0u;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 33


1798:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
1799:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1800:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_FLASH_WD_STRUCT const *ptrFlashWidget = &CapSense_dsFlash.wdgtArray[widgetId];
1801:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_RAM_WD_BASE_STRUCT *ptrRamWidget = (CapSense_RAM_WD_BASE_STRUCT *)ptrFlashWidget->
1802:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_RAM_SNS_STRUCT *ptrRamSensor = ptrFlashWidget->ptr2SnsRam;
1803:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1804:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Find input of sensor clock frequency */
1805:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSDV2)
1806:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Dividers are chained (Fourth-generation HW block). Flip flop is not available */
1807:Generated_Source\PSoC4/CapSense_Sensing.c ****             inputSnsClk = ((uint32)CYDEV_BCLK__HFCLK__KHZ / (uint32)CapSense_dsRam.modCsdClk);
1808:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1809:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Minimum value of SnaClk divider that is allowed for all Fourth-generation
1810:Generated_Source\PSoC4/CapSense_Sensing.c ****              * CSD HW block based devices.
1811:Generated_Source\PSoC4/CapSense_Sensing.c ****             */
1812:Generated_Source\PSoC4/CapSense_Sensing.c ****             minSnsClkDiv = CapSense_MIN_SNS_CLK_DIVIDER;
1813:Generated_Source\PSoC4/CapSense_Sensing.c ****         #elif (CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK)
1814:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Dividers are not chained */
1815:Generated_Source\PSoC4/CapSense_Sensing.c ****             inputSnsClk = CYDEV_BCLK__HFCLK__KHZ >> CapSense_FLIP_FLOP_DIV;
1816:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1817:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Minimum value of SnaClk divider that is allowed for PSoC 4100 and PSoC 4200
1818:Generated_Source\PSoC4/CapSense_Sensing.c ****                device families.
1819:Generated_Source\PSoC4/CapSense_Sensing.c ****             */
1820:Generated_Source\PSoC4/CapSense_Sensing.c ****             minSnsClkDiv = CapSense_dsRam.modCsdClk;
1821:Generated_Source\PSoC4/CapSense_Sensing.c ****         #else
1822:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Dividers are chained (PSoC 4100, PSoC 4200) */
1823:Generated_Source\PSoC4/CapSense_Sensing.c ****             inputSnsClk = (CYDEV_BCLK__HFCLK__KHZ / CapSense_dsRam.modCsdClk) >> CapSense_FLIP_FLOP
1824:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1825:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Minimum value of SnaClk divider that is allowed for all Fourth-generation
1826:Generated_Source\PSoC4/CapSense_Sensing.c ****              * CSD HW block based device except PSoC 4100 and PSoC 4200 device families.
1827:Generated_Source\PSoC4/CapSense_Sensing.c ****             */
1828:Generated_Source\PSoC4/CapSense_Sensing.c ****             minSnsClkDiv = CapSense_MIN_SNS_CLK_DIVIDER;
1829:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
1830:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1831:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Minimum value of SnsClk divider required to ensure the CSD HW block
1832:Generated_Source\PSoC4/CapSense_Sensing.c ****          * operation in allowed frequency range.
1833:Generated_Source\PSoC4/CapSense_Sensing.c ****         */
1834:Generated_Source\PSoC4/CapSense_Sensing.c ****         minSnsClkDivTmp = inputSnsClk * CapSense_AUTOTUNE_CAL_UNITS;
1835:Generated_Source\PSoC4/CapSense_Sensing.c ****         minSnsClkDivTmp /= CapSense_CSD_SNS_FREQ_KHZ_MAX;
1836:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1837:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (minSnsClkDiv < minSnsClkDivTmp)
1838:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1839:Generated_Source\PSoC4/CapSense_Sensing.c ****             minSnsClkDiv = minSnsClkDivTmp;
1840:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1841:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1842:Generated_Source\PSoC4/CapSense_Sensing.c ****         minSnsClkDiv = (minSnsClkDiv + (CapSense_AUTOTUNE_CAL_UNITS - 1u)) / CapSense_AUTOTUNE_CAL_
1843:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1844:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Make divider even */
1845:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (0u != (minSnsClkDiv & 0x01u))
1846:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1847:Generated_Source\PSoC4/CapSense_Sensing.c ****             minSnsClkDiv++;
1848:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1849:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1850:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Initialize auto-tuning configuration structure */
1851:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.snsClkInputClock = (uint16)inputSnsClk;
1852:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.snsClkConstantR = CapSense_CSD_SNSCLK_R_CONST;
1853:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.vRef = CapSense_CSD_VREF_MV;
1854:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.fingerCap = ptrRamWidget->fingerCap;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 34


1855:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.sigPFC = &ptrRamWidget->sigPFC;
1856:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1857:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
1858:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Autotune phase #1:
1859:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - performing the first calibration at fixed settings
1860:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - getting maximum sensor Cp
1861:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - getting sense clock frequency based on Cp
1862:Generated_Source\PSoC4/CapSense_Sensing.c ****         */
1863:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1864:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrRamWidget->resolution = CapSense_AUTOTUNE_CALIBRATION_RESOLUTION;
1865:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1866:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrRamWidget->snsClk = (uint16)(inputSnsClk / CapSense_AUTOTUNE_CALIBRATION_FREQ_KHZ);
1867:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrRamWidget->snsClkSource = (uint8)CapSense_CLK_SOURCE_DIRECT;
1868:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1869:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
1870:Generated_Source\PSoC4/CapSense_Sensing.c ****             ptrRamWidget->rowSnsClk = (uint16)(inputSnsClk / CapSense_AUTOTUNE_CALIBRATION_FREQ_KHZ
1871:Generated_Source\PSoC4/CapSense_Sensing.c ****             ptrRamWidget->rowSnsClkSource = (uint8)CapSense_CLK_SOURCE_DIRECT;
1872:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
1873:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1874:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Calibrate CSD widget to the default calibration target */
1875:Generated_Source\PSoC4/CapSense_Sensing.c ****         (void)CapSense_CSDCalibrateWidget(widgetId, CapSense_AUTOTUNE_CAL_LEVEL);
1876:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1877:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Find raw count and IDAC of a sensor with maximum Cp */
1878:Generated_Source\PSoC4/CapSense_Sensing.c ****         for (snsIndex = 0u; snsIndex < ptrFlashWidget->numCols; snsIndex++)
1879:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1880:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN)
1881:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (maxIdacComp < ptrRamSensor->idacComp[0u])
1882:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1883:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
1884:Generated_Source\PSoC4/CapSense_Sensing.c ****                         maxCpSnsId = snsIndex;
1885:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #endif
1886:Generated_Source\PSoC4/CapSense_Sensing.c ****                     maxIdacComp = ptrRamSensor->idacComp[0u];
1887:Generated_Source\PSoC4/CapSense_Sensing.c ****                     maxRaw = ptrRamSensor->raw[0u];
1888:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1889:Generated_Source\PSoC4/CapSense_Sensing.c ****             #else
1890:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (maxRaw < ptrRamSensor->raw[0u])
1891:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1892:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
1893:Generated_Source\PSoC4/CapSense_Sensing.c ****                         maxCpSnsId = snsIndex;
1894:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #endif
1895:Generated_Source\PSoC4/CapSense_Sensing.c ****                     maxRaw = ptrRamSensor->raw[0u];
1896:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1897:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
1898:Generated_Source\PSoC4/CapSense_Sensing.c ****             ptrRamSensor++;
1899:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1900:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1901:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Update auto-tuning configuration structure */
1902:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.iDacMod = ptrRamWidget->idacMod[0u];
1903:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.iDacComp = (uint8)maxIdacComp;
1904:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.iDacGain = CapSense_idacGainTable[ptrRamWidget->idacGainIndex].gainValue;
1905:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.ptrSenseClk = &ptrRamWidget->snsClk;
1906:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.calTarget = (uint16)((maxRaw * CapSense_AUTOTUNE_CAL_UNITS) /
1907:Generated_Source\PSoC4/CapSense_Sensing.c ****                 ((uint32)(0x01uL << CapSense_AUTOTUNE_CALIBRATION_RESOLUTION) - 1u));
1908:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1909:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Find sensor Cp and optimum sense clock value */
1910:Generated_Source\PSoC4/CapSense_Sensing.c ****         maxCp = SmartSense_TunePrescalers(&autoTuneConfig);
1911:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.sensorCap = maxCp;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 35


1912:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1913:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Increase sensor clock divider to valid value */
1914:Generated_Source\PSoC4/CapSense_Sensing.c ****         while(ptrRamWidget->snsClk < minSnsClkDiv)
1915:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1916:Generated_Source\PSoC4/CapSense_Sensing.c ****             ptrRamWidget->snsClk <<= 1u;
1917:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1918:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1919:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Do the same for row for touchpad or matrix buttons widgets */
1920:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
1921:Generated_Source\PSoC4/CapSense_Sensing.c ****             if ((CapSense_WD_TOUCHPAD_E == CapSense_GET_WIDGET_TYPE(ptrFlashWidget)) ||
1922:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_WD_MATRIX_BUTTON_E == CapSense_GET_WIDGET_TYPE(ptrFlashWidget)))
1923:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1924:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Find a sensor with maximum Cp */
1925:Generated_Source\PSoC4/CapSense_Sensing.c ****                 maxRaw = 0u;
1926:Generated_Source\PSoC4/CapSense_Sensing.c ****                 maxIdacComp = 0u;
1927:Generated_Source\PSoC4/CapSense_Sensing.c ****                 for (snsIndex = ptrFlashWidget->numCols; snsIndex < ptrFlashWidget->totalNumSns; sn
1928:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1929:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #if (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN)
1930:Generated_Source\PSoC4/CapSense_Sensing.c ****                         if (maxIdacComp < ptrRamSensor->idacComp[0u])
1931:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
1932:Generated_Source\PSoC4/CapSense_Sensing.c ****                             maxCpRowSnsId = snsIndex;
1933:Generated_Source\PSoC4/CapSense_Sensing.c ****                             maxIdacComp = ptrRamSensor->idacComp[0u];
1934:Generated_Source\PSoC4/CapSense_Sensing.c ****                             maxRaw = ptrRamSensor->raw[0u];
1935:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
1936:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #else
1937:Generated_Source\PSoC4/CapSense_Sensing.c ****                         if (maxRaw < ptrRamSensor->raw[0u])
1938:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
1939:Generated_Source\PSoC4/CapSense_Sensing.c ****                             maxCpRowSnsId = snsIndex;
1940:Generated_Source\PSoC4/CapSense_Sensing.c ****                             maxRaw = ptrRamSensor->raw[0u];
1941:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
1942:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #endif
1943:Generated_Source\PSoC4/CapSense_Sensing.c ****                     ptrRamSensor++;
1944:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1945:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1946:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Configure auto-tuning configuration structure */
1947:Generated_Source\PSoC4/CapSense_Sensing.c ****                 autoTuneConfig.iDacMod = ptrRamWidget->rowIdacMod[0u];
1948:Generated_Source\PSoC4/CapSense_Sensing.c ****                 autoTuneConfig.iDacComp = (uint8)maxIdacComp;
1949:Generated_Source\PSoC4/CapSense_Sensing.c ****                 autoTuneConfig.ptrSenseClk = &ptrRamWidget->rowSnsClk;
1950:Generated_Source\PSoC4/CapSense_Sensing.c ****                 autoTuneConfig.calTarget = (uint16)((maxRaw * CapSense_AUTOTUNE_CAL_UNITS) /
1951:Generated_Source\PSoC4/CapSense_Sensing.c ****                         ((uint32)(0x01uL << CapSense_AUTOTUNE_CALIBRATION_RESOLUTION) - 1u));
1952:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1953:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Find correct sense clock value */
1954:Generated_Source\PSoC4/CapSense_Sensing.c ****                 maxCp = SmartSense_TunePrescalers(&autoTuneConfig);
1955:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1956:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Save maximum sensor Cp and corresponding sensor Id */
1957:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (autoTuneConfig.sensorCap < maxCp)
1958:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1959:Generated_Source\PSoC4/CapSense_Sensing.c ****                     autoTuneConfig.sensorCap = maxCp;
1960:Generated_Source\PSoC4/CapSense_Sensing.c ****                     maxCpSnsId = maxCpRowSnsId;
1961:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1962:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1963:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Increase sensor clock divider to valid value */
1964:Generated_Source\PSoC4/CapSense_Sensing.c ****                 while(ptrRamWidget->rowSnsClk < minSnsClkDiv)
1965:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1966:Generated_Source\PSoC4/CapSense_Sensing.c ****                     ptrRamWidget->rowSnsClk <<= 1u;
1967:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1968:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 36


1969:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN) */
1970:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1971:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Check tuning results */
1972:Generated_Source\PSoC4/CapSense_Sensing.c ****         if (CapSense_AUTOTUNE_CP_MAX < maxCp)
1973:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
1974:Generated_Source\PSoC4/CapSense_Sensing.c ****             autoTuneStatus = CYRET_BAD_DATA;
1975:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
1976:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1977:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
1978:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Autotune phase #2:
1979:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - repeating calibration with new sense clock frequency
1980:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - getting resolution
1981:Generated_Source\PSoC4/CapSense_Sensing.c ****         */
1982:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1983:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Calibrate CSD widget to the default calibration target with newly defined sense frequenc
1984:Generated_Source\PSoC4/CapSense_Sensing.c ****         (void)CapSense_CSDCalibrateWidget(widgetId, CapSense_AUTOTUNE_CAL_LEVEL);
1985:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1986:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.iDacGain = CapSense_idacGainTable[ptrRamWidget->idacGainIndex].gainValue;
1987:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.iDacMod = ptrRamWidget->idacMod[0u];
1988:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneConfig.ptrSenseClk = &ptrRamWidget->snsClk;
1989:Generated_Source\PSoC4/CapSense_Sensing.c **** 
1990:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
1991:Generated_Source\PSoC4/CapSense_Sensing.c ****             if ((CapSense_WD_TOUCHPAD_E == CapSense_GET_WIDGET_TYPE(ptrFlashWidget)) ||
1992:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_WD_MATRIX_BUTTON_E == CapSense_GET_WIDGET_TYPE(ptrFlashWidget)))
1993:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
1994:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (maxCpSnsId >= ptrFlashWidget->numCols)
1995:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
1996:Generated_Source\PSoC4/CapSense_Sensing.c ****                     autoTuneConfig.iDacMod = ptrRamWidget->rowIdacMod[0u];
1997:Generated_Source\PSoC4/CapSense_Sensing.c ****                     autoTuneConfig.ptrSenseClk = &ptrRamWidget->rowSnsClk;
1998:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
1999:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
2000:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
2001:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2002:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Find resolution */
2003:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrRamWidget->resolution = SmartSense_TuneSensitivity(&autoTuneConfig);
2004:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2005:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*
2006:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Autotune phase #3:
2007:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - selecting a widget clock source if AUTO
2008:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - repeating calibration with found clock frequency, resolution and clock source
2009:Generated_Source\PSoC4/CapSense_Sensing.c ****         * - updating sensitivity
2010:Generated_Source\PSoC4/CapSense_Sensing.c ****         */
2011:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2012:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Tune widget sensitivity */
2013:Generated_Source\PSoC4/CapSense_Sensing.c ****         CapSense_SsSetWidgetSenseClkSrc(widgetId, ptrRamWidget);
2014:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2015:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Calibrate CSD widget to the default calibration target with newly defined resolution */
2016:Generated_Source\PSoC4/CapSense_Sensing.c ****         autoTuneStatus |= CapSense_CSDCalibrateWidget(widgetId, CapSense_AUTOTUNE_CAL_LEVEL);
2017:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2018:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_TST_WDGT_CRC_EN)
2019:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_DsUpdateWidgetCrc(widgetId);
2020:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_TST_WDGT_CRC_EN) */
2021:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2022:Generated_Source\PSoC4/CapSense_Sensing.c ****         return autoTuneStatus;
2023:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2024:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2025:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 37


2026:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2027:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsAutoTune
2028:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2029:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2030:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2031:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This API performs the parameters auto-tuning for the optimal CapSense
2032:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  operation.
2033:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2034:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2035:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This API performs the following:
2036:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Calibrates Modulator and Compensation IDACs.
2037:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Tunes the Sense Clock optimal value to get a Sense Clock period greater than
2038:Generated_Source\PSoC4/CapSense_Sensing.c ****     *    2*5*R*Cp.
2039:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Calculates the resolution for the optimal finger capacitance.
2040:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2041:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \return
2042:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Returns the status of the operation:
2043:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Zero     - All the widgets are auto-tuned successfully.
2044:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - Non-zero - Auto-tuning failed for any widget.
2045:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2046:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2047:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus CapSense_SsAutoTune(void)
2048:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2049:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus autoTuneStatus = CYRET_SUCCESS;
2050:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 wdgtIndex;
2051:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2052:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Tune each CSD widget */
2053:Generated_Source\PSoC4/CapSense_Sensing.c ****         for (wdgtIndex = 0u; wdgtIndex < CapSense_TOTAL_WIDGETS; wdgtIndex++)
2054:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2055:Generated_Source\PSoC4/CapSense_Sensing.c ****             if (CapSense_SENSE_METHOD_CSD_E ==
2056:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[wdgtIndex]))
2057:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
2058:Generated_Source\PSoC4/CapSense_Sensing.c ****                 autoTuneStatus |= CapSense_SsAutoTuneWidget(wdgtIndex);
2059:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
2060:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2061:Generated_Source\PSoC4/CapSense_Sensing.c ****         return autoTuneStatus;
2062:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2063:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_CSD_SS_DIS != CapSense_CSD_AUTOTUNE)) */
2064:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2065:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2066:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_DISABLE == CapSense_CSDV2)
2067:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if ( ((CapSense_ENABLE == CapSense_CSX_EN) \
2068:Generated_Source\PSoC4/CapSense_Sensing.c ****         || (CapSense_ENABLE == CapSense_ISX_EN)) ||\
2069:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_IDAC_SINKING == CapSense_CSD_IDAC_CONFIG))
2070:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*******************************************************************************
2071:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Function Name: CapSense_SsTrimIdacsSinking
2072:Generated_Source\PSoC4/CapSense_Sensing.c ****         ****************************************************************************//**
2073:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2074:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \brief
2075:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  This function loads trim values from SFLASH rows to calibrate
2076:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  IDAC1 and IDAC2 for Sinking CSD Mode
2077:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2078:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \details
2079:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  Function reads trim value from SFLASH and loads it into IDAC trim register.
2080:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  If Compensation IDAC is disabled the function loads trim values for IDAC1 only.
2081:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2082:Generated_Source\PSoC4/CapSense_Sensing.c ****         *******************************************************************************/
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 38


2083:Generated_Source\PSoC4/CapSense_Sensing.c ****         static void CapSense_SsTrimIdacsSinking(void)
2084:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2085:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 trimValue;
2086:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2087:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Mod iDAC Sinking Mode */
2088:Generated_Source\PSoC4/CapSense_Sensing.c ****             trimValue = CY_GET_REG32(CapSense_TRIM2_PTR) & ~CapSense_IDAC_TRIM2_MOD_SNK_MASK;
2089:Generated_Source\PSoC4/CapSense_Sensing.c ****             trimValue |= ((uint32)CY_GET_REG8(CapSense_SFLASH_TRIM2_PTR) &
2090:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                       CapSense_SFLASH_TRIM_IDAC_MOD_MASK) ;
2091:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2092:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN)
2093:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Comp iDAC Sinking Mode */
2094:Generated_Source\PSoC4/CapSense_Sensing.c ****                 trimValue &= ~CapSense_IDAC_TRIM2_COMP_SNK_MASK;
2095:Generated_Source\PSoC4/CapSense_Sensing.c ****                 trimValue |= ((uint32)CY_GET_REG8(CapSense_SFLASH_TRIM2_PTR) &
2096:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                           CapSense_SFLASH_TRIM_IDAC_COMP_MASK);
2097:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN) */
2098:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2099:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Update IDAC trim bits for gain control in current sink mode */
2100:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(CapSense_TRIM2_PTR, trimValue);
2101:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2102:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_CSX_EN) || \
2103:Generated_Source\PSoC4/CapSense_Sensing.c ****                (CapSense_IDAC_SINKING == CapSense_CSD_IDAC_CONFIG)) */
2104:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2105:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2106:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if ( ((CapSense_ENABLE == CapSense_CSX_EN) \
2107:Generated_Source\PSoC4/CapSense_Sensing.c ****         || (CapSense_ENABLE == CapSense_ISX_EN)) || \
2108:Generated_Source\PSoC4/CapSense_Sensing.c ****          (CapSense_IDAC_SOURCING == CapSense_CSD_IDAC_CONFIG))
2109:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*******************************************************************************
2110:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Function Name: CapSense_SsTrimIdacsSourcing
2111:Generated_Source\PSoC4/CapSense_Sensing.c ****         ****************************************************************************//**
2112:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2113:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \brief
2114:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  This function loads trim values from SFLASH rows to calibrate
2115:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  IDAC1 and IDAC2 for Sourcing CSD Mode
2116:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2117:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \details
2118:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  Function reads trim value from SFLASH and loads it into IDAC trim register.
2119:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  If Compensation IDAC is disabled the function loads trim values for IDAC1 only.
2120:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2121:Generated_Source\PSoC4/CapSense_Sensing.c ****         *******************************************************************************/
2122:Generated_Source\PSoC4/CapSense_Sensing.c ****         static void CapSense_SsTrimIdacsSourcing(void)
2123:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2124:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 trimValue;
2125:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2126:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Mod iDAC Sourcing Mode */
2127:Generated_Source\PSoC4/CapSense_Sensing.c ****             trimValue = CY_GET_REG32(CapSense_TRIM1_PTR) & ~CapSense_IDAC_TRIM1_MOD_SRC_MASK;
2128:Generated_Source\PSoC4/CapSense_Sensing.c ****             trimValue |= ((uint32)CY_GET_REG8(CapSense_SFLASH_TRIM1_PTR) &
2129:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                       CapSense_SFLASH_TRIM_IDAC_MOD_MASK);
2130:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2131:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN)
2132:Generated_Source\PSoC4/CapSense_Sensing.c ****                  /* Comp iDAC Sourcing Mode */
2133:Generated_Source\PSoC4/CapSense_Sensing.c ****                 trimValue &= ~CapSense_IDAC_TRIM1_COMP_SRC_MASK;
2134:Generated_Source\PSoC4/CapSense_Sensing.c ****                 trimValue |= ((uint32)CY_GET_REG8(CapSense_SFLASH_TRIM1_PTR) &
2135:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                           CapSense_SFLASH_TRIM_IDAC_COMP_MASK);
2136:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_IDAC_COMP_EN) */
2137:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2138:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Update IDAC trim bits for gain control in current source mode */
2139:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(CapSense_TRIM1_PTR, trimValue);
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 39


2140:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2141:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_CSX_EN) || \
2142:Generated_Source\PSoC4/CapSense_Sensing.c ****                (CapSense_IDAC_SOURCING == CapSense_CSD_IDAC_CONFIG)) */
2143:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2144:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2145:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2146:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsTrimIdacs
2147:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2148:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2149:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2150:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function loads trim values from SFLASH rows to calibrate
2151:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  IDAC1 and IDAC2 for CSD Mode
2152:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2153:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2154:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  If CSX mode is enabled the function loads trim values for both sink and source
2155:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  mode. If CSX mode is disabled the function loads trim values for sink or
2156:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  source mode based on sink/source mode configuration.
2157:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  If Compensation IDAC is disabled the function loads trim values for IDAC1 only.
2158:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2159:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2160:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsTrimIdacs(void)
2161:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2162:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN) || (CapSense_ENABLE == CapSense_ISX_EN)
2163:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsTrimIdacsSinking();
2164:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsTrimIdacsSourcing();
2165:Generated_Source\PSoC4/CapSense_Sensing.c ****         #elif (CapSense_IDAC_SINKING == CapSense_CSD_IDAC_CONFIG)
2166:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsTrimIdacsSinking();
2167:Generated_Source\PSoC4/CapSense_Sensing.c ****         #elif (CapSense_IDAC_SOURCING == CapSense_CSD_IDAC_CONFIG)
2168:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_SsTrimIdacsSourcing();
2169:Generated_Source\PSoC4/CapSense_Sensing.c ****         #else
2170:Generated_Source\PSoC4/CapSense_Sensing.c ****             #error "Not supported Mode, Component cannot work in this mode"
2171:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSX_EN) || (CapSense_ENABLE == CapSense_ISX_EN) */
2172:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2173:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif  /* (CapSense_DISABLE == CapSense_CSDV2) */
2174:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2175:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2176:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_MULTI_FREQ_SCAN_EN)
2177:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2178:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsChangeImoFreq
2179:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2180:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2181:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2182:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function changes the IMO frequency.
2183:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2184:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2185:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The IMO frequency can have three offsets: 0%, -5% and +5%. The frequency
2186:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  trims are contained in the CapSense_immunity[value] array for each
2187:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  frequency channel.
2188:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2189:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param value The frequency channel ID.
2190:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2191:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2192:Generated_Source\PSoC4/CapSense_Sensing.c ****     void CapSense_SsChangeImoFreq(uint32 value)
2193:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2194:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CY_SYS_CLK_IMO_TRIM1_PTR, CapSense_immunity[value]);
2195:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2196:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 40


2197:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2198:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsChangeClkFreq
2199:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2200:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2201:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2202:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function changes the sensor clock frequency by configuring
2203:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  the corresponding divider.
2204:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2205:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2206:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function changes the sensor clock frequency by configuring
2207:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  the corresponding divider.
2208:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2209:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param chId
2210:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The frequency channel ID.
2211:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2212:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2213:Generated_Source\PSoC4/CapSense_Sensing.c ****     void CapSense_SsChangeClkFreq(uint32 chId)
2214:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2215:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 snsClkDivider;
2216:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 freqOffset1 = 0u;
2217:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 freqOffset2 = 0u;
2218:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2219:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (0u != CapSense_TOTAL_CSD_WIDGETS)
2220:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE == CapSense_CSDV2)
2221:Generated_Source\PSoC4/CapSense_Sensing.c ****                 uint32 conversionsNum;
2222:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
2223:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2224:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if((CapSense_CLK_SOURCE_PRS8  == CapSense_CSD_SNS_CLK_SOURCE) ||\
2225:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_CLK_SOURCE_PRS12 == CapSense_CSD_SNS_CLK_SOURCE) ||\
2226:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE))
2227:Generated_Source\PSoC4/CapSense_Sensing.c ****                 uint32 snsClkSrc;
2228:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
2229:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
2230:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2231:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((0u != CapSense_TOTAL_CSD_WIDGETS) || \
2232:Generated_Source\PSoC4/CapSense_Sensing.c ****              ((CapSense_DISABLE == CapSense_CSX_COMMON_TX_CLK_EN) && (0u != CapSense_TOTAL_CSX_WIDG
2233:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_FLASH_WD_STRUCT const *ptrFlashWdgt = &CapSense_dsFlash.wdgtArray[CapSense_wid
2234:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_RAM_WD_BASE_STRUCT const *ptrWdgt = (CapSense_RAM_WD_BASE_STRUCT *)ptrFlashWdg
2235:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
2236:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2237:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch(CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[CapSense_widgetIndex]))
2238:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2239:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (0u != CapSense_TOTAL_CSD_WIDGETS)
2240:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSD_E:
2241:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Get sensor clock divider value */
2242:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (CapSense_ENABLE == CapSense_CSD_COMMON_SNS_CLK_EN)
2243:Generated_Source\PSoC4/CapSense_Sensing.c ****                     snsClkDivider = CapSense_dsRam.snsCsdClk;
2244:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #else /* (CapSense_ENABLE == CapSense_CSD_COMMON_SNS_CLK_EN) */
2245:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
2246:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Get SnsClck divider for rows or columns */
2247:Generated_Source\PSoC4/CapSense_Sensing.c ****                         if (CapSense_dsFlash.wdgtArray[CapSense_widgetIndex].numCols <= CapSense_se
2248:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
2249:Generated_Source\PSoC4/CapSense_Sensing.c ****                             snsClkDivider = ptrWdgt->rowSnsClk;
2250:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
2251:Generated_Source\PSoC4/CapSense_Sensing.c ****                         else
2252:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
2253:Generated_Source\PSoC4/CapSense_Sensing.c ****                             snsClkDivider = ptrWdgt->snsClk;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 41


2254:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
2255:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #else
2256:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkDivider = ptrWdgt->snsClk;
2257:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #endif /* (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN) */
2258:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif /* (CapSense_ENABLE == CapSense_CSD_COMMON_SNS_CLK_EN) */
2259:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2260:Generated_Source\PSoC4/CapSense_Sensing.c ****                 freqOffset1 = CapSense_CSD_MFS_DIVIDER_OFFSET_F1;
2261:Generated_Source\PSoC4/CapSense_Sensing.c ****                 freqOffset2 = CapSense_CSD_MFS_DIVIDER_OFFSET_F2;
2262:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2263:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if((CapSense_CLK_SOURCE_PRS8  == CapSense_CSD_SNS_CLK_SOURCE) ||\
2264:Generated_Source\PSoC4/CapSense_Sensing.c ****                     (CapSense_CLK_SOURCE_PRS12 == CapSense_CSD_SNS_CLK_SOURCE) ||\
2265:Generated_Source\PSoC4/CapSense_Sensing.c ****                     (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE))
2266:Generated_Source\PSoC4/CapSense_Sensing.c ****                     /* Get sense clk source */
2267:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
2268:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Get SnsClc Source for rows or columns */
2269:Generated_Source\PSoC4/CapSense_Sensing.c ****                         if (CapSense_dsFlash.wdgtArray[CapSense_widgetIndex].numCols <= CapSense_se
2270:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
2271:Generated_Source\PSoC4/CapSense_Sensing.c ****                             snsClkSrc = (uint32)ptrWdgt->rowSnsClkSource;
2272:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
2273:Generated_Source\PSoC4/CapSense_Sensing.c ****                         else
2274:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
2275:Generated_Source\PSoC4/CapSense_Sensing.c ****                             snsClkSrc = (uint32)ptrWdgt->snsClkSource;
2276:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
2277:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #else
2278:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkSrc = (uint32)ptrWdgt->snsClkSource;
2279:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #endif /* (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN) */
2280:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2281:Generated_Source\PSoC4/CapSense_Sensing.c ****                     switch (snsClkSrc)
2282:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2283:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_CLK_SOURCE_PRS8:
2284:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_CLK_SOURCE_PRS12:
2285:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Multiply by 2 for PRS8/PRS12 mode */
2286:Generated_Source\PSoC4/CapSense_Sensing.c ****                         freqOffset1 <<= 1u;
2287:Generated_Source\PSoC4/CapSense_Sensing.c ****                         freqOffset2 <<= 1u;
2288:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2289:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2290:Generated_Source\PSoC4/CapSense_Sensing.c ****                     default:
2291:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2292:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2293:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif
2294:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2295:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Change the divider based on the chId */
2296:Generated_Source\PSoC4/CapSense_Sensing.c ****                 switch (chId)
2297:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
2298:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_FREQ_CHANNEL_1:
2299:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2300:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkDivider += freqOffset1;
2301:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2302:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2303:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_FREQ_CHANNEL_2:
2304:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2305:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkDivider += freqOffset2;
2306:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2307:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2308:Generated_Source\PSoC4/CapSense_Sensing.c ****                     default:
2309:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2310:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 42


2311:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2312:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
2313:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2314:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (CapSense_ENABLE == CapSense_CSDV2)
2315:Generated_Source\PSoC4/CapSense_Sensing.c ****                     /* Set Number Of Conversions based on scanning resolution */
2316:Generated_Source\PSoC4/CapSense_Sensing.c ****                     conversionsNum = CapSense_SsCSDGetNumberOfConversions(snsClkDivider, (uint32)pt
2317:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CY_SET_REG32(CapSense_SEQ_NORM_CNT_PTR, (conversionsNum & CapSense_SEQ_NORM_CNT
2318:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
2319:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2320:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if((CapSense_CLK_SOURCE_PRS8  == CapSense_CSD_SNS_CLK_SOURCE) ||\
2321:Generated_Source\PSoC4/CapSense_Sensing.c ****                     (CapSense_CLK_SOURCE_PRS12 == CapSense_CSD_SNS_CLK_SOURCE) ||\
2322:Generated_Source\PSoC4/CapSense_Sensing.c ****                     (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE))
2323:Generated_Source\PSoC4/CapSense_Sensing.c ****                     switch (snsClkSrc)
2324:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2325:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_CLK_SOURCE_PRS8:
2326:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_CLK_SOURCE_PRS12:
2327:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /* Divide by 2 for PRS8/PRS12 mode */
2328:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkDivider >>= 1;
2329:Generated_Source\PSoC4/CapSense_Sensing.c ****                         if (snsClkDivider == 0u)
2330:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
2331:Generated_Source\PSoC4/CapSense_Sensing.c ****                             snsClkDivider = 1u;
2332:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
2333:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2334:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2335:Generated_Source\PSoC4/CapSense_Sensing.c ****                     default:
2336:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2337:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2338:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif
2339:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2340:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Configure the new divider */
2341:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsSetSnsClockDivider(snsClkDivider);
2342:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2343:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
2344:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* #if (0u != CapSense_TOTAL_CSD_WIDGETS) */
2345:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2346:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (0u != CapSense_TOTAL_CSX_WIDGETS)
2347:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSX_E:
2348:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if (CapSense_ENABLE == CapSense_CSX_COMMON_TX_CLK_EN)
2349:Generated_Source\PSoC4/CapSense_Sensing.c ****                     snsClkDivider = CapSense_dsRam.snsCsxClk;
2350:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #else /* (CapSense_ENABLE == CapSense_CSX_COMMON_TX_CLK_EN) */
2351:Generated_Source\PSoC4/CapSense_Sensing.c ****                     snsClkDivider = ptrWdgt->snsClk;
2352:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif /* (CapSense_ENABLE == CapSense_CSX_COMMON_TX_CLK_EN) */
2353:Generated_Source\PSoC4/CapSense_Sensing.c ****                 freqOffset1 = CapSense_CSX_MFS_DIVIDER_OFFSET_F1;
2354:Generated_Source\PSoC4/CapSense_Sensing.c ****                 freqOffset2 = CapSense_CSX_MFS_DIVIDER_OFFSET_F2;
2355:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2356:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Change the divider based on the chId */
2357:Generated_Source\PSoC4/CapSense_Sensing.c ****                 switch (chId)
2358:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
2359:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_FREQ_CHANNEL_1:
2360:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2361:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkDivider += freqOffset1;
2362:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2363:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2364:Generated_Source\PSoC4/CapSense_Sensing.c ****                     case CapSense_FREQ_CHANNEL_2:
2365:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2366:Generated_Source\PSoC4/CapSense_Sensing.c ****                         snsClkDivider += freqOffset2;
2367:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 43


2368:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2369:Generated_Source\PSoC4/CapSense_Sensing.c ****                     default:
2370:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
2371:Generated_Source\PSoC4/CapSense_Sensing.c ****                         break;
2372:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
2373:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
2374:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2375:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Configure the new divider */
2376:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsSetSnsClockDivider(snsClkDivider);
2377:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2378:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
2379:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* #if (0u != CapSense_TOTAL_CSX_WIDGETS) */
2380:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2381:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
2382:Generated_Source\PSoC4/CapSense_Sensing.c ****             CYASSERT(0);
2383:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2384:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2385:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2386:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif  /* (CapSense_ENABLE == CapSense_MULTI_FREQ_SCAN_EN) */
2387:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2388:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2389:Generated_Source\PSoC4/CapSense_Sensing.c **** #if((CapSense_ENABLE == CapSense_CSD_EN) || \
2390:Generated_Source\PSoC4/CapSense_Sensing.c ****     ((CapSense_ENABLE == CapSense_CSX_EN) && \
2391:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_CSDV2)))
2392:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
2393:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsInitializeSourceSenseClk
2394:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
2395:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2396:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
2397:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Sets a source for Sense Clk for all CSD widgets.
2398:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2399:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
2400:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Updates snsClkSource and rowSnsClkSource with a source for the sense Clk.
2401:Generated_Source\PSoC4/CapSense_Sensing.c **** *  for all CSD widgets.
2402:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2403:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
2404:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_SsInitializeSourceSenseClk(void)
2405:Generated_Source\PSoC4/CapSense_Sensing.c **** {
2406:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 wdgtIndex;
2407:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_RAM_WD_BASE_STRUCT *ptrWdgt;
2408:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2409:Generated_Source\PSoC4/CapSense_Sensing.c ****     for (wdgtIndex = 0u; wdgtIndex < CapSense_TOTAL_WIDGETS; wdgtIndex++)
2410:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2411:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrWdgt = (CapSense_RAM_WD_BASE_STRUCT *)CapSense_dsFlash.wdgtArray[wdgtIndex].ptr2WdgtRam;
2412:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2413:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch (CapSense_GET_SENSE_METHOD(&CapSense_dsFlash.wdgtArray[wdgtIndex]))
2414:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2415:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
2416:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSD_E:
2417:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsSetWidgetSenseClkSrc(wdgtIndex, ptrWdgt);
2418:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
2419:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
2420:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_ENABLE == CapSense_CSX_EN) && (CapSense_ENABLE == CapSense_CSDV2))
2421:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SENSE_METHOD_CSX_E:
2422:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_SsSetWidgetTxClkSrc(wdgtIndex, ptrWdgt);
2423:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
2424:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (((CapSense_ENABLE == CapSense_CSX_EN) || (CapSense_ENABLE == CapSense_ISX_EN)) &
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 44


2425:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
2426:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2427:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2428:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_TST_WDGT_CRC_EN)
2429:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_DsUpdateWidgetCrc(wdgtIndex);
2430:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_TST_WDGT_CRC_EN) */
2431:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2432:Generated_Source\PSoC4/CapSense_Sensing.c **** }
2433:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* ((CapSense_ENABLE == CapSense_CSD_EN) || \
2434:Generated_Source\PSoC4/CapSense_Sensing.c ****            (((CapSense_ENABLE == CapSense_CSX_EN) || \
2435:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_ENABLE == CapSense_ISX_EN)) && \
2436:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_ENABLE == CapSense_CSDV2))) */
2437:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2438:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2439:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_EN)
2440:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2441:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsSetWidgetSenseClkSrc
2442:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2443:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2444:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2445:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Sets a source for the sense clock for a widget.
2446:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2447:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param wdgtIndex
2448:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Specifies the ID of the widget.
2449:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param ptrWdgt
2450:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The pointer to the RAM_WD_BASE_STRUCT structure.
2451:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2452:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2453:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Updates snsClkSource and rowSnsClkSource with a source for the sense Clk for a
2454:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  widget.
2455:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2456:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2457:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsSetWidgetSenseClkSrc(uint32 wdgtIndex, CapSense_RAM_WD_BASE_STRUCT * ptr
2458:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2459:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 lfsrSize;
2460:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 lfsrScale;
2461:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2462:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if(CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE)
2463:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if(CapSense_ENABLE == CapSense_CSDV2)
2464:Generated_Source\PSoC4/CapSense_Sensing.c ****                 uint32 conversionsNum;
2465:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
2466:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 snsClkDivider;
2467:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE) */
2468:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2469:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if(CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE)
2470:Generated_Source\PSoC4/CapSense_Sensing.c ****             snsClkDivider = CapSense_SsCSDGetColSnsClkDivider(wdgtIndex);
2471:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2472:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if(CapSense_ENABLE == CapSense_CSDV2)
2473:Generated_Source\PSoC4/CapSense_Sensing.c ****                 conversionsNum = CapSense_SsCSDGetNumberOfConversions(snsClkDivider, (uint32)ptrWdg
2474:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                                                              CapSen
2475:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrSize = CapSense_SsCalcLfsrSize(snsClkDivider, conversionsNum);
2476:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (CapSense_CLK_SOURCE_DIRECT == lfsrSize)
2477:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
2478:Generated_Source\PSoC4/CapSense_Sensing.c ****                     /*
2479:Generated_Source\PSoC4/CapSense_Sensing.c ****                     * Multiplying of the snsClkDivider by 2 is needed to pass the
2480:Generated_Source\PSoC4/CapSense_Sensing.c ****                     * average PRS frequency through the argument.
2481:Generated_Source\PSoC4/CapSense_Sensing.c ****                     */
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 45


2482:Generated_Source\PSoC4/CapSense_Sensing.c ****                     lfsrSize = CapSense_SsCSDCalcPrsSize(snsClkDivider << 1uL, (uint32)ptrWdgt->res
2483:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
2484:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrScale = CapSense_SsCalcLfsrScale(snsClkDivider, lfsrSize);
2485:Generated_Source\PSoC4/CapSense_Sensing.c ****             #else
2486:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /*
2487:Generated_Source\PSoC4/CapSense_Sensing.c ****                 * Multiplying of the snsClkDivider by 2 is needed to pass the
2488:Generated_Source\PSoC4/CapSense_Sensing.c ****                 * average PRS frequency through the argument.
2489:Generated_Source\PSoC4/CapSense_Sensing.c ****                 */
2490:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrSize = CapSense_SsCSDCalcPrsSize(snsClkDivider << 1uL, (uint32)ptrWdgt->resolut
2491:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrScale = 0u;
2492:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
2493:Generated_Source\PSoC4/CapSense_Sensing.c ****         #else
2494:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrSize = (uint8)CapSense_DEFAULT_MODULATION_MODE;
2495:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrScale = 0u;
2496:Generated_Source\PSoC4/CapSense_Sensing.c ****             (void)wdgtIndex; /* This parameter is unused in such configurations */
2497:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE) */
2498:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2499:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrWdgt->snsClkSource = lfsrSize | (uint8)(lfsrScale << CapSense_CLK_SOURCE_LFSR_SCALE_OFFS
2500:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2501:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
2502:Generated_Source\PSoC4/CapSense_Sensing.c ****             if ((CapSense_WD_TOUCHPAD_E == (CapSense_WD_TYPE_ENUM)CapSense_dsFlash.wdgtArray[wdgtIn
2503:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_WD_MATRIX_BUTTON_E == (CapSense_WD_TYPE_ENUM)CapSense_dsFlash.wdgtArray[w
2504:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
2505:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if(CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE)
2506:Generated_Source\PSoC4/CapSense_Sensing.c ****                     snsClkDivider = CapSense_SsCSDGetRowSnsClkDivider(wdgtIndex);
2507:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2508:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #if(CapSense_ENABLE == CapSense_CSDV2)
2509:Generated_Source\PSoC4/CapSense_Sensing.c ****                         lfsrSize = CapSense_SsCalcLfsrSize(snsClkDivider, conversionsNum);
2510:Generated_Source\PSoC4/CapSense_Sensing.c ****                         if (CapSense_CLK_SOURCE_DIRECT == lfsrSize)
2511:Generated_Source\PSoC4/CapSense_Sensing.c ****                         {
2512:Generated_Source\PSoC4/CapSense_Sensing.c ****                             /*
2513:Generated_Source\PSoC4/CapSense_Sensing.c ****                             * Multiplying of the snsClkDivider by 2 is needed to pass the
2514:Generated_Source\PSoC4/CapSense_Sensing.c ****                             * average PRS frequency through the argument.
2515:Generated_Source\PSoC4/CapSense_Sensing.c ****                             */
2516:Generated_Source\PSoC4/CapSense_Sensing.c ****                             lfsrSize = CapSense_SsCSDCalcPrsSize(snsClkDivider << 1uL, (uint32)ptrW
2517:Generated_Source\PSoC4/CapSense_Sensing.c ****                         }
2518:Generated_Source\PSoC4/CapSense_Sensing.c ****                         lfsrScale = CapSense_SsCalcLfsrScale(snsClkDivider, lfsrSize);
2519:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #else
2520:Generated_Source\PSoC4/CapSense_Sensing.c ****                         /*
2521:Generated_Source\PSoC4/CapSense_Sensing.c ****                         * Multiplying of the snsClkDivider by 2 is needed to pass the
2522:Generated_Source\PSoC4/CapSense_Sensing.c ****                         * average PRS frequency through the argument.
2523:Generated_Source\PSoC4/CapSense_Sensing.c ****                         */
2524:Generated_Source\PSoC4/CapSense_Sensing.c ****                         lfsrSize = CapSense_SsCSDCalcPrsSize(snsClkDivider << 1uL, (uint32)ptrWdgt-
2525:Generated_Source\PSoC4/CapSense_Sensing.c ****                         lfsrScale = 0u;
2526:Generated_Source\PSoC4/CapSense_Sensing.c ****                     #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
2527:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #else
2528:Generated_Source\PSoC4/CapSense_Sensing.c ****                     lfsrSize = (uint8)CapSense_DEFAULT_MODULATION_MODE;
2529:Generated_Source\PSoC4/CapSense_Sensing.c ****                     lfsrScale = 0u;
2530:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif /* (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE) */
2531:Generated_Source\PSoC4/CapSense_Sensing.c ****                 ptrWdgt->rowSnsClkSource = lfsrSize | (uint8)(lfsrScale << CapSense_CLK_SOURCE_LFSR
2532:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
2533:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN) */
2534:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2535:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
2536:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2537:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2538:Generated_Source\PSoC4/CapSense_Sensing.c **** #if ((CapSense_ENABLE == CapSense_CSX_EN) && (CapSense_ENABLE == CapSense_CSDV2))
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 46


2539:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2540:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsSetWidgetTxClkSrc
2541:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2542:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2543:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2544:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Sets a source for the Tx clock for a widget.
2545:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2546:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param wdgtIndex
2547:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Specifies the ID of the widget.
2548:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param ptrWdgt
2549:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The pointer to the RAM_WD_BASE_STRUCT structure.
2550:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2551:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2552:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Updates snsClkSource with a source for Tx Clk for a widget.
2553:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2554:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2555:Generated_Source\PSoC4/CapSense_Sensing.c ****     static void CapSense_SsSetWidgetTxClkSrc(uint32 wdgtIndex, CapSense_RAM_WD_BASE_STRUCT * ptrWdg
2556:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2557:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 lfsrSize;
2558:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 lfsrScale;
2559:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2560:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSX_TX_CLK_SOURCE) && \
2561:Generated_Source\PSoC4/CapSense_Sensing.c ****              (CapSense_DISABLE == CapSense_CSX_SKIP_OVSMPL_SPECIFIC_NODES))
2562:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 conversionsNum;
2563:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 snsClkDivider;
2564:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
2565:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2566:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if(CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSX_TX_CLK_SOURCE)
2567:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_DISABLE == CapSense_CSX_SKIP_OVSMPL_SPECIFIC_NODES)
2568:Generated_Source\PSoC4/CapSense_Sensing.c ****                 conversionsNum = (uint32)ptrWdgt->resolution;
2569:Generated_Source\PSoC4/CapSense_Sensing.c ****                 snsClkDivider = CapSense_SsCSXGetTxClkDivider(wdgtIndex);
2570:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrSize = CapSense_SsCalcLfsrSize(snsClkDivider, conversionsNum);
2571:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrScale = CapSense_SsCalcLfsrScale(snsClkDivider, lfsrSize);
2572:Generated_Source\PSoC4/CapSense_Sensing.c ****             #else
2573:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrSize = (uint8)CapSense_CLK_SOURCE_DIRECT;
2574:Generated_Source\PSoC4/CapSense_Sensing.c ****                 lfsrScale = 0u;
2575:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Unused function argument */
2576:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (void)wdgtIndex;
2577:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSX_SKIP_OVSMPL_SPECIFIC_NODES) */
2578:Generated_Source\PSoC4/CapSense_Sensing.c ****         #else
2579:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrSize = (uint8)CapSense_CSX_TX_CLK_SOURCE;
2580:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrScale = 0u;
2581:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Unused function argument */
2582:Generated_Source\PSoC4/CapSense_Sensing.c ****             (void)wdgtIndex;
2583:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSX_TX_CLK_SOURCE) */
2584:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2585:Generated_Source\PSoC4/CapSense_Sensing.c ****         ptrWdgt->snsClkSource = lfsrSize | (uint8)(lfsrScale << CapSense_CLK_SOURCE_LFSR_SCALE_OFFS
2586:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2587:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* ((CapSense_ENABLE == CapSense_CSX_EN) && (CapSense_ENABLE == CapSense_CSDV2)) */
2588:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2589:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2590:Generated_Source\PSoC4/CapSense_Sensing.c **** #if(((CapSense_ENABLE == CapSense_CSX_EN) && \
2591:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_DISABLE == CapSense_CSX_SKIP_OVSMPL_SPECIFIC_NODES) && \
2592:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_CSDV2) && \
2593:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSX_TX_CLK_SOURCE)) ||\
2594:Generated_Source\PSoC4/CapSense_Sensing.c ****     ((CapSense_ENABLE == CapSense_CSD_EN) && \
2595:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_ENABLE == CapSense_CSDV2) && \
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 47


2596:Generated_Source\PSoC4/CapSense_Sensing.c ****      (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE)))
2597:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
2598:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsCalcLfsrSize
2599:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
2600:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2601:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
2602:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This is an internal function that finds a SSC polynomial size in the Auto mode.
2603:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2604:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
2605:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The SSC polynomial size in the auto mode is found based on the following
2606:Generated_Source\PSoC4/CapSense_Sensing.c **** *  requirements:
2607:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - an LFSR value should be selected so that the max clock dither is limited with +/-10%.
2608:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - at least one full spread spectrum polynomial should pass during the scan time.
2609:Generated_Source\PSoC4/CapSense_Sensing.c **** *  - the value of the number of conversions should be an integer multiple of the
2610:Generated_Source\PSoC4/CapSense_Sensing.c **** *    repeat period of the programmed LFSR_SIZE.
2611:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2612:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param
2613:Generated_Source\PSoC4/CapSense_Sensing.c **** *  snsClkDivider The divider value for the sense clock.
2614:Generated_Source\PSoC4/CapSense_Sensing.c **** *  resolution The widget resolution.
2615:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2616:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return lfsrSize The LFSRSIZE value for the SENSE_PERIOD register.
2617:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2618:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
2619:Generated_Source\PSoC4/CapSense_Sensing.c **** static uint8 CapSense_SsCalcLfsrSize(uint32 snsClkDivider, uint32 conversionsNum)
2620:Generated_Source\PSoC4/CapSense_Sensing.c **** {
  28              		.loc 1 2620 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 0400     		movs	r4, r0
  40 0004 0D00     		movs	r5, r1
  41              	.LVL1:
2621:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8 lfsrSize = 0u;
2622:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2623:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Find LFSR value */
2624:Generated_Source\PSoC4/CapSense_Sensing.c ****     if((CapSense_SNSCLK_SSC4_THRESHOLD <= snsClkDivider) &&
  42              		.loc 1 2624 0
  43 0006 9F28     		cmp	r0, #159
  44 0008 08D9     		bls	.L2
  45              		.loc 1 2624 0 is_stmt 0 discriminator 1
  46 000a 1B4B     		ldr	r3, .L12
  47 000c 9942     		cmp	r1, r3
  48 000e 05D9     		bls	.L2
2625:Generated_Source\PSoC4/CapSense_Sensing.c ****        (CapSense_SNSCLK_SSC4_PERIOD <= conversionsNum) &&
2626:Generated_Source\PSoC4/CapSense_Sensing.c ****        (0uL == (conversionsNum % CapSense_SNSCLK_SSC4_PERIOD)))
  49              		.loc 1 2626 0 is_stmt 1
  50 0010 1A49     		ldr	r1, .L12+4
  51              	.LVL2:
  52 0012 2800     		movs	r0, r5
  53              	.LVL3:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 48


  54 0014 FFF7FEFF 		bl	__aeabi_uidivmod
  55              	.LVL4:
2625:Generated_Source\PSoC4/CapSense_Sensing.c ****        (CapSense_SNSCLK_SSC4_PERIOD <= conversionsNum) &&
  56              		.loc 1 2625 0
  57 0018 0029     		cmp	r1, #0
  58 001a 21D0     		beq	.L6
  59              	.L2:
2627:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2628:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrSize = CapSense_CLK_SOURCE_SSC4;
2629:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2630:Generated_Source\PSoC4/CapSense_Sensing.c ****     else if((CapSense_SNSCLK_SSC3_THRESHOLD <= snsClkDivider) &&
  60              		.loc 1 2630 0
  61 001c 9F2C     		cmp	r4, #159
  62 001e 09D9     		bls	.L4
  63              		.loc 1 2630 0 is_stmt 0 discriminator 1
  64 0020 FF23     		movs	r3, #255
  65 0022 5B00     		lsls	r3, r3, #1
  66 0024 9D42     		cmp	r5, r3
  67 0026 05D9     		bls	.L4
2631:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_SNSCLK_SSC3_PERIOD <= conversionsNum) &&
2632:Generated_Source\PSoC4/CapSense_Sensing.c ****             (0uL == (conversionsNum % CapSense_SNSCLK_SSC3_PERIOD)))
  68              		.loc 1 2632 0 is_stmt 1
  69 0028 1549     		ldr	r1, .L12+8
  70 002a 2800     		movs	r0, r5
  71 002c FFF7FEFF 		bl	__aeabi_uidivmod
  72              	.LVL5:
2631:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_SNSCLK_SSC3_PERIOD <= conversionsNum) &&
  73              		.loc 1 2631 0
  74 0030 0029     		cmp	r1, #0
  75 0032 17D0     		beq	.L7
  76              	.L4:
2633:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2634:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrSize = CapSense_CLK_SOURCE_SSC3;
2635:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2636:Generated_Source\PSoC4/CapSense_Sensing.c ****     else if((CapSense_SNSCLK_SSC2_THRESHOLD <= snsClkDivider) &&
  77              		.loc 1 2636 0
  78 0034 9F2C     		cmp	r4, #159
  79 0036 07D9     		bls	.L5
  80              		.loc 1 2636 0 is_stmt 0 discriminator 1
  81 0038 7E2D     		cmp	r5, #126
  82 003a 05D9     		bls	.L5
2637:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_SNSCLK_SSC2_PERIOD <= conversionsNum) &&
2638:Generated_Source\PSoC4/CapSense_Sensing.c ****             (0uL == (conversionsNum % CapSense_SNSCLK_SSC2_PERIOD)))
  83              		.loc 1 2638 0 is_stmt 1
  84 003c 7F21     		movs	r1, #127
  85 003e 2800     		movs	r0, r5
  86 0040 FFF7FEFF 		bl	__aeabi_uidivmod
  87              	.LVL6:
2637:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_SNSCLK_SSC2_PERIOD <= conversionsNum) &&
  88              		.loc 1 2637 0
  89 0044 0029     		cmp	r1, #0
  90 0046 0FD0     		beq	.L8
  91              	.L5:
2639:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2640:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrSize = CapSense_CLK_SOURCE_SSC2;
2641:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2642:Generated_Source\PSoC4/CapSense_Sensing.c ****     else if((CapSense_SNSCLK_SSC1_THRESHOLD <= snsClkDivider) &&
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 49


  92              		.loc 1 2642 0
  93 0048 9F2C     		cmp	r4, #159
  94 004a 0FD9     		bls	.L9
  95              		.loc 1 2642 0 is_stmt 0 discriminator 1
  96 004c 3E2D     		cmp	r5, #62
  97 004e 0FD9     		bls	.L10
2643:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_SNSCLK_SSC1_PERIOD <= conversionsNum) &&
2644:Generated_Source\PSoC4/CapSense_Sensing.c ****             (0uL == (conversionsNum % CapSense_SNSCLK_SSC1_PERIOD)))
  98              		.loc 1 2644 0 is_stmt 1
  99 0050 3F21     		movs	r1, #63
 100 0052 2800     		movs	r0, r5
 101 0054 FFF7FEFF 		bl	__aeabi_uidivmod
 102              	.LVL7:
2643:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_SNSCLK_SSC1_PERIOD <= conversionsNum) &&
 103              		.loc 1 2643 0
 104 0058 0029     		cmp	r1, #0
 105 005a 0BD0     		beq	.L11
2645:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2646:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrSize = CapSense_CLK_SOURCE_SSC1;
2647:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2648:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
2649:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2650:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrSize = (uint8)CapSense_CLK_SOURCE_DIRECT;
 106              		.loc 1 2650 0
 107 005c 0020     		movs	r0, #0
 108 005e 0AE0     		b	.L3
 109              	.L6:
2628:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 110              		.loc 1 2628 0
 111 0060 0420     		movs	r0, #4
 112 0062 08E0     		b	.L3
 113              	.L7:
2634:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 114              		.loc 1 2634 0
 115 0064 0320     		movs	r0, #3
 116 0066 06E0     		b	.L3
 117              	.L8:
2640:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 118              		.loc 1 2640 0
 119 0068 0220     		movs	r0, #2
 120 006a 04E0     		b	.L3
 121              	.L9:
 122              		.loc 1 2650 0
 123 006c 0020     		movs	r0, #0
 124 006e 02E0     		b	.L3
 125              	.L10:
 126 0070 0020     		movs	r0, #0
 127 0072 00E0     		b	.L3
 128              	.L11:
2646:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 129              		.loc 1 2646 0
 130 0074 0120     		movs	r0, #1
 131              	.L3:
 132              	.LVL8:
2651:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2652:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2653:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (lfsrSize);
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 50


2654:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 133              		.loc 1 2654 0
 134              		@ sp needed
 135              	.LVL9:
 136              	.LVL10:
 137 0076 70BD     		pop	{r4, r5, r6, pc}
 138              	.L13:
 139              		.align	2
 140              	.L12:
 141 0078 FE030000 		.word	1022
 142 007c FF030000 		.word	1023
 143 0080 FF010000 		.word	511
 144              		.cfi_endproc
 145              	.LFE21:
 146              		.size	CapSense_SsCalcLfsrSize, .-CapSense_SsCalcLfsrSize
 147              		.global	__aeabi_uidiv
 148              		.section	.text.CapSense_SsCalcLfsrScale,"ax",%progbits
 149              		.align	2
 150              		.code	16
 151              		.thumb_func
 152              		.type	CapSense_SsCalcLfsrScale, %function
 153              	CapSense_SsCalcLfsrScale:
 154              	.LFB22:
2655:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2656:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2657:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
2658:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_SsCalcLfsrScale
2659:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
2660:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2661:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
2662:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This is an internal function that calculates the LFSR scale value.
2663:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2664:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
2665:Generated_Source\PSoC4/CapSense_Sensing.c **** *  The LFSR scale value is used to increase the clock dither if the desired dither
2666:Generated_Source\PSoC4/CapSense_Sensing.c **** *  is wider than can be achieved with the current Sense Clock Divider and current LFSR
2667:Generated_Source\PSoC4/CapSense_Sensing.c **** *  period.
2668:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2669:Generated_Source\PSoC4/CapSense_Sensing.c **** *  This returns the LFSR scale value needed to keep the clock dither in
2670:Generated_Source\PSoC4/CapSense_Sensing.c **** *  range +/-10%.
2671:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2672:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param
2673:Generated_Source\PSoC4/CapSense_Sensing.c **** *  snsClkDivider The divider value for the sense clock.
2674:Generated_Source\PSoC4/CapSense_Sensing.c **** *  lfsrSize The period of the LFSR sequence.
2675:Generated_Source\PSoC4/CapSense_Sensing.c **** *          For devices with CapSense_CSDV2_REF9P6UA_EN = TRUE, the
2676:Generated_Source\PSoC4/CapSense_Sensing.c **** *          mode parameters can take the following values:
2677:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_DIRECT The spreadspectrum is not used.
2678:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC1   The length of LFSR sequence is 63 cycles.
2679:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC2   The length of LFSR sequence is 127 cycles.
2680:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC3   The length of LFSR sequence is 255 cycles.
2681:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC4   The length of LFSR sequence is 511 cycles.
2682:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2683:Generated_Source\PSoC4/CapSense_Sensing.c **** *          For devices with CapSense_CSDV2_REF9P6UA_EN = TRUE, the
2684:Generated_Source\PSoC4/CapSense_Sensing.c **** *          mode parameters can take the following values:
2685:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_DIRECT The spreadspectrum is not used.
2686:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC1   The length of LFSR sequence is 3 cycles.
2687:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC2   The length of LFSR sequence is 7 cycles.
2688:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC3   The length of LFSR sequence is 15 cycles.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 51


2689:Generated_Source\PSoC4/CapSense_Sensing.c **** *          CapSense_CLK_SOURCE_SSC4   The length of LFSR sequence is 31 cycles.
2690:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2691:Generated_Source\PSoC4/CapSense_Sensing.c **** * \return
2692:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Returns the LFSR scale value needed to keep the clock dither in range +/-10%.
2693:Generated_Source\PSoC4/CapSense_Sensing.c **** *
2694:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
2695:Generated_Source\PSoC4/CapSense_Sensing.c **** static uint8 CapSense_SsCalcLfsrScale(uint32 snsClkDivider, uint8 lfsrSize)
2696:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 155              		.loc 1 2696 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL11:
 160 0000 10B5     		push	{r4, lr}
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
2697:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 lfsrScale;
2698:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 lfsrRange;
2699:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 lfsrDither;
2700:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2701:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Initialize the lfsrSize variable with the LFSR Range for given Lfsr Size. */
2702:Generated_Source\PSoC4/CapSense_Sensing.c ****     switch(lfsrSize)
 164              		.loc 1 2702 0
 165 0002 4B1E     		subs	r3, r1, #1
 166 0004 DBB2     		uxtb	r3, r3
 167 0006 032B     		cmp	r3, #3
 168 0008 01D8     		bhi	.L20
2703:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2704:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_CLK_SOURCE_SSC1:
2705:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2706:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrRange = CapSense_SNSCLK_SSC1_RANGE;
 169              		.loc 1 2706 0
 170 000a 1023     		movs	r3, #16
 171 000c 00E0     		b	.L15
 172              	.L20:
2707:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2708:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2709:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_CLK_SOURCE_SSC2:
2710:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2711:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrRange = CapSense_SNSCLK_SSC2_RANGE;
2712:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2713:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2714:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_CLK_SOURCE_SSC3:
2715:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2716:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrRange = CapSense_SNSCLK_SSC3_RANGE;
2717:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2718:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2719:Generated_Source\PSoC4/CapSense_Sensing.c ****         case CapSense_CLK_SOURCE_SSC4:
2720:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2721:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrRange = CapSense_SNSCLK_SSC4_RANGE;
2722:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2723:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2724:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
2725:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2726:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrRange = 0u;
 173              		.loc 1 2726 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 52


 174 000e 0023     		movs	r3, #0
 175              	.L15:
 176              	.LVL12:
2727:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
2728:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2729:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2730:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2731:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Calculate the LFSR Scale value that is required to keep the Clock dither
2732:Generated_Source\PSoC4/CapSense_Sensing.c ****      * as close as possible to the +/-10% limit of the used frequency.
2733:Generated_Source\PSoC4/CapSense_Sensing.c ****      */
2734:Generated_Source\PSoC4/CapSense_Sensing.c ****     if((lfsrSize != CapSense_CLK_SOURCE_DIRECT) && (0u != lfsrRange))
 177              		.loc 1 2734 0
 178 0010 0029     		cmp	r1, #0
 179 0012 11D0     		beq	.L21
 180              		.loc 1 2734 0 is_stmt 0 discriminator 1
 181 0014 002B     		cmp	r3, #0
 182 0016 11D0     		beq	.L22
2735:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2736:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Calculate the LFSR Dither in percents. */
2737:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrDither  = ((lfsrRange * 100uL) / snsClkDivider);
 183              		.loc 1 2737 0 is_stmt 1
 184 0018 6422     		movs	r2, #100
 185 001a 5343     		muls	r3, r2
 186              	.LVL13:
 187 001c 0100     		movs	r1, r0
 188              	.LVL14:
 189 001e 1800     		movs	r0, r3
 190              	.LVL15:
 191 0020 FFF7FEFF 		bl	__aeabi_uidiv
 192              	.LVL16:
2738:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrScale = 0uL;
 193              		.loc 1 2738 0
 194 0024 0023     		movs	r3, #0
2739:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2740:Generated_Source\PSoC4/CapSense_Sensing.c ****         while(lfsrDither < CapSense_LFSR_DITHER_PERCENTAGE)
 195              		.loc 1 2740 0
 196 0026 01E0     		b	.L18
 197              	.LVL17:
 198              	.L19:
2741:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2742:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrScale++;
 199              		.loc 1 2742 0
 200 0028 0133     		adds	r3, r3, #1
 201              	.LVL18:
2743:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrDither <<=1uL;
 202              		.loc 1 2743 0
 203 002a 4000     		lsls	r0, r0, #1
 204              	.LVL19:
 205              	.L18:
2740:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 206              		.loc 1 2740 0
 207 002c 0928     		cmp	r0, #9
 208 002e FBD9     		bls	.L19
2744:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2745:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2746:Generated_Source\PSoC4/CapSense_Sensing.c ****         if(lfsrDither > CapSense_LFSR_DITHER_PERCENTAGE)
 209              		.loc 1 2746 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 53


 210 0030 0A28     		cmp	r0, #10
 211 0032 04D9     		bls	.L17
2747:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2748:Generated_Source\PSoC4/CapSense_Sensing.c ****             lfsrScale--;
 212              		.loc 1 2748 0
 213 0034 013B     		subs	r3, r3, #1
 214              	.LVL20:
 215 0036 02E0     		b	.L17
 216              	.LVL21:
 217              	.L21:
2749:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2750:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2751:Generated_Source\PSoC4/CapSense_Sensing.c ****     else
2752:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
2753:Generated_Source\PSoC4/CapSense_Sensing.c ****         lfsrScale = 0uL;
 218              		.loc 1 2753 0
 219 0038 0023     		movs	r3, #0
 220              	.LVL22:
 221 003a 00E0     		b	.L17
 222              	.LVL23:
 223              	.L22:
 224 003c 0023     		movs	r3, #0
 225              	.LVL24:
 226              	.L17:
2754:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
2755:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2756:Generated_Source\PSoC4/CapSense_Sensing.c ****     return ((uint8)lfsrScale);
 227              		.loc 1 2756 0
 228 003e D8B2     		uxtb	r0, r3
2757:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 229              		.loc 1 2757 0
 230              		@ sp needed
 231 0040 10BD     		pop	{r4, pc}
 232              		.cfi_endproc
 233              	.LFE22:
 234              		.size	CapSense_SsCalcLfsrScale, .-CapSense_SsCalcLfsrScale
 235 0042 C046     		.section	.text.CapSense_IsBusy,"ax",%progbits
 236              		.align	2
 237              		.global	CapSense_IsBusy
 238              		.code	16
 239              		.thumb_func
 240              		.type	CapSense_IsBusy, %function
 241              	CapSense_IsBusy:
 242              	.LFB1:
 237:Generated_Source\PSoC4/CapSense_Sensing.c ****     return (CapSense_dsRam.status & CapSense_SW_STS_BUSY);
 243              		.loc 1 237 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              		@ link register save eliminated.
 238:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 248              		.loc 1 238 0
 249 0000 024B     		ldr	r3, .L24
 250 0002 DB68     		ldr	r3, [r3, #12]
 251 0004 8020     		movs	r0, #128
 252 0006 1840     		ands	r0, r3
 239:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 54


 253              		.loc 1 239 0
 254              		@ sp needed
 255 0008 7047     		bx	lr
 256              	.L25:
 257 000a C046     		.align	2
 258              	.L24:
 259 000c 00000000 		.word	CapSense_dsRam
 260              		.cfi_endproc
 261              	.LFE1:
 262              		.size	CapSense_IsBusy, .-CapSense_IsBusy
 263              		.section	.text.CapSense_SetupWidget,"ax",%progbits
 264              		.align	2
 265              		.global	CapSense_SetupWidget
 266              		.code	16
 267              		.thumb_func
 268              		.type	CapSense_SetupWidget, %function
 269              	CapSense_SetupWidget:
 270              	.LFB2:
 283:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus widgetStatus;
 271              		.loc 1 283 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              	.LVL25:
 276 0000 10B5     		push	{r4, lr}
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 4, -8
 279              		.cfi_offset 14, -4
 286:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 280              		.loc 1 286 0
 281 0002 0E4B     		ldr	r3, .L32
 282 0004 DB68     		ldr	r3, [r3, #12]
 283 0006 DB03     		lsls	r3, r3, #15
 284 0008 0DD4     		bmi	.L29
 296:Generated_Source\PSoC4/CapSense_Sensing.c ****         (0uL != CapSense_GET_WIDGET_EN_STATUS(widgetId)))
 285              		.loc 1 296 0
 286 000a 0528     		cmp	r0, #5
 287 000c 0DD8     		bhi	.L30
 297:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 288              		.loc 1 297 0 discriminator 1
 289 000e 4309     		lsrs	r3, r0, #5
 290 0010 0433     		adds	r3, r3, #4
 291 0012 9B00     		lsls	r3, r3, #2
 292 0014 094A     		ldr	r2, .L32
 293 0016 9B58     		ldr	r3, [r3, r2]
 294 0018 1F22     		movs	r2, #31
 295 001a 0240     		ands	r2, r0
 296 001c D340     		lsrs	r3, r3, r2
 296:Generated_Source\PSoC4/CapSense_Sensing.c ****         (0uL != CapSense_GET_WIDGET_EN_STATUS(widgetId)))
 297              		.loc 1 296 0 discriminator 1
 298 001e DB07     		lsls	r3, r3, #31
 299 0020 05D4     		bmi	.L31
 304:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 300              		.loc 1 304 0
 301 0022 0124     		movs	r4, #1
 302 0024 04E0     		b	.L27
 303              	.L29:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 55


 289:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 304              		.loc 1 289 0
 305 0026 1124     		movs	r4, #17
 306 0028 02E0     		b	.L27
 307              	.L30:
 304:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 308              		.loc 1 304 0
 309 002a 0124     		movs	r4, #1
 310 002c 00E0     		b	.L27
 311              	.L31:
 300:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 312              		.loc 1 300 0
 313 002e 0024     		movs	r4, #0
 314              	.L27:
 315              	.LVL26:
 311:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 316              		.loc 1 311 0
 317 0030 002C     		cmp	r4, #0
 318 0032 01D1     		bne	.L28
 324:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 319              		.loc 1 324 0
 320 0034 FFF7FEFF 		bl	CapSense_CSDSetupWidget
 321              	.LVL27:
 322              	.L28:
 340:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 323              		.loc 1 340 0
 324 0038 2000     		movs	r0, r4
 325              		@ sp needed
 326              	.LVL28:
 327 003a 10BD     		pop	{r4, pc}
 328              	.L33:
 329              		.align	2
 330              	.L32:
 331 003c 00000000 		.word	CapSense_dsRam
 332              		.cfi_endproc
 333              	.LFE2:
 334              		.size	CapSense_SetupWidget, .-CapSense_SetupWidget
 335              		.section	.text.CapSense_Scan,"ax",%progbits
 336              		.align	2
 337              		.global	CapSense_Scan
 338              		.code	16
 339              		.thumb_func
 340              		.type	CapSense_Scan, %function
 341              	CapSense_Scan:
 342              	.LFB3:
 366:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus scanStatus = CYRET_SUCCESS;
 343              		.loc 1 366 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347 0000 10B5     		push	{r4, lr}
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 4, -8
 350              		.cfi_offset 14, -4
 351              	.LVL29:
 369:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 352              		.loc 1 369 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 56


 353 0002 084B     		ldr	r3, .L40
 354 0004 DB68     		ldr	r3, [r3, #12]
 355 0006 DB03     		lsls	r3, r3, #15
 356 0008 07D4     		bmi	.L37
 376:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 357              		.loc 1 376 0
 358 000a 074B     		ldr	r3, .L40+4
 359 000c 1B78     		ldrb	r3, [r3]
 360 000e 012B     		cmp	r3, #1
 361 0010 05D1     		bne	.L39
 385:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 362              		.loc 1 385 0
 363 0012 FFF7FEFF 		bl	CapSense_CSDScan
 364              	.LVL30:
 367:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 365              		.loc 1 367 0
 366 0016 0020     		movs	r0, #0
 386:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 367              		.loc 1 386 0
 368 0018 03E0     		b	.L35
 369              	.L37:
 372:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 370              		.loc 1 372 0
 371 001a 1120     		movs	r0, #17
 372 001c 01E0     		b	.L35
 373              	.L39:
 394:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 374              		.loc 1 394 0
 375 001e 0120     		movs	r0, #1
 376 0020 4042     		rsbs	r0, r0, #0
 377              	.L35:
 378              	.LVL31:
 399:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 379              		.loc 1 399 0
 380              		@ sp needed
 381 0022 10BD     		pop	{r4, pc}
 382              	.L41:
 383              		.align	2
 384              	.L40:
 385 0024 00000000 		.word	CapSense_dsRam
 386 0028 00000000 		.word	.LANCHOR0
 387              		.cfi_endproc
 388              	.LFE3:
 389              		.size	CapSense_Scan, .-CapSense_Scan
 390              		.section	.text.CapSense_ScanAllWidgets,"ax",%progbits
 391              		.align	2
 392              		.global	CapSense_ScanAllWidgets
 393              		.code	16
 394              		.thumb_func
 395              		.type	CapSense_ScanAllWidgets, %function
 396              	CapSense_ScanAllWidgets:
 397              	.LFB4:
 428:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus scanStatus = CYRET_UNKNOWN;
 398              		.loc 1 428 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 57


 402 0000 10B5     		push	{r4, lr}
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 4, -8
 405              		.cfi_offset 14, -4
 406              	.LVL32:
 433:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 407              		.loc 1 433 0
 408 0002 0F4B     		ldr	r3, .L50
 409 0004 DB68     		ldr	r3, [r3, #12]
 410 0006 1B06     		lsls	r3, r3, #24
 411 0008 18D4     		bmi	.L49
 412 000a 0024     		movs	r4, #0
 413 000c 0120     		movs	r0, #1
 414 000e 4042     		rsbs	r0, r0, #0
 415 0010 11E0     		b	.L44
 416              	.LVL33:
 417              	.L48:
 449:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 418              		.loc 1 449 0
 419 0012 2000     		movs	r0, r4
 420              	.LVL34:
 421 0014 FFF7FEFF 		bl	CapSense_SetupWidget
 422              	.LVL35:
 451:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
 423              		.loc 1 451 0
 424 0018 0028     		cmp	r0, #0
 425 001a 0BD1     		bne	.L45
 455:Generated_Source\PSoC4/CapSense_Sensing.c ****                     {
 426              		.loc 1 455 0
 427 001c 042C     		cmp	r4, #4
 428 001e 03D8     		bhi	.L46
 458:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
 429              		.loc 1 458 0
 430 0020 0122     		movs	r2, #1
 431 0022 084B     		ldr	r3, .L50+4
 432 0024 5A70     		strb	r2, [r3, #1]
 433 0026 02E0     		b	.L47
 434              	.L46:
 463:Generated_Source\PSoC4/CapSense_Sensing.c ****                     }
 435              		.loc 1 463 0
 436 0028 0022     		movs	r2, #0
 437 002a 064B     		ldr	r3, .L50+4
 438 002c 5A70     		strb	r2, [r3, #1]
 439              	.L47:
 473:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 440              		.loc 1 473 0
 441 002e FFF7FEFF 		bl	CapSense_Scan
 442              	.LVL36:
 475:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 443              		.loc 1 475 0
 444 0032 04E0     		b	.L43
 445              	.L45:
 446:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 446              		.loc 1 446 0
 447 0034 0134     		adds	r4, r4, #1
 448              	.LVL37:
 449              	.L44:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 58


 444:Generated_Source\PSoC4/CapSense_Sensing.c ****              wdgtIndex < CapSense_TOTAL_WIDGETS;
 450              		.loc 1 444 0 discriminator 1
 451 0036 052C     		cmp	r4, #5
 452 0038 EBD9     		bls	.L48
 453 003a 00E0     		b	.L43
 454              	.LVL38:
 455              	.L49:
 436:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 456              		.loc 1 436 0
 457 003c 1120     		movs	r0, #17
 458              	.LVL39:
 459              	.L43:
 481:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 460              		.loc 1 481 0
 461              		@ sp needed
 462 003e 10BD     		pop	{r4, pc}
 463              	.L51:
 464              		.align	2
 465              	.L50:
 466 0040 00000000 		.word	CapSense_dsRam
 467 0044 00000000 		.word	.LANCHOR0
 468              		.cfi_endproc
 469              	.LFE4:
 470              		.size	CapSense_ScanAllWidgets, .-CapSense_ScanAllWidgets
 471              		.section	.text.CapSense_SetupWidgetExt,"ax",%progbits
 472              		.align	2
 473              		.global	CapSense_SetupWidgetExt
 474              		.code	16
 475              		.thumb_func
 476              		.type	CapSense_SetupWidgetExt, %function
 477              	CapSense_SetupWidgetExt:
 478              	.LFB5:
 536:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus widgetStatus;
 479              		.loc 1 536 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL40:
 484 0000 10B5     		push	{r4, lr}
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 4, -8
 487              		.cfi_offset 14, -4
 539:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 488              		.loc 1 539 0
 489 0002 134B     		ldr	r3, .L59
 490 0004 DB68     		ldr	r3, [r3, #12]
 491 0006 DB03     		lsls	r3, r3, #15
 492 0008 15D4     		bmi	.L55
 549:Generated_Source\PSoC4/CapSense_Sensing.c ****         (0uL != CapSense_GET_WIDGET_EN_STATUS(widgetId)) &&
 493              		.loc 1 549 0
 494 000a 0528     		cmp	r0, #5
 495 000c 15D8     		bhi	.L56
 550:Generated_Source\PSoC4/CapSense_Sensing.c ****         (sensorId < CapSense_GET_SENSOR_COUNT(widgetId)))
 496              		.loc 1 550 0 discriminator 1
 497 000e 4309     		lsrs	r3, r0, #5
 498 0010 0433     		adds	r3, r3, #4
 499 0012 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 59


 500 0014 0E4A     		ldr	r2, .L59
 501 0016 9B58     		ldr	r3, [r3, r2]
 502 0018 1F22     		movs	r2, #31
 503 001a 0240     		ands	r2, r0
 504 001c D340     		lsrs	r3, r3, r2
 549:Generated_Source\PSoC4/CapSense_Sensing.c ****         (0uL != CapSense_GET_WIDGET_EN_STATUS(widgetId)) &&
 505              		.loc 1 549 0 discriminator 1
 506 001e DB07     		lsls	r3, r3, #31
 507 0020 0DD5     		bpl	.L57
 551:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 508              		.loc 1 551 0
 509 0022 C200     		lsls	r2, r0, #3
 510 0024 121A     		subs	r2, r2, r0
 511 0026 9300     		lsls	r3, r2, #2
 512 0028 0A4A     		ldr	r2, .L59+4
 513 002a D318     		adds	r3, r2, r3
 514 002c 1B8B     		ldrh	r3, [r3, #24]
 550:Generated_Source\PSoC4/CapSense_Sensing.c ****         (sensorId < CapSense_GET_SENSOR_COUNT(widgetId)))
 515              		.loc 1 550 0
 516 002e 8B42     		cmp	r3, r1
 517 0030 07D8     		bhi	.L58
 558:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 518              		.loc 1 558 0
 519 0032 0124     		movs	r4, #1
 520 0034 06E0     		b	.L53
 521              	.L55:
 542:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 522              		.loc 1 542 0
 523 0036 1124     		movs	r4, #17
 524 0038 04E0     		b	.L53
 525              	.L56:
 558:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 526              		.loc 1 558 0
 527 003a 0124     		movs	r4, #1
 528 003c 02E0     		b	.L53
 529              	.L57:
 530 003e 0124     		movs	r4, #1
 531 0040 00E0     		b	.L53
 532              	.L58:
 554:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 533              		.loc 1 554 0
 534 0042 0024     		movs	r4, #0
 535              	.L53:
 536              	.LVL41:
 565:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 537              		.loc 1 565 0
 538 0044 002C     		cmp	r4, #0
 539 0046 01D1     		bne	.L54
 578:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 540              		.loc 1 578 0
 541 0048 FFF7FEFF 		bl	CapSense_CSDSetupWidgetExt
 542              	.LVL42:
 543              	.L54:
 594:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 544              		.loc 1 594 0
 545 004c 2000     		movs	r0, r4
 546              		@ sp needed
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 60


 547              	.LVL43:
 548 004e 10BD     		pop	{r4, pc}
 549              	.L60:
 550              		.align	2
 551              	.L59:
 552 0050 00000000 		.word	CapSense_dsRam
 553 0054 00000000 		.word	CapSense_dsFlash
 554              		.cfi_endproc
 555              	.LFE5:
 556              		.size	CapSense_SetupWidgetExt, .-CapSense_SetupWidgetExt
 557              		.section	.text.CapSense_ScanExt,"ax",%progbits
 558              		.align	2
 559              		.global	CapSense_ScanExt
 560              		.code	16
 561              		.thumb_func
 562              		.type	CapSense_ScanExt, %function
 563              	CapSense_ScanExt:
 564              	.LFB6:
 642:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus scanStatus = CYRET_SUCCESS;
 565              		.loc 1 642 0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569 0000 10B5     		push	{r4, lr}
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 4, -8
 572              		.cfi_offset 14, -4
 573              	.LVL44:
 645:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 574              		.loc 1 645 0
 575 0002 084B     		ldr	r3, .L67
 576 0004 DB68     		ldr	r3, [r3, #12]
 577 0006 DB03     		lsls	r3, r3, #15
 578 0008 07D4     		bmi	.L64
 652:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 579              		.loc 1 652 0
 580 000a 074B     		ldr	r3, .L67+4
 581 000c 1B78     		ldrb	r3, [r3]
 582 000e 012B     		cmp	r3, #1
 583 0010 05D1     		bne	.L66
 661:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 584              		.loc 1 661 0
 585 0012 FFF7FEFF 		bl	CapSense_CSDScanExt
 586              	.LVL45:
 643:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 587              		.loc 1 643 0
 588 0016 0020     		movs	r0, #0
 662:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 589              		.loc 1 662 0
 590 0018 03E0     		b	.L62
 591              	.L64:
 648:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 592              		.loc 1 648 0
 593 001a 1120     		movs	r0, #17
 594 001c 01E0     		b	.L62
 595              	.L66:
 670:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 61


 596              		.loc 1 670 0
 597 001e 0120     		movs	r0, #1
 598 0020 4042     		rsbs	r0, r0, #0
 599              	.L62:
 600              	.LVL46:
 675:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 601              		.loc 1 675 0
 602              		@ sp needed
 603 0022 10BD     		pop	{r4, pc}
 604              	.L68:
 605              		.align	2
 606              	.L67:
 607 0024 00000000 		.word	CapSense_dsRam
 608 0028 00000000 		.word	.LANCHOR0
 609              		.cfi_endproc
 610              	.LFE6:
 611              		.size	CapSense_ScanExt, .-CapSense_ScanExt
 612              		.section	.text.CapSense_SetPinState,"ax",%progbits
 613              		.align	2
 614              		.global	CapSense_SetPinState
 615              		.code	16
 616              		.thumb_func
 617              		.type	CapSense_SetPinState, %function
 618              	CapSense_SetPinState:
 619              	.LFB8:
 841:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 eltdNum;
 620              		.loc 1 841 0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              	.LVL47:
 625 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 626              		.cfi_def_cfa_offset 24
 627              		.cfi_offset 3, -24
 628              		.cfi_offset 4, -20
 629              		.cfi_offset 5, -16
 630              		.cfi_offset 6, -12
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 1600     		movs	r6, r2
 866:Generated_Source\PSoC4/CapSense_Sensing.c ****         eltdNum = 1u;
 634              		.loc 1 866 0
 635 0004 C300     		lsls	r3, r0, #3
 636 0006 181A     		subs	r0, r3, r0
 637              	.LVL48:
 638 0008 8300     		lsls	r3, r0, #2
 639 000a 2B4A     		ldr	r2, .L77
 640              	.LVL49:
 641 000c 9C58     		ldr	r4, [r3, r2]
 642 000e CB00     		lsls	r3, r1, #3
 643 0010 591A     		subs	r1, r3, r1
 644              	.LVL50:
 645 0012 8B00     		lsls	r3, r1, #2
 646 0014 E418     		adds	r4, r4, r3
 647              	.LVL51:
 871:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 648              		.loc 1 871 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 62


 649 0016 0025     		movs	r5, #0
 650 0018 4AE0     		b	.L70
 651              	.LVL52:
 652              	.L76:
 874:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(ioPtr->hsiomPtr, CY_GET_REG32(ioPtr->hsiomPtr) & ~(CapSense_HSIOM_SEL_MASK << 
 653              		.loc 1 874 0
 654 001a FFF7FEFF 		bl	CyEnterCriticalSection
 655              	.LVL53:
 875:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(ioPtr->pcPtr, CY_GET_REG32(ioPtr->pcPtr) & ~(CapSense_GPIO_PC_MASK << ioPtr->s
 656              		.loc 1 875 0
 657 001e 2168     		ldr	r1, [r4]
 658 0020 0B68     		ldr	r3, [r1]
 659 0022 277E     		ldrb	r7, [r4, #24]
 660 0024 0F22     		movs	r2, #15
 661 0026 BA40     		lsls	r2, r2, r7
 662 0028 9343     		bics	r3, r2
 663 002a 0B60     		str	r3, [r1]
 876:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 664              		.loc 1 876 0
 665 002c 6168     		ldr	r1, [r4, #4]
 666 002e 0B68     		ldr	r3, [r1]
 667 0030 A77E     		ldrb	r7, [r4, #26]
 668 0032 0722     		movs	r2, #7
 669 0034 BA40     		lsls	r2, r2, r7
 670 0036 9343     		bics	r3, r2
 671 0038 0B60     		str	r3, [r1]
 877:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 672              		.loc 1 877 0
 673 003a FFF7FEFF 		bl	CyExitCriticalSection
 674              	.LVL54:
 879:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 675              		.loc 1 879 0
 676 003e 012E     		cmp	r6, #1
 677 0040 19D0     		beq	.L72
 678 0042 002E     		cmp	r6, #0
 679 0044 04D0     		beq	.L73
 680 0046 022E     		cmp	r6, #2
 681 0048 25D0     		beq	.L74
 682 004a 032E     		cmp	r6, #3
 683 004c 1FD0     		beq	.L75
 684 004e 2DE0     		b	.L71
 685              	.L73:
 883:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(ioPtr->pcPtr, CY_GET_REG32(ioPtr->pcPtr) | (CapSense_SNS_GROUND_CONNECT <<
 686              		.loc 1 883 0
 687 0050 FFF7FEFF 		bl	CyEnterCriticalSection
 688              	.LVL55:
 884:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(ioPtr->drPtr, CY_GET_REG32(ioPtr->drPtr) & (uint32)(~(uint32)((uint32)1u <
 689              		.loc 1 884 0
 690 0054 6268     		ldr	r2, [r4, #4]
 691 0056 1168     		ldr	r1, [r2]
 692 0058 A77E     		ldrb	r7, [r4, #26]
 693 005a 0623     		movs	r3, #6
 694 005c BB40     		lsls	r3, r3, r7
 695 005e 0B43     		orrs	r3, r1
 696 0060 1360     		str	r3, [r2]
 885:Generated_Source\PSoC4/CapSense_Sensing.c ****             CyExitCriticalSection(interruptState);
 697              		.loc 1 885 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 63


 698 0062 A168     		ldr	r1, [r4, #8]
 699 0064 0B68     		ldr	r3, [r1]
 700 0066 677E     		ldrb	r7, [r4, #25]
 701 0068 0122     		movs	r2, #1
 702 006a BA40     		lsls	r2, r2, r7
 703 006c 9343     		bics	r3, r2
 704 006e 0B60     		str	r3, [r1]
 886:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 705              		.loc 1 886 0
 706 0070 FFF7FEFF 		bl	CyExitCriticalSection
 707              	.LVL56:
 887:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 708              		.loc 1 887 0
 709 0074 1AE0     		b	.L71
 710              	.L72:
 890:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(ioPtr->drPtr, CY_GET_REG32(ioPtr->drPtr) & (uint32)~(uint32)((uint32)1u <<
 711              		.loc 1 890 0
 712 0076 FFF7FEFF 		bl	CyEnterCriticalSection
 713              	.LVL57:
 891:Generated_Source\PSoC4/CapSense_Sensing.c ****             CyExitCriticalSection(interruptState);
 714              		.loc 1 891 0
 715 007a A168     		ldr	r1, [r4, #8]
 716 007c 0B68     		ldr	r3, [r1]
 717 007e 677E     		ldrb	r7, [r4, #25]
 718 0080 0122     		movs	r2, #1
 719 0082 BA40     		lsls	r2, r2, r7
 720 0084 9343     		bics	r3, r2
 721 0086 0B60     		str	r3, [r1]
 892:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 722              		.loc 1 892 0
 723 0088 FFF7FEFF 		bl	CyExitCriticalSection
 724              	.LVL58:
 893:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 725              		.loc 1 893 0
 726 008c 0EE0     		b	.L71
 727              	.L75:
 898:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 728              		.loc 1 898 0
 729 008e 2000     		movs	r0, r4
 730 0090 FFF7FEFF 		bl	CapSense_CSDConnectSns
 731              	.LVL59:
 899:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 732              		.loc 1 899 0
 733 0094 0AE0     		b	.L71
 734              	.L74:
 904:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CY_SET_REG32(ioPtr->hsiomPtr, CY_GET_REG32(ioPtr->hsiomPtr) | (CapSense_HSIOM_S
 735              		.loc 1 904 0
 736 0096 FFF7FEFF 		bl	CyEnterCriticalSection
 737              	.LVL60:
 905:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CyExitCriticalSection(interruptState);
 738              		.loc 1 905 0
 739 009a 2268     		ldr	r2, [r4]
 740 009c 1168     		ldr	r1, [r2]
 741 009e 277E     		ldrb	r7, [r4, #24]
 742 00a0 0523     		movs	r3, #5
 743 00a2 BB40     		lsls	r3, r3, r7
 744 00a4 0B43     		orrs	r3, r1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 64


 745 00a6 1360     		str	r3, [r2]
 906:Generated_Source\PSoC4/CapSense_Sensing.c ****                     break;
 746              		.loc 1 906 0
 747 00a8 FFF7FEFF 		bl	CyExitCriticalSection
 748              	.LVL61:
 749              	.L71:
 933:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 750              		.loc 1 933 0 discriminator 2
 751 00ac 1C34     		adds	r4, r4, #28
 752              	.LVL62:
 871:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 753              		.loc 1 871 0 discriminator 2
 754 00ae 0135     		adds	r5, r5, #1
 755              	.LVL63:
 756              	.L70:
 871:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 757              		.loc 1 871 0 is_stmt 0 discriminator 1
 758 00b0 002D     		cmp	r5, #0
 759 00b2 B2D0     		beq	.L76
 935:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 760              		.loc 1 935 0 is_stmt 1
 761              		@ sp needed
 762              	.LVL64:
 763              	.LVL65:
 764              	.LVL66:
 765 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 766              	.L78:
 767 00b6 C046     		.align	2
 768              	.L77:
 769 00b8 00000000 		.word	CapSense_dsFlash
 770              		.cfi_endproc
 771              	.LFE8:
 772              		.size	CapSense_SetPinState, .-CapSense_SetPinState
 773              		.section	.text.CapSense_SsSetAllIOsState,"ax",%progbits
 774              		.align	2
 775              		.global	CapSense_SsSetAllIOsState
 776              		.code	16
 777              		.thumb_func
 778              		.type	CapSense_SsSetAllIOsState, %function
 779              	CapSense_SsSetAllIOsState:
 780              	.LFB11:
1167:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8  interruptState;
 781              		.loc 1 1167 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              	.LVL67:
 786 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 787              		.cfi_def_cfa_offset 20
 788              		.cfi_offset 4, -20
 789              		.cfi_offset 5, -16
 790              		.cfi_offset 6, -12
 791              		.cfi_offset 7, -8
 792              		.cfi_offset 14, -4
 793 0002 5746     		mov	r7, r10
 794 0004 4E46     		mov	r6, r9
 795 0006 4546     		mov	r5, r8
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 65


 796 0008 E0B4     		push	{r5, r6, r7}
 797              		.cfi_def_cfa_offset 32
 798              		.cfi_offset 8, -32
 799              		.cfi_offset 9, -28
 800              		.cfi_offset 10, -24
 801 000a 8046     		mov	r8, r0
1180:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 802              		.loc 1 1180 0
 803 000c 0128     		cmp	r0, #1
 804 000e 0BD0     		beq	.L85
 805 0010 0228     		cmp	r0, #2
 806 0012 04D0     		beq	.L82
1184:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 807              		.loc 1 1184 0
 808 0014 0023     		movs	r3, #0
 809 0016 9A46     		mov	r10, r3
1183:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_GPIO;
 810              		.loc 1 1183 0
 811 0018 0633     		adds	r3, r3, #6
 812 001a 9946     		mov	r9, r3
 813 001c 07E0     		b	.L81
 814              	.L82:
 815              	.LVL68:
1192:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 816              		.loc 1 1192 0
 817 001e 0523     		movs	r3, #5
 818 0020 9A46     		mov	r10, r3
1191:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_CSD_SHIELD;
 819              		.loc 1 1191 0
 820 0022 0023     		movs	r3, #0
 821 0024 9946     		mov	r9, r3
1193:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
 822              		.loc 1 1193 0
 823 0026 02E0     		b	.L81
 824              	.LVL69:
 825              	.L85:
1188:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
 826              		.loc 1 1188 0
 827 0028 0023     		movs	r3, #0
 828 002a 9A46     		mov	r10, r3
1187:Generated_Source\PSoC4/CapSense_Sensing.c ****             newPinHsiomVal = CapSense_HSIOM_SEL_GPIO;
 829              		.loc 1 1187 0
 830 002c 9946     		mov	r9, r3
 831              	.L81:
 832              	.LVL70:
1201:Generated_Source\PSoC4/CapSense_Sensing.c ****     for (loopIndex = 0u; loopIndex < CapSense_TOTAL_ELECTRODES; loopIndex++)
 833              		.loc 1 1201 0
 834 002e 164C     		ldr	r4, .L86
1202:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 835              		.loc 1 1202 0
 836 0030 0025     		movs	r5, #0
 837 0032 1FE0     		b	.L83
 838              	.LVL71:
 839              	.L84:
1204:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 840              		.loc 1 1204 0 discriminator 3
 841 0034 FFF7FEFF 		bl	CyEnterCriticalSection
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 66


 842              	.LVL72:
1206:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpHsiomRegValue &= ~(snsIoPtr->hsiomMask);
 843              		.loc 1 1206 0 discriminator 3
 844 0038 2268     		ldr	r2, [r4]
 845 003a 1368     		ldr	r3, [r2]
 846              	.LVL73:
1207:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->hsiomPtr, tmpHsiomRegValue);
 847              		.loc 1 1207 0 discriminator 3
 848 003c 2169     		ldr	r1, [r4, #16]
 849 003e 8B43     		bics	r3, r1
 850              	.LVL74:
1208:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 851              		.loc 1 1208 0 discriminator 3
 852 0040 1360     		str	r3, [r2]
1210:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue &= ~(CapSense_GPIO_PC_MASK << snsIoPtr->shift);
 853              		.loc 1 1210 0 discriminator 3
 854 0042 6668     		ldr	r6, [r4, #4]
 855 0044 3268     		ldr	r2, [r6]
 856              	.LVL75:
1211:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue |=  (newPinPcVal << snsIoPtr->shift);
 857              		.loc 1 1211 0 discriminator 3
 858 0046 A77E     		ldrb	r7, [r4, #26]
 859 0048 0721     		movs	r1, #7
 860 004a B940     		lsls	r1, r1, r7
 861 004c 8A43     		bics	r2, r1
 862              	.LVL76:
1212:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->pcPtr, tmpPcDrRegValue);
 863              		.loc 1 1212 0 discriminator 3
 864 004e 4946     		mov	r1, r9
 865 0050 B940     		lsls	r1, r1, r7
 866 0052 0A43     		orrs	r2, r1
 867              	.LVL77:
1213:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 868              		.loc 1 1213 0 discriminator 3
 869 0054 3260     		str	r2, [r6]
1215:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->hsiomPtr, tmpHsiomRegValue);
 870              		.loc 1 1215 0 discriminator 3
 871 0056 227E     		ldrb	r2, [r4, #24]
 872              	.LVL78:
 873 0058 5146     		mov	r1, r10
 874 005a 9140     		lsls	r1, r1, r2
 875 005c 0B43     		orrs	r3, r1
 876              	.LVL79:
1216:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 877              		.loc 1 1216 0 discriminator 3
 878 005e 2268     		ldr	r2, [r4]
 879 0060 1360     		str	r3, [r2]
 880              	.LVL80:
1218:Generated_Source\PSoC4/CapSense_Sensing.c ****         tmpPcDrRegValue &= ~(snsIoPtr->mask);
 881              		.loc 1 1218 0 discriminator 3
 882 0062 A268     		ldr	r2, [r4, #8]
 883 0064 1368     		ldr	r3, [r2]
 884              	.LVL81:
1219:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32 (snsIoPtr->drPtr, tmpPcDrRegValue);
 885              		.loc 1 1219 0 discriminator 3
 886 0066 6169     		ldr	r1, [r4, #20]
 887 0068 8B43     		bics	r3, r1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 67


 888              	.LVL82:
1220:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 889              		.loc 1 1220 0 discriminator 3
 890 006a 1360     		str	r3, [r2]
1222:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 891              		.loc 1 1222 0 discriminator 3
 892 006c FFF7FEFF 		bl	CyExitCriticalSection
 893              	.LVL83:
1225:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 894              		.loc 1 1225 0 discriminator 3
 895 0070 1C34     		adds	r4, r4, #28
 896              	.LVL84:
1202:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 897              		.loc 1 1202 0 discriminator 3
 898 0072 0135     		adds	r5, r5, #1
 899              	.LVL85:
 900              	.L83:
1202:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 901              		.loc 1 1202 0 is_stmt 0 discriminator 1
 902 0074 052D     		cmp	r5, #5
 903 0076 DDD9     		bls	.L84
1231:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif
 904              		.loc 1 1231 0 is_stmt 1
 905 0078 4046     		mov	r0, r8
 906 007a FFF7FEFF 		bl	CapSense_SsCSDSetShieldElectrodesState
 907              	.LVL86:
1238:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 908              		.loc 1 1238 0
 909              		@ sp needed
 910              	.LVL87:
 911              	.LVL88:
 912              	.LVL89:
 913              	.LVL90:
 914              	.LVL91:
 915 007e 1CBC     		pop	{r2, r3, r4}
 916 0080 9046     		mov	r8, r2
 917 0082 9946     		mov	r9, r3
 918 0084 A246     		mov	r10, r4
 919 0086 F0BD     		pop	{r4, r5, r6, r7, pc}
 920              	.L87:
 921              		.align	2
 922              	.L86:
 923 0088 00000000 		.word	CapSense_ioList
 924              		.cfi_endproc
 925              	.LFE11:
 926              		.size	CapSense_SsSetAllIOsState, .-CapSense_SsSetAllIOsState
 927              		.section	.text.CapSense_SsPostAllWidgetsScan,"ax",%progbits
 928              		.align	2
 929              		.global	CapSense_SsPostAllWidgetsScan
 930              		.code	16
 931              		.thumb_func
 932              		.type	CapSense_SsPostAllWidgetsScan, %function
 933              	CapSense_SsPostAllWidgetsScan:
 934              	.LFB12:
1317:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*
 935              		.loc 1 1317 0
 936              		.cfi_startproc
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 68


 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939 0000 10B5     		push	{r4, lr}
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 4, -8
 942              		.cfi_offset 14, -4
 943              	.L93:
1328:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 944              		.loc 1 1328 0
 945 0002 1B4A     		ldr	r2, .L94
 946 0004 9378     		ldrb	r3, [r2, #2]
 947 0006 0133     		adds	r3, r3, #1
 948 0008 DBB2     		uxtb	r3, r3
 949 000a 9370     		strb	r3, [r2, #2]
1330:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 950              		.loc 1 1330 0
 951 000c 9078     		ldrb	r0, [r2, #2]
 952 000e C0B2     		uxtb	r0, r0
 953 0010 FFF7FEFF 		bl	CapSense_SetupWidget
 954              	.LVL92:
 955 0014 041E     		subs	r4, r0, #0
 956              	.LVL93:
1332:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
 957              		.loc 1 1332 0
 958 0016 09D1     		bne	.L89
1334:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
 959              		.loc 1 1334 0
 960 0018 154B     		ldr	r3, .L94
 961 001a 9B78     		ldrb	r3, [r3, #2]
 962 001c 052B     		cmp	r3, #5
 963 001e 02D1     		bne	.L90
1337:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
 964              		.loc 1 1337 0
 965 0020 0022     		movs	r2, #0
 966 0022 134B     		ldr	r3, .L94
 967 0024 5A70     		strb	r2, [r3, #1]
 968              	.L90:
1339:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 969              		.loc 1 1339 0
 970 0026 FFF7FEFF 		bl	CapSense_Scan
 971              	.LVL94:
 972 002a 1EE0     		b	.L91
 973              	.LVL95:
 974              	.L89:
1341:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
 975              		.loc 1 1341 0
 976 002c 104B     		ldr	r3, .L94
 977 002e 9B78     		ldrb	r3, [r3, #2]
 978 0030 052B     		cmp	r3, #5
 979 0032 11D1     		bne	.L92
1355:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* All widgets are totally processed. Reset BUSY flag */
 980              		.loc 1 1355 0
 981 0034 0F4B     		ldr	r3, .L94+4
 982 0036 1A89     		ldrh	r2, [r3, #8]
 983 0038 0132     		adds	r2, r2, #1
 984 003a 1A81     		strh	r2, [r3, #8]
1357:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 69


 985              		.loc 1 1357 0
 986 003c DA68     		ldr	r2, [r3, #12]
 987 003e 8021     		movs	r1, #128
 988 0040 8A43     		bics	r2, r1
 989 0042 DA60     		str	r2, [r3, #12]
1360:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status |= ((postScanStatus & CapSense_STATUS_ERR_SIZE) << CapSense_S
 990              		.loc 1 1360 0
 991 0044 DA68     		ldr	r2, [r3, #12]
 992 0046 1202     		lsls	r2, r2, #8
 993 0048 120A     		lsrs	r2, r2, #8
 994 004a DA60     		str	r2, [r3, #12]
1361:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 995              		.loc 1 1361 0
 996 004c DA68     		ldr	r2, [r3, #12]
 997 004e 0406     		lsls	r4, r0, #24
 998 0050 1443     		orrs	r4, r2
 999 0052 DC60     		str	r4, [r3, #12]
 1000              	.LVL96:
1364:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 1001              		.loc 1 1364 0
 1002 0054 0024     		movs	r4, #0
 1003 0056 08E0     		b	.L91
 1004              	.LVL97:
 1005              	.L92:
1369:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.status |= ((postScanStatus & CapSense_STATUS_ERR_SIZE) << CapSense_S
 1006              		.loc 1 1369 0
 1007 0058 064A     		ldr	r2, .L94+4
 1008 005a D368     		ldr	r3, [r2, #12]
 1009 005c 1B02     		lsls	r3, r3, #8
 1010 005e 1B0A     		lsrs	r3, r3, #8
 1011 0060 D360     		str	r3, [r2, #12]
1370:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 1012              		.loc 1 1370 0
 1013 0062 D168     		ldr	r1, [r2, #12]
 1014 0064 0306     		lsls	r3, r0, #24
 1015 0066 0B43     		orrs	r3, r1
 1016 0068 D360     		str	r3, [r2, #12]
 1017              	.LVL98:
 1018              	.L91:
1372:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* (1u != CapSense_TOTAL_WIDGETS) */
 1019              		.loc 1 1372 0
 1020 006a 002C     		cmp	r4, #0
 1021 006c C9D1     		bne	.L93
1374:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1022              		.loc 1 1374 0
 1023              		@ sp needed
 1024              	.LVL99:
 1025 006e 10BD     		pop	{r4, pc}
 1026              	.L95:
 1027              		.align	2
 1028              	.L94:
 1029 0070 00000000 		.word	.LANCHOR0
 1030 0074 00000000 		.word	CapSense_dsRam
 1031              		.cfi_endproc
 1032              	.LFE12:
 1033              		.size	CapSense_SsPostAllWidgetsScan, .-CapSense_SsPostAllWidgetsScan
 1034              		.section	.text.CapSense_SsIsrInitialize,"ax",%progbits
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 70


 1035              		.align	2
 1036              		.global	CapSense_SsIsrInitialize
 1037              		.code	16
 1038              		.thumb_func
 1039              		.type	CapSense_SsIsrInitialize, %function
 1040              	CapSense_SsIsrInitialize:
 1041              	.LFB13:
1394:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_ISR_StartEx(address);
 1042              		.loc 1 1394 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 0
 1045              		@ frame_needed = 0, uses_anonymous_args = 0
 1046              	.LVL100:
 1047 0000 10B5     		push	{r4, lr}
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 4, -8
 1050              		.cfi_offset 14, -4
1395:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 1051              		.loc 1 1395 0
 1052 0002 FFF7FEFF 		bl	CapSense_ISR_StartEx
 1053              	.LVL101:
1396:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1054              		.loc 1 1396 0
 1055              		@ sp needed
 1056 0006 10BD     		pop	{r4, pc}
 1057              		.cfi_endproc
 1058              	.LFE13:
 1059              		.size	CapSense_SsIsrInitialize, .-CapSense_SsIsrInitialize
 1060              		.section	.text.CapSense_SsSetModClkClockDivider,"ax",%progbits
 1061              		.align	2
 1062              		.global	CapSense_SsSetModClkClockDivider
 1063              		.code	16
 1064              		.thumb_func
 1065              		.type	CapSense_SsSetModClkClockDivider, %function
 1066              	CapSense_SsSetModClkClockDivider:
 1067              	.LFB14:
1417:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK)
 1068              		.loc 1 1417 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              		@ link register save eliminated.
 1073              	.LVL102:
1420:Generated_Source\PSoC4/CapSense_Sensing.c ****                  ((uint32)CapSense_ModClk__DIV_ID <<
 1074              		.loc 1 1420 0
 1075 0000 074A     		ldr	r2, .L99
 1076 0002 084B     		ldr	r3, .L99+4
 1077 0004 1A60     		str	r2, [r3]
1430:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1078              		.loc 1 1430 0
 1079 0006 0138     		subs	r0, r0, #1
 1080              	.LVL103:
 1081 0008 0002     		lsls	r0, r0, #8
 1082              	.LVL104:
 1083 000a 074B     		ldr	r3, .L99+8
 1084 000c 1860     		str	r0, [r3]
 1085              	.L98:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 71


1433:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1086              		.loc 1 1433 0 discriminator 1
 1087 000e 054B     		ldr	r3, .L99+4
 1088 0010 1B68     		ldr	r3, [r3]
 1089 0012 002B     		cmp	r3, #0
 1090 0014 FBDB     		blt	.L98
1439:Generated_Source\PSoC4/CapSense_Sensing.c ****                  (uint32)(((uint32)CapSense_ModClk__DIV_ID << CapSense_MODCLK_CMD_DIV_SHIFT) |
 1091              		.loc 1 1439 0
 1092 0016 054A     		ldr	r2, .L99+12
 1093 0018 024B     		ldr	r3, .L99+4
 1094 001a 1A60     		str	r2, [r3]
1464:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1095              		.loc 1 1464 0
 1096              		@ sp needed
 1097 001c 7047     		bx	lr
 1098              	.L100:
 1099 001e C046     		.align	2
 1100              	.L99:
 1101 0020 40000040 		.word	1073741888
 1102 0024 00000140 		.word	1073807360
 1103 0028 00030140 		.word	1073808128
 1104 002c 40FF0080 		.word	-2147418304
 1105              		.cfi_endproc
 1106              	.LFE14:
 1107              		.size	CapSense_SsSetModClkClockDivider, .-CapSense_SsSetModClkClockDivider
 1108              		.section	.text.CapSense_SsSetSnsClockDivider,"ax",%progbits
 1109              		.align	2
 1110              		.global	CapSense_SsSetSnsClockDivider
 1111              		.code	16
 1112              		.thumb_func
 1113              		.type	CapSense_SsSetSnsClockDivider, %function
 1114              	CapSense_SsSetSnsClockDivider:
 1115              	.LFB15:
1485:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSDV2)
 1116              		.loc 1 1485 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              		@ link register save eliminated.
 1121              	.LVL105:
1494:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue &= (uint32)(~CapSense_SENSE_PERIOD_SENSE_DIV_MASK);
 1122              		.loc 1 1494 0
 1123 0000 034A     		ldr	r2, .L102
 1124 0002 1368     		ldr	r3, [r2]
 1125              	.LVL106:
1495:Generated_Source\PSoC4/CapSense_Sensing.c ****     newRegValue |= snsClk - 1u;
 1126              		.loc 1 1495 0
 1127 0004 1B0B     		lsrs	r3, r3, #12
 1128              	.LVL107:
 1129 0006 1B03     		lsls	r3, r3, #12
 1130              	.LVL108:
1496:Generated_Source\PSoC4/CapSense_Sensing.c ****     CY_SET_REG32(CapSense_SENSE_PERIOD_PTR, newRegValue);
 1131              		.loc 1 1496 0
 1132 0008 0138     		subs	r0, r0, #1
 1133              	.LVL109:
 1134 000a 1843     		orrs	r0, r3
 1135              	.LVL110:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 72


1497:Generated_Source\PSoC4/CapSense_Sensing.c **** #else
 1136              		.loc 1 1497 0
 1137 000c 1060     		str	r0, [r2]
1546:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1138              		.loc 1 1546 0
 1139              		@ sp needed
 1140 000e 7047     		bx	lr
 1141              	.L103:
 1142              		.align	2
 1143              	.L102:
 1144 0010 00020B40 		.word	1074463232
 1145              		.cfi_endproc
 1146              	.LFE15:
 1147              		.size	CapSense_SsSetSnsClockDivider, .-CapSense_SsSetSnsClockDivider
 1148              		.section	.text.CapSense_SsSetClockDividers,"ax",%progbits
 1149              		.align	2
 1150              		.global	CapSense_SsSetClockDividers
 1151              		.code	16
 1152              		.thumb_func
 1153              		.type	CapSense_SsSetClockDividers, %function
 1154              	CapSense_SsSetClockDividers:
 1155              	.LFB16:
1569:Generated_Source\PSoC4/CapSense_Sensing.c ****     /* Configure Mod clock */
 1156              		.loc 1 1569 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              	.LVL111:
 1161 0000 10B5     		push	{r4, lr}
 1162              		.cfi_def_cfa_offset 8
 1163              		.cfi_offset 4, -8
 1164              		.cfi_offset 14, -4
 1165 0002 0400     		movs	r4, r0
1571:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1166              		.loc 1 1571 0
 1167 0004 0800     		movs	r0, r1
 1168              	.LVL112:
 1169 0006 FFF7FEFF 		bl	CapSense_SsSetModClkClockDivider
 1170              	.LVL113:
1574:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 1171              		.loc 1 1574 0
 1172 000a 2000     		movs	r0, r4
 1173 000c FFF7FEFF 		bl	CapSense_SsSetSnsClockDivider
 1174              	.LVL114:
1575:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1175              		.loc 1 1575 0
 1176              		@ sp needed
 1177              	.LVL115:
 1178 0010 10BD     		pop	{r4, pc}
 1179              		.cfi_endproc
 1180              	.LFE16:
 1181              		.size	CapSense_SsSetClockDividers, .-CapSense_SsSetClockDividers
 1182 0012 C046     		.section	.text.CapSense_CalibrateWidget,"ax",%progbits
 1183              		.align	2
 1184              		.global	CapSense_CalibrateWidget
 1185              		.code	16
 1186              		.thumb_func
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 73


 1187              		.type	CapSense_CalibrateWidget, %function
 1188              	CapSense_CalibrateWidget:
 1189              	.LFB17:
1621:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus calibrateStatus = CYRET_SUCCESS;
 1190              		.loc 1 1621 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 0
 1193              		@ frame_needed = 0, uses_anonymous_args = 0
 1194              	.LVL116:
 1195 0000 10B5     		push	{r4, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 4, -8
 1198              		.cfi_offset 14, -4
 1199 0002 0300     		movs	r3, r0
 1200              	.LVL117:
1626:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
 1201              		.loc 1 1626 0
 1202 0004 0528     		cmp	r0, #5
 1203 0006 01D8     		bhi	.L108
1622:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1204              		.loc 1 1622 0
 1205 0008 0020     		movs	r0, #0
 1206              	.LVL118:
 1207 000a 00E0     		b	.L106
 1208              	.LVL119:
 1209              	.L108:
1628:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 1210              		.loc 1 1628 0
 1211 000c 0120     		movs	r0, #1
 1212              	.LVL120:
 1213              	.L106:
1646:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
 1214              		.loc 1 1646 0
 1215 000e 0028     		cmp	r0, #0
 1216 0010 03D1     		bne	.L107
1685:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1217              		.loc 1 1685 0
 1218 0012 5521     		movs	r1, #85
 1219 0014 1800     		movs	r0, r3
 1220              	.LVL121:
 1221 0016 FFF7FEFF 		bl	CapSense_CSDCalibrateWidget
 1222              	.LVL122:
 1223              	.L107:
1701:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1224              		.loc 1 1701 0
 1225              		@ sp needed
 1226 001a 10BD     		pop	{r4, pc}
 1227              		.cfi_endproc
 1228              	.LFE17:
 1229              		.size	CapSense_CalibrateWidget, .-CapSense_CalibrateWidget
 1230              		.section	.text.CapSense_CalibrateAllWidgets,"ax",%progbits
 1231              		.align	2
 1232              		.global	CapSense_CalibrateAllWidgets
 1233              		.code	16
 1234              		.thumb_func
 1235              		.type	CapSense_CalibrateAllWidgets, %function
 1236              	CapSense_CalibrateAllWidgets:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 74


 1237              	.LFB18:
1738:Generated_Source\PSoC4/CapSense_Sensing.c ****         cystatus calibrateStatus = CYRET_SUCCESS;
 1238              		.loc 1 1738 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242 0000 70B5     		push	{r4, r5, r6, lr}
 1243              		.cfi_def_cfa_offset 16
 1244              		.cfi_offset 4, -16
 1245              		.cfi_offset 5, -12
 1246              		.cfi_offset 6, -8
 1247              		.cfi_offset 14, -4
 1248              	.LVL123:
1742:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1249              		.loc 1 1742 0
 1250 0002 0024     		movs	r4, #0
1739:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 wdgtIndex;
 1251              		.loc 1 1739 0
 1252 0004 0025     		movs	r5, #0
1742:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1253              		.loc 1 1742 0
 1254 0006 04E0     		b	.L110
 1255              	.LVL124:
 1256              	.L111:
1744:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 1257              		.loc 1 1744 0 discriminator 3
 1258 0008 2000     		movs	r0, r4
 1259 000a FFF7FEFF 		bl	CapSense_CalibrateWidget
 1260              	.LVL125:
 1261 000e 0543     		orrs	r5, r0
 1262              	.LVL126:
1742:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1263              		.loc 1 1742 0 discriminator 3
 1264 0010 0134     		adds	r4, r4, #1
 1265              	.LVL127:
 1266              	.L110:
1742:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1267              		.loc 1 1742 0 is_stmt 0 discriminator 1
 1268 0012 052C     		cmp	r4, #5
 1269 0014 F8D9     		bls	.L111
1748:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ANYMODE_AUTOCAL) */
 1270              		.loc 1 1748 0 is_stmt 1
 1271 0016 2800     		movs	r0, r5
 1272              		@ sp needed
 1273              	.LVL128:
 1274              	.LVL129:
 1275 0018 70BD     		pop	{r4, r5, r6, pc}
 1276              		.cfi_endproc
 1277              	.LFE18:
 1278              		.size	CapSense_CalibrateAllWidgets, .-CapSense_CalibrateAllWidgets
 1279 001a C046     		.section	.text.CapSense_SsCSDGetColSnsClkDivider,"ax",%progbits
 1280              		.align	2
 1281              		.global	CapSense_SsCSDGetColSnsClkDivider
 1282              		.code	16
 1283              		.thumb_func
 1284              		.type	CapSense_SsCSDGetColSnsClkDivider, %function
 1285              	CapSense_SsCSDGetColSnsClkDivider:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 75


 1286              	.LFB23:
2758:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2759:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (((CapSense_ENABLE == CapSense_CSX_EN) && \
2760:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_DISABLE == CapSense_CSX_SKIP_OVSMPL_SPECIFIC_NODES) && \
2761:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_ENABLE == CapSense_CSDV2) && \
2762:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSX_TX_CLK_SOURCE)) ||\
2763:Generated_Source\PSoC4/CapSense_Sensing.c ****           ((CapSense_ENABLE == CapSense_CSD_EN) && \
2764:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_ENABLE == CapSense_CSDV2) && \
2765:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE))) */
2766:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2767:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2768:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSD_EN)
2769:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2770:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2771:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2772:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SsCSDGetColSnsClkDivider
2773:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2774:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2775:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2776:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function gets the Sense Clock Divider value for one-dimension widgets
2777:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  and Column Sense Clock divider value for two-dimension widgets.
2778:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2779:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2780:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  This function gets the Sense Clock Divider value based on the Component
2781:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  configuration. The function is applicable for one-dimension widgets and for
2782:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  two-dimension widgets.
2783:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2784:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param widgetId
2785:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Specifies the ID of the widget.
2786:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2787:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \return
2788:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Returns the Sense Clock Divider value for one-dimension widgets
2789:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  and the Column Sense Clock divider value for two-dimension widgets.
2790:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2791:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2792:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 CapSense_SsCSDGetColSnsClkDivider(uint32 widgetId)
2793:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1287              		.loc 1 2793 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
 1292              	.LVL130:
2794:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 retVal;
2795:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2796:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Get sense divider based on configuration */
2797:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE != CapSense_CSD_COMMON_SNS_CLK_EN)
2798:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_RAM_WD_BASE_STRUCT *ptrWdgt;
2799:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2800:Generated_Source\PSoC4/CapSense_Sensing.c ****             ptrWdgt = (CapSense_RAM_WD_BASE_STRUCT *)
 1293              		.loc 1 2800 0
 1294 0000 C300     		lsls	r3, r0, #3
 1295 0002 181A     		subs	r0, r3, r0
 1296              	.LVL131:
 1297 0004 8300     		lsls	r3, r0, #2
 1298 0006 024A     		ldr	r2, .L113
 1299 0008 D318     		adds	r3, r2, r3
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 76


 1300 000a 5B68     		ldr	r3, [r3, #4]
 1301              	.LVL132:
2801:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_dsFlash.wdgtArray[widgetId].ptr2WdgtRam;
2802:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2803:Generated_Source\PSoC4/CapSense_Sensing.c ****             retVal = (uint32)(ptrWdgt->snsClk);
 1302              		.loc 1 2803 0
 1303 000c 9889     		ldrh	r0, [r3, #12]
 1304              	.LVL133:
2804:Generated_Source\PSoC4/CapSense_Sensing.c ****         #else
2805:Generated_Source\PSoC4/CapSense_Sensing.c ****             retVal = (uint32)CapSense_dsRam.snsCsdClk;
2806:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2807:Generated_Source\PSoC4/CapSense_Sensing.c ****             (void)widgetId; /* This parameter is unused in such configurations */
2808:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* (CapSense_ENABLE == CapSense_CSD_COMMON_SNS_CLK_EN) */
2809:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2810:Generated_Source\PSoC4/CapSense_Sensing.c ****         return (retVal);
2811:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 1305              		.loc 1 2811 0
 1306              		@ sp needed
 1307 000e 7047     		bx	lr
 1308              	.L114:
 1309              		.align	2
 1310              	.L113:
 1311 0010 00000000 		.word	CapSense_dsFlash
 1312              		.cfi_endproc
 1313              	.LFE23:
 1314              		.size	CapSense_SsCSDGetColSnsClkDivider, .-CapSense_SsCSDGetColSnsClkDivider
 1315              		.section	.text.CapSense_SsCSDCalcPrsSize,"ax",%progbits
 1316              		.align	2
 1317              		.global	CapSense_SsCSDCalcPrsSize
 1318              		.code	16
 1319              		.thumb_func
 1320              		.type	CapSense_SsCSDCalcPrsSize, %function
 1321              	CapSense_SsCSDCalcPrsSize:
 1322              	.LFB24:
2812:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2813:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2814:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN)
2815:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*******************************************************************************
2816:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Function Name: CapSense_SsCSDGetRowSnsClkDivider
2817:Generated_Source\PSoC4/CapSense_Sensing.c ****         ****************************************************************************//**
2818:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2819:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \brief
2820:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  This function gets the Sense Clock Divider value for one-dimension widgets
2821:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  and the Column Sense Clock divider value for two-dimension widgets.
2822:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2823:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \details
2824:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  This function gets the Sense Clock Divider value based on the Component
2825:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  configuration. The function is applicable for one-dimension widgets and for
2826:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  two-dimension widgets.
2827:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2828:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \param
2829:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  widgetId Specifies the ID of the widget.
2830:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2831:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \return
2832:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  Returns the sense clock divider value for one-dimension widgets
2833:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  and column sense clock divider value for two-dimension widgets.
2834:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 77


2835:Generated_Source\PSoC4/CapSense_Sensing.c ****         *******************************************************************************/
2836:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 CapSense_SsCSDGetRowSnsClkDivider(uint32 widgetId)
2837:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
2838:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 retVal;
2839:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2840:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Get sense divider based on configuration */
2841:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE != CapSense_CSD_COMMON_SNS_CLK_EN)
2842:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_RAM_WD_BASE_STRUCT *ptrWdgt;
2843:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2844:Generated_Source\PSoC4/CapSense_Sensing.c ****                 ptrWdgt = (CapSense_RAM_WD_BASE_STRUCT *)
2845:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsFlash.wdgtArray[widgetId].ptr2WdgtRam;
2846:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2847:Generated_Source\PSoC4/CapSense_Sensing.c ****                 retVal = ptrWdgt->rowSnsClk;
2848:Generated_Source\PSoC4/CapSense_Sensing.c ****             #else
2849:Generated_Source\PSoC4/CapSense_Sensing.c ****                 retVal = (uint32)CapSense_dsRam.snsCsdClk;
2850:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2851:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (void)widgetId; /* This parameter is unused in such configurations */
2852:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_COMMON_SNS_CLK_EN) */
2853:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2854:Generated_Source\PSoC4/CapSense_Sensing.c ****             return (retVal);
2855:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
2856:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2857:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* (CapSense_CSD_MATRIX_WIDGET_EN || CapSense_CSD_TOUCHPAD_WIDGET_EN) */
2858:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2859:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2860:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE)
2861:Generated_Source\PSoC4/CapSense_Sensing.c ****         /*******************************************************************************
2862:Generated_Source\PSoC4/CapSense_Sensing.c ****         * Function Name: CapSense_SsCSDCalcPrsSize
2863:Generated_Source\PSoC4/CapSense_Sensing.c ****         ****************************************************************************//**
2864:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2865:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \brief
2866:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  The function finds PRS polynomial size in the Auto mode.
2867:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2868:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \details
2869:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  The PRS polynomial size in the Auto mode is found based on the following
2870:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  requirements:
2871:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  - at least one full spread spectrum polynomial should pass during scan time.
2872:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2873:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \param
2874:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  snsClkDivider The divider value for the sense clock.
2875:Generated_Source\PSoC4/CapSense_Sensing.c ****         *  resolution The widget resolution.
2876:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2877:Generated_Source\PSoC4/CapSense_Sensing.c ****         * \return prsSize PRS value for SENSE_PERIOD register.
2878:Generated_Source\PSoC4/CapSense_Sensing.c ****         *
2879:Generated_Source\PSoC4/CapSense_Sensing.c ****         *******************************************************************************/
2880:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 CapSense_SsCSDCalcPrsSize(uint32 snsClkDivider, uint32 resolution)
2881:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1323              		.loc 1 2881 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327              		@ link register save eliminated.
 1328              	.LVL134:
2882:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 prsSize;
2883:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 modClkDivider = 1u;
2884:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2885:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if (CapSense_ENABLE != CapSense_CSDV2)
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 78


2886:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #if(CapSense_ENABLE == CapSense_IS_M0S8PERI_BLOCK)
2887:Generated_Source\PSoC4/CapSense_Sensing.c ****                     modClkDivider = (uint32)CapSense_dsRam.modCsdClk;
2888:Generated_Source\PSoC4/CapSense_Sensing.c ****                 #endif
2889:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2890:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /*
2891:Generated_Source\PSoC4/CapSense_Sensing.c ****                 * This operation is needed for Third-generation HW Block
2892:Generated_Source\PSoC4/CapSense_Sensing.c ****                 * based devices to take into account DIV-2 flip-flop.
2893:Generated_Source\PSoC4/CapSense_Sensing.c ****                 */
2894:Generated_Source\PSoC4/CapSense_Sensing.c ****                 snsClkDivider <<= 1uL;
2895:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
2896:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2897:Generated_Source\PSoC4/CapSense_Sensing.c ****             if ((snsClkDivider * CapSense_PRS_LENGTH_12_BITS) <= (modClkDivider * ((0x00000001Lu <<
 1329              		.loc 1 2897 0
 1330 0000 0203     		lsls	r2, r0, #12
 1331 0002 121A     		subs	r2, r2, r0
 1332 0004 0123     		movs	r3, #1
 1333 0006 8B40     		lsls	r3, r3, r1
 1334 0008 013B     		subs	r3, r3, #1
 1335 000a 9A42     		cmp	r2, r3
 1336 000c 05D9     		bls	.L117
2898:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
2899:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set PRS12 mode */
2900:Generated_Source\PSoC4/CapSense_Sensing.c ****                 prsSize = CapSense_PRS_12_CONFIG;
2901:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
2902:Generated_Source\PSoC4/CapSense_Sensing.c ****             else if ((snsClkDivider * CapSense_PRS_LENGTH_8_BITS) <= (modClkDivider * ((0x00000001L
 1337              		.loc 1 2902 0
 1338 000e 0202     		lsls	r2, r0, #8
 1339 0010 101A     		subs	r0, r2, r0
 1340              	.LVL135:
 1341 0012 8342     		cmp	r3, r0
 1342 0014 03D3     		bcc	.L118
2903:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
2904:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set PRS8 mode */
2905:Generated_Source\PSoC4/CapSense_Sensing.c ****                 prsSize = CapSense_PRS_8_CONFIG;
 1343              		.loc 1 2905 0
 1344 0016 0520     		movs	r0, #5
 1345 0018 02E0     		b	.L116
 1346              	.LVL136:
 1347              	.L117:
2900:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
 1348              		.loc 1 2900 0
 1349 001a 0620     		movs	r0, #6
 1350              	.LVL137:
 1351 001c 00E0     		b	.L116
 1352              	.L118:
2906:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
2907:Generated_Source\PSoC4/CapSense_Sensing.c ****             else
2908:Generated_Source\PSoC4/CapSense_Sensing.c ****             {
2909:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Set Direct clock mode */
2910:Generated_Source\PSoC4/CapSense_Sensing.c ****                 prsSize = CapSense_CLK_SOURCE_DIRECT;
 1353              		.loc 1 2910 0
 1354 001e 0020     		movs	r0, #0
 1355              	.L116:
 1356              	.LVL138:
2911:Generated_Source\PSoC4/CapSense_Sensing.c ****             }
2912:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2913:Generated_Source\PSoC4/CapSense_Sensing.c ****             return (uint8)prsSize;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 79


 1357              		.loc 1 2913 0
 1358 0020 C0B2     		uxtb	r0, r0
 1359              	.LVL139:
2914:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 1360              		.loc 1 2914 0
 1361              		@ sp needed
 1362 0022 7047     		bx	lr
 1363              		.cfi_endproc
 1364              	.LFE24:
 1365              		.size	CapSense_SsCSDCalcPrsSize, .-CapSense_SsCSDCalcPrsSize
 1366              		.section	.text.CapSense_SsSetWidgetSenseClkSrc,"ax",%progbits
 1367              		.align	2
 1368              		.code	16
 1369              		.thumb_func
 1370              		.type	CapSense_SsSetWidgetSenseClkSrc, %function
 1371              	CapSense_SsSetWidgetSenseClkSrc:
 1372              	.LFB20:
2458:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8 lfsrSize;
 1373              		.loc 1 2458 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377              	.LVL140:
 1378 0000 70B5     		push	{r4, r5, r6, lr}
 1379              		.cfi_def_cfa_offset 16
 1380              		.cfi_offset 4, -16
 1381              		.cfi_offset 5, -12
 1382              		.cfi_offset 6, -8
 1383              		.cfi_offset 14, -4
 1384 0002 0E00     		movs	r6, r1
2470:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1385              		.loc 1 2470 0
 1386 0004 FFF7FEFF 		bl	CapSense_SsCSDGetColSnsClkDivider
 1387              	.LVL141:
 1388 0008 0500     		movs	r5, r0
 1389              	.LVL142:
2473:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                                                              CapSen
 1390              		.loc 1 2473 0
 1391 000a 3188     		ldrh	r1, [r6]
 1392 000c 0022     		movs	r2, #0
 1393 000e FFF7FEFF 		bl	CapSense_SsCSDGetNumberOfConversions
 1394              	.LVL143:
 1395 0012 0100     		movs	r1, r0
 1396              	.LVL144:
2475:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if (CapSense_CLK_SOURCE_DIRECT == lfsrSize)
 1397              		.loc 1 2475 0
 1398 0014 2800     		movs	r0, r5
 1399              	.LVL145:
 1400 0016 FFF7FEFF 		bl	CapSense_SsCalcLfsrSize
 1401              	.LVL146:
 1402 001a 041E     		subs	r4, r0, #0
 1403              	.LVL147:
2476:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
 1404              		.loc 1 2476 0
 1405 001c 04D1     		bne	.L120
2482:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
 1406              		.loc 1 2482 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 80


 1407 001e 6800     		lsls	r0, r5, #1
 1408              	.LVL148:
 1409 0020 3188     		ldrh	r1, [r6]
 1410 0022 FFF7FEFF 		bl	CapSense_SsCSDCalcPrsSize
 1411              	.LVL149:
 1412 0026 0400     		movs	r4, r0
 1413              	.LVL150:
 1414              	.L120:
2484:Generated_Source\PSoC4/CapSense_Sensing.c ****             #else
 1415              		.loc 1 2484 0
 1416 0028 2100     		movs	r1, r4
 1417 002a 2800     		movs	r0, r5
 1418 002c FFF7FEFF 		bl	CapSense_SsCalcLfsrScale
 1419              	.LVL151:
2499:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1420              		.loc 1 2499 0
 1421 0030 0001     		lsls	r0, r0, #4
 1422              	.LVL152:
 1423 0032 C0B2     		uxtb	r0, r0
 1424 0034 2043     		orrs	r0, r4
 1425 0036 B073     		strb	r0, [r6, #14]
2534:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 1426              		.loc 1 2534 0
 1427              		@ sp needed
 1428              	.LVL153:
 1429              	.LVL154:
 1430              	.LVL155:
 1431 0038 70BD     		pop	{r4, r5, r6, pc}
 1432              		.cfi_endproc
 1433              	.LFE20:
 1434              		.size	CapSense_SsSetWidgetSenseClkSrc, .-CapSense_SsSetWidgetSenseClkSrc
 1435 003a C046     		.section	.text.CapSense_SsInitializeSourceSenseClk,"ax",%progbits
 1436              		.align	2
 1437              		.global	CapSense_SsInitializeSourceSenseClk
 1438              		.code	16
 1439              		.thumb_func
 1440              		.type	CapSense_SsInitializeSourceSenseClk, %function
 1441              	CapSense_SsInitializeSourceSenseClk:
 1442              	.LFB19:
2405:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32 wdgtIndex;
 1443              		.loc 1 2405 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447 0000 10B5     		push	{r4, lr}
 1448              		.cfi_def_cfa_offset 8
 1449              		.cfi_offset 4, -8
 1450              		.cfi_offset 14, -4
 1451              	.LVL156:
2409:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1452              		.loc 1 2409 0
 1453 0002 0024     		movs	r4, #0
 1454 0004 09E0     		b	.L122
 1455              	.LVL157:
 1456              	.L123:
2411:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1457              		.loc 1 2411 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 81


 1458 0006 E200     		lsls	r2, r4, #3
 1459 0008 121B     		subs	r2, r2, r4
 1460 000a 9300     		lsls	r3, r2, #2
 1461 000c 044A     		ldr	r2, .L124
 1462 000e D318     		adds	r3, r2, r3
 1463 0010 5968     		ldr	r1, [r3, #4]
 1464              	.LVL158:
2417:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 1465              		.loc 1 2417 0
 1466 0012 2000     		movs	r0, r4
 1467 0014 FFF7FEFF 		bl	CapSense_SsSetWidgetSenseClkSrc
 1468              	.LVL159:
2409:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1469              		.loc 1 2409 0
 1470 0018 0134     		adds	r4, r4, #1
 1471              	.LVL160:
 1472              	.L122:
2409:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1473              		.loc 1 2409 0 is_stmt 0 discriminator 1
 1474 001a 052C     		cmp	r4, #5
 1475 001c F3D9     		bls	.L123
2432:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* ((CapSense_ENABLE == CapSense_CSD_EN) || \
 1476              		.loc 1 2432 0 is_stmt 1
 1477              		@ sp needed
 1478              	.LVL161:
 1479 001e 10BD     		pop	{r4, pc}
 1480              	.L125:
 1481              		.align	2
 1482              	.L124:
 1483 0020 00000000 		.word	CapSense_dsFlash
 1484              		.cfi_endproc
 1485              	.LFE19:
 1486              		.size	CapSense_SsInitializeSourceSenseClk, .-CapSense_SsInitializeSourceSenseClk
 1487              		.section	.text.CapSense_DischargeExtCapacitors,"ax",%progbits
 1488              		.align	2
 1489              		.global	CapSense_DischargeExtCapacitors
 1490              		.code	16
 1491              		.thumb_func
 1492              		.type	CapSense_DischargeExtCapacitors, %function
 1493              	CapSense_DischargeExtCapacitors:
 1494              	.LFB25:
2915:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* (CapSense_CLK_SOURCE_PRSAUTO == CapSense_CSD_SNS_CLK_SOURCE) */
2916:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
2917:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2918:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2919:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSDV2)
2920:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
2921:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_DischargeExtCapacitors
2922:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
2923:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2924:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
2925:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The internal function discharge available external capacitors.
2926:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2927:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
2928:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The function discharge available external capacitors by connection them
2929:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  to GND using STRONG GPIO drive mode. Additionaly, the function disconnects
2930:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  the capacitors from analog mux buses if connected.
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 82


2931:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Note: the function does not restore the connection to analog mux busses
2932:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  and supposes that all the capacitors belong to a single device port.
2933:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2934:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param
2935:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  dischargeTime The discharge time in us.
2936:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
2937:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
2938:Generated_Source\PSoC4/CapSense_Sensing.c ****     void CapSense_DischargeExtCapacitors(uint32 dischargeTime)
2939:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1495              		.loc 1 2939 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 8
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499              	.LVL162:
 1500 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1501              		.cfi_def_cfa_offset 20
 1502              		.cfi_offset 4, -20
 1503              		.cfi_offset 5, -16
 1504              		.cfi_offset 6, -12
 1505              		.cfi_offset 7, -8
 1506              		.cfi_offset 14, -4
 1507 0002 5F46     		mov	r7, fp
 1508 0004 5646     		mov	r6, r10
 1509 0006 4D46     		mov	r5, r9
 1510 0008 4446     		mov	r4, r8
 1511 000a F0B4     		push	{r4, r5, r6, r7}
 1512              		.cfi_def_cfa_offset 36
 1513              		.cfi_offset 8, -36
 1514              		.cfi_offset 9, -32
 1515              		.cfi_offset 10, -28
 1516              		.cfi_offset 11, -24
 1517 000c 83B0     		sub	sp, sp, #12
 1518              		.cfi_def_cfa_offset 48
 1519 000e 0190     		str	r0, [sp, #4]
2940:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 hsiomReg;
2941:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 drReg;
2942:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 pcReg;
2943:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32 newRegValue;
2944:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint8  interruptState;
2945:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2946:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Store register state */
2947:Generated_Source\PSoC4/CapSense_Sensing.c ****         hsiomReg = CY_GET_REG32(CapSense_EXT_CAP_HSIOM_PTR) & CapSense_EXT_CAP_HSIOM_MASK;
 1520              		.loc 1 2947 0
 1521 0010 284C     		ldr	r4, .L127
 1522 0012 2368     		ldr	r3, [r4]
 1523 0014 F027     		movs	r7, #240
 1524 0016 3B40     		ands	r3, r7
 1525 0018 0093     		str	r3, [sp]
 1526              	.LVL163:
2948:Generated_Source\PSoC4/CapSense_Sensing.c ****         drReg = CY_GET_REG32(CapSense_EXT_CAP_DR_PTR) & CapSense_EXT_CAP_DR_MASK;
 1527              		.loc 1 2948 0
 1528 001a 274D     		ldr	r5, .L127+4
 1529 001c 2B68     		ldr	r3, [r5]
 1530              	.LVL164:
 1531 001e 0221     		movs	r1, #2
 1532 0020 8946     		mov	r9, r1
 1533 0022 1940     		ands	r1, r3
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 83


 1534 0024 8846     		mov	r8, r1
 1535              	.LVL165:
2949:Generated_Source\PSoC4/CapSense_Sensing.c ****         pcReg = CY_GET_REG32(CapSense_EXT_CAP_PC_PTR) & CapSense_EXT_CAP_PC_MASK;
 1536              		.loc 1 2949 0
 1537 0026 254E     		ldr	r6, .L127+8
 1538 0028 3368     		ldr	r3, [r6]
 1539 002a 3821     		movs	r1, #56
 1540              	.LVL166:
 1541 002c 8B46     		mov	fp, r1
 1542 002e 1940     		ands	r1, r3
 1543 0030 8A46     		mov	r10, r1
 1544              	.LVL167:
2950:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2951:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Disconnect Ext Cap from AMUXBUS-A using HSIOM registers */
2952:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 1545              		.loc 1 2952 0
 1546 0032 FFF7FEFF 		bl	CyEnterCriticalSection
 1547              	.LVL168:
2953:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_EXT_CAP_HSIOM_PTR);
 1548              		.loc 1 2953 0
 1549 0036 2368     		ldr	r3, [r4]
 1550              	.LVL169:
2954:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue &= (uint32)(~(uint32)CapSense_EXT_CAP_HSIOM_MASK);
 1551              		.loc 1 2954 0
 1552 0038 BB43     		bics	r3, r7
 1553              	.LVL170:
2955:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_EXT_CAP_HSIOM_PTR, newRegValue);
 1554              		.loc 1 2955 0
 1555 003a 2360     		str	r3, [r4]
 1556              	.LVL171:
2956:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 1557              		.loc 1 2956 0
 1558 003c FFF7FEFF 		bl	CyExitCriticalSection
 1559              	.LVL172:
2957:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2958:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Set output port register to 0 to connect to GND */
2959:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 1560              		.loc 1 2959 0
 1561 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1562              	.LVL173:
2960:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_EXT_CAP_DR_PTR);
 1563              		.loc 1 2960 0
 1564 0044 2B68     		ldr	r3, [r5]
 1565              	.LVL174:
2961:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue &= (uint32)(~(uint32)CapSense_EXT_CAP_DR_MASK);
 1566              		.loc 1 2961 0
 1567 0046 4946     		mov	r1, r9
 1568 0048 8B43     		bics	r3, r1
 1569              	.LVL175:
2962:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_EXT_CAP_DR_PTR, newRegValue);
 1570              		.loc 1 2962 0
 1571 004a 2B60     		str	r3, [r5]
2963:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 1572              		.loc 1 2963 0
 1573 004c FFF7FEFF 		bl	CyExitCriticalSection
 1574              	.LVL176:
2964:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 84


2965:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Set port configuration register (drive mode) in STRONG mode */
2966:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 1575              		.loc 1 2966 0
 1576 0050 FFF7FEFF 		bl	CyEnterCriticalSection
 1577              	.LVL177:
2967:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_EXT_CAP_PC_PTR);
 1578              		.loc 1 2967 0
 1579 0054 3368     		ldr	r3, [r6]
 1580              	.LVL178:
2968:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue &= (uint32)(~((uint32)CapSense_EXT_CAP_PC_MASK));
 1581              		.loc 1 2968 0
 1582 0056 5946     		mov	r1, fp
 1583 0058 8B43     		bics	r3, r1
 1584              	.LVL179:
2969:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue |= (CapSense_EXT_CAP_PC_STRONG_CFG);
 1585              		.loc 1 2969 0
 1586 005a 3022     		movs	r2, #48
 1587 005c 1343     		orrs	r3, r2
 1588              	.LVL180:
2970:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_EXT_CAP_PC_PTR, newRegValue);
 1589              		.loc 1 2970 0
 1590 005e 3360     		str	r3, [r6]
2971:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 1591              		.loc 1 2971 0
 1592 0060 FFF7FEFF 		bl	CyExitCriticalSection
 1593              	.LVL181:
2972:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2973:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Delay to discharge external capacitors */
2974:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyDelayUs((uint16)dischargeTime);
 1594              		.loc 1 2974 0
 1595 0064 6B46     		mov	r3, sp
 1596 0066 9888     		ldrh	r0, [r3, #4]
 1597 0068 FFF7FEFF 		bl	CyDelayUs
 1598              	.LVL182:
2975:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2976:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Restore previous register values */
2977:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 1599              		.loc 1 2977 0
 1600 006c FFF7FEFF 		bl	CyEnterCriticalSection
 1601              	.LVL183:
2978:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_EXT_CAP_PC_PTR);
 1602              		.loc 1 2978 0
 1603 0070 3368     		ldr	r3, [r6]
 1604              	.LVL184:
2979:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue &= (uint32)(~((uint32)CapSense_EXT_CAP_PC_MASK));
 1605              		.loc 1 2979 0
 1606 0072 5946     		mov	r1, fp
 1607 0074 8B43     		bics	r3, r1
 1608              	.LVL185:
2980:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue |= pcReg;
 1609              		.loc 1 2980 0
 1610 0076 5146     		mov	r1, r10
 1611 0078 0B43     		orrs	r3, r1
 1612              	.LVL186:
2981:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_EXT_CAP_PC_PTR, newRegValue);
 1613              		.loc 1 2981 0
 1614 007a 3360     		str	r3, [r6]
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 85


2982:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 1615              		.loc 1 2982 0
 1616 007c FFF7FEFF 		bl	CyExitCriticalSection
 1617              	.LVL187:
2983:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2984:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 1618              		.loc 1 2984 0
 1619 0080 FFF7FEFF 		bl	CyEnterCriticalSection
 1620              	.LVL188:
2985:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_EXT_CAP_DR_PTR);
 1621              		.loc 1 2985 0
 1622 0084 2B68     		ldr	r3, [r5]
 1623              	.LVL189:
2986:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue &= (uint32)(~(uint32)CapSense_EXT_CAP_DR_MASK);
 1624              		.loc 1 2986 0
 1625 0086 4946     		mov	r1, r9
 1626 0088 8B43     		bics	r3, r1
 1627              	.LVL190:
2987:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue |= drReg;
 1628              		.loc 1 2987 0
 1629 008a 4146     		mov	r1, r8
 1630 008c 0B43     		orrs	r3, r1
 1631              	.LVL191:
2988:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_EXT_CAP_DR_PTR, newRegValue);
 1632              		.loc 1 2988 0
 1633 008e 2B60     		str	r3, [r5]
2989:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 1634              		.loc 1 2989 0
 1635 0090 FFF7FEFF 		bl	CyExitCriticalSection
 1636              	.LVL192:
2990:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2991:Generated_Source\PSoC4/CapSense_Sensing.c ****         interruptState = CyEnterCriticalSection();
 1637              		.loc 1 2991 0
 1638 0094 FFF7FEFF 		bl	CyEnterCriticalSection
 1639              	.LVL193:
2992:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue = CY_GET_REG32(CapSense_EXT_CAP_HSIOM_PTR);
 1640              		.loc 1 2992 0
 1641 0098 2368     		ldr	r3, [r4]
 1642              	.LVL194:
2993:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue &= (uint32)(~(uint32)CapSense_EXT_CAP_HSIOM_MASK);
 1643              		.loc 1 2993 0
 1644 009a BB43     		bics	r3, r7
 1645              	.LVL195:
2994:Generated_Source\PSoC4/CapSense_Sensing.c ****         newRegValue |= hsiomReg;
 1646              		.loc 1 2994 0
 1647 009c 009A     		ldr	r2, [sp]
 1648 009e 1343     		orrs	r3, r2
 1649              	.LVL196:
2995:Generated_Source\PSoC4/CapSense_Sensing.c ****         CY_SET_REG32(CapSense_EXT_CAP_HSIOM_PTR, newRegValue);
 1650              		.loc 1 2995 0
 1651 00a0 2360     		str	r3, [r4]
2996:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyExitCriticalSection(interruptState);
 1652              		.loc 1 2996 0
 1653 00a2 FFF7FEFF 		bl	CyExitCriticalSection
 1654              	.LVL197:
2997:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 1655              		.loc 1 2997 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 86


 1656 00a6 03B0     		add	sp, sp, #12
 1657              		@ sp needed
 1658              	.LVL198:
 1659              	.LVL199:
 1660 00a8 3CBC     		pop	{r2, r3, r4, r5}
 1661 00aa 9046     		mov	r8, r2
 1662 00ac 9946     		mov	r9, r3
 1663 00ae A246     		mov	r10, r4
 1664 00b0 AB46     		mov	fp, r5
 1665 00b2 F0BD     		pop	{r4, r5, r6, r7, pc}
 1666              	.L128:
 1667              		.align	2
 1668              	.L127:
 1669 00b4 00040240 		.word	1073873920
 1670 00b8 00040440 		.word	1074004992
 1671 00bc 08040440 		.word	1074005000
 1672              		.cfi_endproc
 1673              	.LFE25:
 1674              		.size	CapSense_DischargeExtCapacitors, .-CapSense_DischargeExtCapacitors
 1675              		.section	.text.CapSense_SetInactiveElectrodeState,"ax",%progbits
 1676              		.align	2
 1677              		.global	CapSense_SetInactiveElectrodeState
 1678              		.code	16
 1679              		.thumb_func
 1680              		.type	CapSense_SetInactiveElectrodeState, %function
 1681              	CapSense_SetInactiveElectrodeState:
 1682              	.LFB26:
2998:Generated_Source\PSoC4/CapSense_Sensing.c **** 
2999:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSDV2) */
3000:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3001:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3002:Generated_Source\PSoC4/CapSense_Sensing.c **** #if (CapSense_ENABLE == CapSense_CSDV1)
3003:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
3004:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_DischargeExtCapacitors
3005:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
3006:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3007:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
3008:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The internal function discharge available external capacitors.
3009:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3010:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
3011:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The function discharge available external capacitors by connection them
3012:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  to GND using STRONG GPIO drive mode. Additionaly, the function disconnects
3013:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  the capacitors from analog mux buses if connected.
3014:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Note: the function does not restore the connection to analog mux busses
3015:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  and supposes that all the capacitors belong to a single device port.
3016:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3017:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param
3018:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  dischargeTime The discharge time in us.
3019:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3020:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
3021:Generated_Source\PSoC4/CapSense_Sensing.c ****     void CapSense_DischargeExtCapacitors(uint32 dischargeTime)
3022:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
3023:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Store the pin configuration, the CMOD capacitor is connected to. */
3024:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
3025:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cmodHsiom = CY_GET_REG32(CapSense_CMOD_HSIOM_PTR) & CapSense_EXT_CAP_HSIOM_MASK_
3026:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cmodDr = CY_GET_REG32(CapSense_CMOD_DR_PTR) & CapSense_EXT_CAP_DR_MASK_CMOD;
3027:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cmodPc = CY_GET_REG32(CapSense_CMOD_PC_PTR) & CapSense_EXT_CAP_PC_MASK_CMOD;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 87


3028:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3029:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Store the pin configuration, the CSH capacitor is connected to. */
3030:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if((CapSense_ENABLE == CapSense_CSD_SHIELD_EN) &&\
3031:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_ENABLE == CapSense_CSD_SHIELD_TANK_EN))
3032:Generated_Source\PSoC4/CapSense_Sensing.c ****                 uint32 cshHsiom = CY_GET_REG32(CapSense_CSH_HSIOM_PTR) & CapSense_EXT_CAP_HSIOM_MAS
3033:Generated_Source\PSoC4/CapSense_Sensing.c ****                 uint32 cshDr = CY_GET_REG32(CapSense_CSH_DR_PTR) & CapSense_EXT_CAP_DR_MASK_CSH;
3034:Generated_Source\PSoC4/CapSense_Sensing.c ****                 uint32 cshPc = CY_GET_REG32(CapSense_CSH_PC_PTR) & CapSense_EXT_CAP_PC_MASK_CSH;
3035:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
3036:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3037:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3038:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
3039:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Store the pin configuration, the CintA capacitor is connected to. */
3040:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cintAHsiom = CY_GET_REG32(CapSense_CintA_HSIOM_PTR) & CapSense_EXT_CAP_HSIOM_MAS
3041:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cintADr = CY_GET_REG32(CapSense_CintA_DR_PTR) & CapSense_EXT_CAP_DR_MASK_CINTA;
3042:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cintAPc = CY_GET_REG32(CapSense_CintA_PC_PTR) & CapSense_EXT_CAP_PC_MASK_CINTA;
3043:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3044:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Store the pin configuration, the CintB capacitor is connected to. */
3045:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cintBHsiom = CY_GET_REG32(CapSense_CintB_HSIOM_PTR) & CapSense_EXT_CAP_HSIOM_MAS
3046:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cintBDr = CY_GET_REG32(CapSense_CintB_DR_PTR) & CapSense_EXT_CAP_DR_MASK_CINTB;
3047:Generated_Source\PSoC4/CapSense_Sensing.c ****             uint32 cintBPc = CY_GET_REG32(CapSense_CintB_PC_PTR) & CapSense_EXT_CAP_PC_MASK_CINTB;
3048:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3049:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3050:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
3051:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Disconnect the CMOD capacitor from the AMUXBUS and connect it to GND. */
3052:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CMOD_HSIOM_PTR, CapSense_EXT_CAP_HSIOM_MASK_CMOD,
3053:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_HSIOM_SEL_GPIO);
3054:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CMOD_DR_PTR, CapSense_EXT_CAP_DR_MASK_CMOD, 0u);
3055:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CMOD_PC_PTR, CapSense_EXT_CAP_PC_MASK_CMOD,
3056:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_PC_STRONG_CFG_CMOD);
3057:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3058:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if((CapSense_ENABLE == CapSense_CSD_SHIELD_EN) &&\
3059:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_ENABLE == CapSense_CSD_SHIELD_TANK_EN))
3060:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Disconnect the CSH capacitor from the AMUXBUS and connect it to GND. */
3061:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_WriteBitsSafe(CapSense_CSH_HSIOM_PTR, CapSense_EXT_CAP_HSIOM_MASK_CSH,
3062:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                CapSense_HSIOM_SEL_GPIO);
3063:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_WriteBitsSafe(CapSense_CSH_DR_PTR, CapSense_EXT_CAP_DR_MASK_CSH, 0u);
3064:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_WriteBitsSafe(CapSense_CSH_PC_PTR, CapSense_EXT_CAP_PC_MASK_CSH,
3065:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                CapSense_EXT_CAP_PC_STRONG_CFG_CSH);
3066:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
3067:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3068:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3069:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
3070:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Disconnect the CintA capacitor from the AMUXBUS and connect it to GND. */
3071:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintA_HSIOM_PTR, CapSense_EXT_CAP_HSIOM_MASK_CINTA,
3072:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_HSIOM_SEL_GPIO);
3073:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintA_DR_PTR, CapSense_EXT_CAP_DR_MASK_CINTA, 0u);
3074:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintA_PC_PTR, CapSense_EXT_CAP_PC_MASK_CINTA,
3075:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_PC_STRONG_CFG_CINTA);
3076:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3077:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Disconnect the CintB capacitor from the AMUXBUS and connect it to GND. */
3078:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintB_HSIOM_PTR, CapSense_EXT_CAP_HSIOM_MASK_CINTB,
3079:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_HSIOM_SEL_GPIO);
3080:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintB_DR_PTR, CapSense_EXT_CAP_DR_MASK_CINTB, 0u);
3081:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintB_PC_PTR, CapSense_EXT_CAP_PC_MASK_CINTB,
3082:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_PC_STRONG_CFG_CINTB);
3083:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3084:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 88


3085:Generated_Source\PSoC4/CapSense_Sensing.c ****         /* Delay to discharge external capacitors */
3086:Generated_Source\PSoC4/CapSense_Sensing.c ****         CyDelayUs((uint16)dischargeTime);
3087:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3088:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSD_EN)
3089:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Restore the pin configuration, the CMOD capacitor is connected to. */
3090:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CMOD_PC_PTR,
3091:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_PC_MASK_CMOD, cmodPc);
3092:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CMOD_DR_PTR,
3093:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_DR_MASK_CMOD, cmodDr);
3094:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CMOD_HSIOM_PTR,
3095:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_HSIOM_MASK_CMOD, cmodHsiom);
3096:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3097:Generated_Source\PSoC4/CapSense_Sensing.c ****             #if((CapSense_ENABLE == CapSense_CSD_SHIELD_EN) &&\
3098:Generated_Source\PSoC4/CapSense_Sensing.c ****                 (CapSense_ENABLE == CapSense_CSD_SHIELD_TANK_EN))
3099:Generated_Source\PSoC4/CapSense_Sensing.c ****                 /* Restore the pin configuration, the CSH capacitor is connected to. */
3100:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_WriteBitsSafe(CapSense_CSH_PC_PTR,
3101:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                CapSense_EXT_CAP_PC_MASK_CSH, cshPc);
3102:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_WriteBitsSafe(CapSense_CSH_DR_PTR,
3103:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                CapSense_EXT_CAP_DR_MASK_CSH, cshDr);
3104:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_WriteBitsSafe(CapSense_CSH_HSIOM_PTR,
3105:Generated_Source\PSoC4/CapSense_Sensing.c ****                                                CapSense_EXT_CAP_HSIOM_MASK_CSH, cshHsiom);
3106:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif
3107:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3108:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3109:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if (CapSense_ENABLE == CapSense_CSX_EN)
3110:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Restore the pin configuration, the CintA capacitor is connected to. */
3111:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintA_PC_PTR,
3112:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_PC_MASK_CINTA, cintAPc);
3113:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintA_DR_PTR,
3114:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_DR_MASK_CINTA, cintADr);
3115:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintA_HSIOM_PTR,
3116:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_HSIOM_MASK_CINTA, cintAHsiom);
3117:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3118:Generated_Source\PSoC4/CapSense_Sensing.c ****             /* Restore the pin configuration, the CintB capacitor is connected to. */
3119:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintB_PC_PTR,
3120:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_PC_MASK_CINTB, cintBPc);
3121:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintB_DR_PTR,
3122:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_DR_MASK_CINTB, cintBDr);
3123:Generated_Source\PSoC4/CapSense_Sensing.c ****             CapSense_WriteBitsSafe(CapSense_CintB_HSIOM_PTR,
3124:Generated_Source\PSoC4/CapSense_Sensing.c ****                                            CapSense_EXT_CAP_HSIOM_MASK_CINTB, cintBHsiom);
3125:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3126:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
3127:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSDV1) */
3128:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3129:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3130:Generated_Source\PSoC4/CapSense_Sensing.c **** #if((CapSense_ENABLE == CapSense_CSD_EN) ||\
3131:Generated_Source\PSoC4/CapSense_Sensing.c ****     (CapSense_ENABLE == CapSense_CSX_EN))
3132:Generated_Source\PSoC4/CapSense_Sensing.c ****     /*******************************************************************************
3133:Generated_Source\PSoC4/CapSense_Sensing.c ****     * Function Name: CapSense_SetInactiveElectrodeState
3134:Generated_Source\PSoC4/CapSense_Sensing.c ****     ****************************************************************************//**
3135:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3136:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \brief
3137:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The function updates the RAM data structure with the desired state of inactive
3138:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  electrodes for the specified operation mode. The state of pins is not changed
3139:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  in scope of this routine.
3140:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3141:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \details
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 89


3142:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  The function updates the following registers of RAM data structure:
3143:Generated_Source\PSoC4/CapSense_Sensing.c ****     *   - CapSense_SCAN_CSD_ISC_VALUE - Connection of inactive CSD and CSX
3144:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     electrodes during the regular CSD scan. By default, this register is initialized
3145:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     with the value of Inactive Sensor Connection combobox on the CSD Settings tab.
3146:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     The CapSense_SCAN_CSD_E value should be used as the Mode parameter
3147:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     to update this register.
3148:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3149:Generated_Source\PSoC4/CapSense_Sensing.c ****     *   - CapSense_SCAN_CSX_ISC_VALUE - Connection of inactive CSD, CSX and
3150:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     the dedicated Shield electrodes during the regular CSX scan. By default, this
3151:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     register is initialized with the value of Inactive Sensor Connection combobox
3152:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     on the CSX Settings tab.
3153:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     The CapSense_SCAN_CSX_E value should be used as the Mode parameter
3154:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     to update this register.
3155:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3156:Generated_Source\PSoC4/CapSense_Sensing.c ****     *   - CapSense_BIST_CSD_SNS_CAP_ISC_VALUE - Connection of inactive CSD and CSX
3157:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     electrodes during measurement of CSD electrodes capacitance.
3158:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     This register is initialized with the CapSense_SNS_CONNECTION_GROUND value
3159:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     by default.
3160:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     The CapSense_BIST_CSD_SNS_CAP_E value should be used as the Mode parameter
3161:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     to update this register.
3162:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3163:Generated_Source\PSoC4/CapSense_Sensing.c ****     *   - CapSense_BIST_CSX_SNS_CAP_ISC_VALUE - Connection of inactive CSD, CSX and
3164:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     the dedicated Shield electrodes during measurement of CSX electrodes (Tx and Rx)
3165:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     capacitance. This register is initialized with the CapSense_SNS_CONNECTION_GROUND
3166:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     value by default.
3167:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     The CapSense_BIST_CSX_SNS_CAP_E value should be used as the Mode parameter
3168:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     to update this register.
3169:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3170:Generated_Source\PSoC4/CapSense_Sensing.c ****     *   - CapSense_BIST_CSD_SH_CAP_ISC_VALUE - Connection of inactive CSD and CSX electrodes
3171:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     measurement of dedicated Shield  electrodes capacitance. This register is initialized wit
3172:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     the CapSense_SNS_CONNECTION_GROUND value by default.
3173:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     The CapSense_BIST_CSD_SH_CAP_E value should be used as the Mode parameter
3174:Generated_Source\PSoC4/CapSense_Sensing.c ****     *     to update this register.
3175:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3176:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param
3177:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  mode Operation mode, the state of inactive sensors should be configured for.
3178:Generated_Source\PSoC4/CapSense_Sensing.c ****     *       This parameter can take the following values:
3179:Generated_Source\PSoC4/CapSense_Sensing.c ****     *        - CapSense_SCAN_CSD_E - Regular CSD scan.
3180:Generated_Source\PSoC4/CapSense_Sensing.c ****     *        - CapSense_SCAN_CSX_E - Regular CSX scan.
3181:Generated_Source\PSoC4/CapSense_Sensing.c ****     *        - CapSense_BIST_CSD_SNS_CAP_E - Measurement of the CSD sensor capacitance.
3182:Generated_Source\PSoC4/CapSense_Sensing.c ****     *        - CapSense_BIST_CSX_SNS_CAP_E - Measurement of the CSX electrode capacitance.
3183:Generated_Source\PSoC4/CapSense_Sensing.c ****     *        - CapSense_BIST_CSD_SH_CAP_E - Measurement of the dedicated CSD Shield
3184:Generated_Source\PSoC4/CapSense_Sensing.c ****     *          electrode capacitance.
3185:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3186:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \param
3187:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  state The desired state of inactive sensors.
3188:Generated_Source\PSoC4/CapSense_Sensing.c ****     *        This parameter can take the following values:
3189:Generated_Source\PSoC4/CapSense_Sensing.c ****     *         - CapSense_SNS_CONNECTION_GROUND - Inactive sensors are connected to the ground.
3190:Generated_Source\PSoC4/CapSense_Sensing.c ****     *         - CapSense_SNS_CONNECTION_HIGHZ - Inactive sensors are floating (not
3191:Generated_Source\PSoC4/CapSense_Sensing.c ****     *           connected to GND or Shield).
3192:Generated_Source\PSoC4/CapSense_Sensing.c ****     *         - CapSense_SNS_CONNECTION_SHIELD - Inactive sensors are connected to the shield.
3193:Generated_Source\PSoC4/CapSense_Sensing.c ****     *           This option is available only if the Enable shield electrode check box is set.
3194:Generated_Source\PSoC4/CapSense_Sensing.c ****     *           At least one dedicated shield electrode is required to use the
3195:Generated_Source\PSoC4/CapSense_Sensing.c ****     *           CapSense_SNS_CONNECTION_SHIELD option for the CapSense_BIST_CSD_SH_CAP_E
3196:Generated_Source\PSoC4/CapSense_Sensing.c ****     *           operation mode.
3197:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3198:Generated_Source\PSoC4/CapSense_Sensing.c ****     * \return
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 90


3199:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  Returns the status of the operation:
3200:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_SUCCESS - The operation was successfully completed.
3201:Generated_Source\PSoC4/CapSense_Sensing.c ****     *  - CYRET_BAD_PARAM - The input parameter is invalid.
3202:Generated_Source\PSoC4/CapSense_Sensing.c ****     *
3203:Generated_Source\PSoC4/CapSense_Sensing.c ****     *******************************************************************************/
3204:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint32_t CapSense_SetInactiveElectrodeState(CapSense_OPERATION_MODE_ENUM mode, uint32_t state)
3205:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1683              		.loc 1 3205 0
 1684              		.cfi_startproc
 1685              		@ args = 0, pretend = 0, frame = 0
 1686              		@ frame_needed = 0, uses_anonymous_args = 0
 1687              	.LVL200:
 1688 0000 10B5     		push	{r4, lr}
 1689              		.cfi_def_cfa_offset 8
 1690              		.cfi_offset 4, -8
 1691              		.cfi_offset 14, -4
 1692              	.LVL201:
3206:Generated_Source\PSoC4/CapSense_Sensing.c ****         uint32_t retVal = CYRET_SUCCESS;
3207:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3208:Generated_Source\PSoC4/CapSense_Sensing.c ****         switch(mode)
 1693              		.loc 1 3208 0
 1694 0002 0028     		cmp	r0, #0
 1695 0004 03D1     		bne	.L133
3209:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
3210:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if(CapSense_ENABLE == CapSense_CSD_EN)
3211:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SCAN_CSD_E:
3212:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.scanCsdISC = (uint8)state;
 1696              		.loc 1 3212 0
 1697 0006 C623     		movs	r3, #198
 1698 0008 034A     		ldr	r2, .L134
 1699 000a D154     		strb	r1, [r2, r3]
3213:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
 1700              		.loc 1 3213 0
 1701 000c 03E0     		b	.L132
 1702              	.L133:
3214:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3215:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3216:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if(CapSense_ENABLE == CapSense_CSX_EN)
3217:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_SCAN_CSX_E:
3218:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.scanCsxISC = (uint8)state;
3219:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
3220:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3221:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3222:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if((CapSense_ENABLE == CapSense_SELF_TEST_EN) &&\
3223:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_TST_SNS_CAP_EN) &&\
3224:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_CSD_EN))
3225:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_BIST_CSD_SNS_CAP_E:
3226:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.selfTestConfig.bistCsdSnsCapISC = (uint8)state;
3227:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
3228:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3229:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3230:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if((CapSense_ENABLE == CapSense_SELF_TEST_EN) &&\
3231:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_TST_SNS_CAP_EN) &&\
3232:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_CSX_EN))
3233:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_BIST_CSX_SNS_CAP_E:
3234:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_dsRam.selfTestConfig.bistCsxSnsCapISC = (uint8)state;
3235:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 91


3236:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3237:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3238:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if((CapSense_ENABLE == CapSense_SELF_TEST_EN) &&\
3239:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_TST_SH_CAP_EN) &&\
3240:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_CSD_EN) &&\
3241:Generated_Source\PSoC4/CapSense_Sensing.c ****             (CapSense_ENABLE == CapSense_CSD_SHIELD_EN))
3242:Generated_Source\PSoC4/CapSense_Sensing.c ****             case CapSense_BIST_CSD_SH_CAP_E:
3243:Generated_Source\PSoC4/CapSense_Sensing.c ****                 if((CapSense_CSD_TOTAL_SHIELD_COUNT == 0u) &&
3244:Generated_Source\PSoC4/CapSense_Sensing.c ****                    (CapSense_SNS_CONNECTION_SHIELD != state))
3245:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
3246:Generated_Source\PSoC4/CapSense_Sensing.c ****                     retVal = CYRET_BAD_PARAM;
3247:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
3248:Generated_Source\PSoC4/CapSense_Sensing.c ****                 else
3249:Generated_Source\PSoC4/CapSense_Sensing.c ****                 {
3250:Generated_Source\PSoC4/CapSense_Sensing.c ****                     CapSense_dsRam.selfTestConfig.bistCsdShCapISC = (uint8)state;
3251:Generated_Source\PSoC4/CapSense_Sensing.c ****                 }
3252:Generated_Source\PSoC4/CapSense_Sensing.c ****                 break;
3253:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
3254:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3255:Generated_Source\PSoC4/CapSense_Sensing.c ****         default:
3256:Generated_Source\PSoC4/CapSense_Sensing.c ****             CYASSERT(0u);
 1703              		.loc 1 3256 0 discriminator 1
 1704 000e 0020     		movs	r0, #0
 1705              	.LVL202:
 1706 0010 FFF7FEFF 		bl	CyHalt
 1707              	.LVL203:
3257:Generated_Source\PSoC4/CapSense_Sensing.c ****             retVal = CYRET_BAD_PARAM;
 1708              		.loc 1 3257 0 discriminator 1
 1709 0014 0120     		movs	r0, #1
 1710              	.LVL204:
 1711              	.L132:
3258:Generated_Source\PSoC4/CapSense_Sensing.c ****             break;
3259:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
3260:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3261:Generated_Source\PSoC4/CapSense_Sensing.c ****         return(retVal);
3262:Generated_Source\PSoC4/CapSense_Sensing.c ****     }
 1712              		.loc 1 3262 0
 1713              		@ sp needed
 1714 0016 10BD     		pop	{r4, pc}
 1715              	.L135:
 1716              		.align	2
 1717              	.L134:
 1718 0018 00000000 		.word	CapSense_dsRam
 1719              		.cfi_endproc
 1720              	.LFE26:
 1721              		.size	CapSense_SetInactiveElectrodeState, .-CapSense_SetInactiveElectrodeState
 1722              		.section	.text.CapSense_WriteBitsSafe,"ax",%progbits
 1723              		.align	2
 1724              		.global	CapSense_WriteBitsSafe
 1725              		.code	16
 1726              		.thumb_func
 1727              		.type	CapSense_WriteBitsSafe, %function
 1728              	CapSense_WriteBitsSafe:
 1729              	.LFB27:
3263:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* ((CapSense_ENABLE == CapSense_CSD_EN) ||\
3264:Generated_Source\PSoC4/CapSense_Sensing.c ****            (CapSense_ENABLE == CapSense_CSX_EN)) */
3265:Generated_Source\PSoC4/CapSense_Sensing.c **** 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 92


3266:Generated_Source\PSoC4/CapSense_Sensing.c **** 
3267:Generated_Source\PSoC4/CapSense_Sensing.c **** /*******************************************************************************
3268:Generated_Source\PSoC4/CapSense_Sensing.c **** * Function Name: CapSense_WriteBitsSafe
3269:Generated_Source\PSoC4/CapSense_Sensing.c **** ****************************************************************************//**
3270:Generated_Source\PSoC4/CapSense_Sensing.c **** *
3271:Generated_Source\PSoC4/CapSense_Sensing.c **** * \brief
3272:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Writes a field in port-pin register, specified by the mask parameter
3273:Generated_Source\PSoC4/CapSense_Sensing.c **** *  with the specified value in critical section.
3274:Generated_Source\PSoC4/CapSense_Sensing.c **** *
3275:Generated_Source\PSoC4/CapSense_Sensing.c **** * \details
3276:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Writes a field in port-pin register, specified by the mask parameter
3277:Generated_Source\PSoC4/CapSense_Sensing.c **** *  with the specified value in critical section.
3278:Generated_Source\PSoC4/CapSense_Sensing.c **** *
3279:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param regPtr
3280:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies a pointer to port-pin register.
3281:Generated_Source\PSoC4/CapSense_Sensing.c **** *
3282:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param mask
3283:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies bits to be modified.
3284:Generated_Source\PSoC4/CapSense_Sensing.c **** *
3285:Generated_Source\PSoC4/CapSense_Sensing.c **** * \param value
3286:Generated_Source\PSoC4/CapSense_Sensing.c **** *  Specifies a value to be written to the register.
3287:Generated_Source\PSoC4/CapSense_Sensing.c **** *
3288:Generated_Source\PSoC4/CapSense_Sensing.c **** *******************************************************************************/
3289:Generated_Source\PSoC4/CapSense_Sensing.c **** void CapSense_WriteBitsSafe(reg32 * regPtr, uint32 mask, uint32 value)
3290:Generated_Source\PSoC4/CapSense_Sensing.c **** {
 1730              		.loc 1 3290 0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              	.LVL205:
 1735 0000 70B5     		push	{r4, r5, r6, lr}
 1736              		.cfi_def_cfa_offset 16
 1737              		.cfi_offset 4, -16
 1738              		.cfi_offset 5, -12
 1739              		.cfi_offset 6, -8
 1740              		.cfi_offset 14, -4
 1741 0002 0500     		movs	r5, r0
 1742 0004 0E00     		movs	r6, r1
 1743 0006 1400     		movs	r4, r2
3291:Generated_Source\PSoC4/CapSense_Sensing.c ****     uint8 interruptState = CyEnterCriticalSection();
 1744              		.loc 1 3291 0
 1745 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 1746              	.LVL206:
3292:Generated_Source\PSoC4/CapSense_Sensing.c ****     (* regPtr) = ((* regPtr) & ((uint32)~mask)) | (value & mask);
 1747              		.loc 1 3292 0
 1748 000c 2B68     		ldr	r3, [r5]
 1749 000e 5C40     		eors	r4, r3
 1750              	.LVL207:
 1751 0010 3440     		ands	r4, r6
 1752 0012 5C40     		eors	r4, r3
 1753 0014 2C60     		str	r4, [r5]
3293:Generated_Source\PSoC4/CapSense_Sensing.c ****     CyExitCriticalSection(interruptState);
 1754              		.loc 1 3293 0
 1755 0016 FFF7FEFF 		bl	CyExitCriticalSection
 1756              	.LVL208:
3294:Generated_Source\PSoC4/CapSense_Sensing.c **** }
 1757              		.loc 1 3294 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 93


 1758              		@ sp needed
 1759              	.LVL209:
 1760              	.LVL210:
 1761 001a 70BD     		pop	{r4, r5, r6, pc}
 1762              		.cfi_endproc
 1763              	.LFE27:
 1764              		.size	CapSense_WriteBitsSafe, .-CapSense_WriteBitsSafe
 1765              		.section	.text.CapSense_SsCSDDisableMode,"ax",%progbits
 1766              		.align	2
 1767              		.code	16
 1768              		.thumb_func
 1769              		.type	CapSense_SsCSDDisableMode, %function
 1770              	CapSense_SsCSDDisableMode:
 1771              	.LFB9:
 954:Generated_Source\PSoC4/CapSense_Sensing.c ****         #if ((CapSense_ENABLE == CapSense_CSDV2) && \
 1772              		.loc 1 954 0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 0
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 1776 0000 10B5     		push	{r4, lr}
 1777              		.cfi_def_cfa_offset 8
 1778              		.cfi_offset 4, -8
 1779              		.cfi_offset 14, -4
 961:Generated_Source\PSoC4/CapSense_Sensing.c ****             newRegValue &= (uint32)(~CapSense_SW_REFGEN_SEL_SW_IAIB_MASK);
 1780              		.loc 1 961 0
 1781 0002 074A     		ldr	r2, .L138
 1782 0004 1368     		ldr	r3, [r2]
 1783              	.LVL211:
 962:Generated_Source\PSoC4/CapSense_Sensing.c ****             CY_SET_REG32(CapSense_SW_REFGEN_SEL_PTR, newRegValue);
 1784              		.loc 1 962 0
 1785 0006 0121     		movs	r1, #1
 1786 0008 8B43     		bics	r3, r1
 1787              	.LVL212:
 963:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif /* ((CapSense_ENABLE == CapSense_CSDV2) && \
 1788              		.loc 1 963 0
 1789 000a 1360     		str	r3, [r2]
 968:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1790              		.loc 1 968 0
 1791 000c 0022     		movs	r2, #0
 1792 000e EF31     		adds	r1, r1, #239
 1793 0010 0448     		ldr	r0, .L138+4
 1794 0012 FFF7FEFF 		bl	CapSense_WriteBitsSafe
 1795              	.LVL213:
 971:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1796              		.loc 1 971 0
 1797 0016 FFF7FEFF 		bl	CapSense_SsCSDElectrodeCheck
 1798              	.LVL214:
 981:Generated_Source\PSoC4/CapSense_Sensing.c ****         #endif
 1799              		.loc 1 981 0
 1800 001a FFF7FEFF 		bl	CapSense_SsCSDDisableShieldElectrodes
 1801              	.LVL215:
 983:Generated_Source\PSoC4/CapSense_Sensing.c **** #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 1802              		.loc 1 983 0
 1803              		@ sp needed
 1804 001e 10BD     		pop	{r4, pc}
 1805              	.L139:
 1806              		.align	2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 94


 1807              	.L138:
 1808 0020 A8020B40 		.word	1074463400
 1809 0024 00040240 		.word	1073873920
 1810              		.cfi_endproc
 1811              	.LFE9:
 1812              		.size	CapSense_SsCSDDisableMode, .-CapSense_SsCSDDisableMode
 1813              		.section	.text.CapSense_SsSwitchSensingMode,"ax",%progbits
 1814              		.align	2
 1815              		.global	CapSense_SsSwitchSensingMode
 1816              		.code	16
 1817              		.thumb_func
 1818              		.type	CapSense_SsSwitchSensingMode, %function
 1819              	CapSense_SsSwitchSensingMode:
 1820              	.LFB10:
1068:Generated_Source\PSoC4/CapSense_Sensing.c ****     if (CapSense_currentSenseMethod != mode)
 1821              		.loc 1 1068 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              	.LVL216:
 1826 0000 10B5     		push	{r4, lr}
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 4, -8
 1829              		.cfi_offset 14, -4
 1830 0002 0400     		movs	r4, r0
1069:Generated_Source\PSoC4/CapSense_Sensing.c ****     {
 1831              		.loc 1 1069 0
 1832 0004 0C4B     		ldr	r3, .L144
 1833 0006 1B78     		ldrb	r3, [r3]
 1834 0008 8342     		cmp	r3, r0
 1835 000a 14D0     		beq	.L140
1072:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1836              		.loc 1 1072 0
 1837 000c 012B     		cmp	r3, #1
 1838 000e 01D1     		bne	.L142
1075:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 1839              		.loc 1 1075 0
 1840 0010 FFF7FEFF 		bl	CapSense_SsCSDDisableMode
 1841              	.LVL217:
 1842              	.L142:
1105:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1843              		.loc 1 1105 0
 1844 0014 012C     		cmp	r4, #1
 1845 0016 05D1     		bne	.L143
1109:Generated_Source\PSoC4/CapSense_Sensing.c ****                 CapSense_currentSenseMethod = CapSense_SENSE_METHOD_CSD_E;
 1846              		.loc 1 1109 0
 1847 0018 FFF7FEFF 		bl	CapSense_SsCSDInitialize
 1848              	.LVL218:
1110:Generated_Source\PSoC4/CapSense_Sensing.c ****             #endif /* (CapSense_ENABLE == CapSense_CSD_EN) */
 1849              		.loc 1 1110 0
 1850 001c 0122     		movs	r2, #1
 1851 001e 064B     		ldr	r3, .L144
 1852 0020 1A70     		strb	r2, [r3]
 1853 0022 08E0     		b	.L140
 1854              	.L143:
1113:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1855              		.loc 1 1113 0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 95


 1856 0024 022C     		cmp	r4, #2
 1857 0026 06D0     		beq	.L140
1121:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1858              		.loc 1 1121 0
 1859 0028 042C     		cmp	r4, #4
 1860 002a 04D0     		beq	.L140
1129:Generated_Source\PSoC4/CapSense_Sensing.c ****         {
 1861              		.loc 1 1129 0
 1862 002c 032C     		cmp	r4, #3
 1863 002e 02D0     		beq	.L140
1138:Generated_Source\PSoC4/CapSense_Sensing.c ****         }
 1864              		.loc 1 1138 0
 1865 0030 0022     		movs	r2, #0
 1866 0032 014B     		ldr	r3, .L144
 1867 0034 1A70     		strb	r2, [r3]
 1868              	.L140:
1141:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1869              		.loc 1 1141 0
 1870              		@ sp needed
 1871 0036 10BD     		pop	{r4, pc}
 1872              	.L145:
 1873              		.align	2
 1874              	.L144:
 1875 0038 00000000 		.word	.LANCHOR0
 1876              		.cfi_endproc
 1877              	.LFE10:
 1878              		.size	CapSense_SsSwitchSensingMode, .-CapSense_SsSwitchSensingMode
 1879              		.section	.text.CapSense_SsInitialize,"ax",%progbits
 1880              		.align	2
 1881              		.global	CapSense_SsInitialize
 1882              		.code	16
 1883              		.thumb_func
 1884              		.type	CapSense_SsInitialize, %function
 1885              	CapSense_SsInitialize:
 1886              	.LFB7:
 708:Generated_Source\PSoC4/CapSense_Sensing.c ****     cystatus initStatus;
 1887              		.loc 1 708 0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891 0000 10B5     		push	{r4, lr}
 1892              		.cfi_def_cfa_offset 8
 1893              		.cfi_offset 4, -8
 1894              		.cfi_offset 14, -4
 1895              	.LVL219:
 747:Generated_Source\PSoC4/CapSense_Sensing.c ****     #endif /* ((CapSense_ENABLE == CapSense_CSD_EN) ||\
 1896              		.loc 1 747 0
 1897 0002 FFF7FEFF 		bl	CapSense_SsInitializeSourceSenseClk
 1898              	.LVL220:
 752:Generated_Source\PSoC4/CapSense_Sensing.c ****     CapSense_dsRam.scanCurrentISC = CapSense_SNS_CONNECTION_GROUND;
 1899              		.loc 1 752 0
 1900 0006 0020     		movs	r0, #0
 1901 0008 FFF7FEFF 		bl	CapSense_SsSetAllIOsState
 1902              	.LVL221:
 753:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1903              		.loc 1 753 0
 1904 000c 0021     		movs	r1, #0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 96


 1905 000e C723     		movs	r3, #199
 1906 0010 044A     		ldr	r2, .L147
 1907 0012 D154     		strb	r1, [r2, r3]
 755:Generated_Source\PSoC4/CapSense_Sensing.c ****     #if (CapSense_ENABLE == CapSense_MANY_SENSE_MODES_EN)
 1908              		.loc 1 755 0
 1909 0014 0020     		movs	r0, #0
 1910 0016 FFF7FEFF 		bl	CapSense_SsSwitchSensingMode
 1911              	.LVL222:
 758:Generated_Source\PSoC4/CapSense_Sensing.c ****     #elif (CapSense_ENABLE == CapSense_CSX_EN)
 1912              		.loc 1 758 0
 1913 001a 0120     		movs	r0, #1
 1914 001c FFF7FEFF 		bl	CapSense_SsSwitchSensingMode
 1915              	.LVL223:
 769:Generated_Source\PSoC4/CapSense_Sensing.c **** 
 1916              		.loc 1 769 0
 1917 0020 0020     		movs	r0, #0
 1918              		@ sp needed
 1919 0022 10BD     		pop	{r4, pc}
 1920              	.L148:
 1921              		.align	2
 1922              	.L147:
 1923 0024 00000000 		.word	CapSense_dsRam
 1924              		.cfi_endproc
 1925              	.LFE7:
 1926              		.size	CapSense_SsInitialize, .-CapSense_SsInitialize
 1927              		.global	CapSense_idacGainTable
 1928              		.comm	CapSense_curSnsIOPtr,4,4
 1929              		.comm	CapSense_curRamSnsPtr,4,4
 1930              		.global	CapSense_requestScanAllWidget
 1931              		.global	CapSense_sensorIndex
 1932              		.global	CapSense_widgetIndex
 1933              		.global	CapSense_scanFreqIndex
 1934              		.global	CapSense_currentSenseMethod
 1935              		.section	.rodata
 1936              		.align	2
 1937              		.type	CapSense_idacGainTable, %object
 1938              		.size	CapSense_idacGainTable, 48
 1939              	CapSense_idacGainTable:
 1940 0000 00000001 		.word	16777216
 1941 0004 7C920000 		.word	37500
 1942 0008 00000003 		.word	50331648
 1943 000c F8240100 		.word	75000
 1944 0010 00004001 		.word	20971520
 1945 0014 E0930400 		.word	300000
 1946 0018 00004003 		.word	54525952
 1947 001c C0270900 		.word	600000
 1948 0020 00008001 		.word	25165824
 1949 0024 009F2400 		.word	2400000
 1950 0028 00008003 		.word	58720256
 1951 002c 003E4900 		.word	4800000
 1952              		.type	CapSense_scanFreqIndex, %object
 1953              		.size	CapSense_scanFreqIndex, 1
 1954              	CapSense_scanFreqIndex:
 1955 0030 00       		.space	1
 1956              		.bss
 1957              		.set	.LANCHOR0,. + 0
 1958              		.type	CapSense_currentSenseMethod, %object
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 97


 1959              		.size	CapSense_currentSenseMethod, 1
 1960              	CapSense_currentSenseMethod:
 1961 0000 00       		.space	1
 1962              		.type	CapSense_requestScanAllWidget, %object
 1963              		.size	CapSense_requestScanAllWidget, 1
 1964              	CapSense_requestScanAllWidget:
 1965 0001 00       		.space	1
 1966              		.type	CapSense_widgetIndex, %object
 1967              		.size	CapSense_widgetIndex, 1
 1968              	CapSense_widgetIndex:
 1969 0002 00       		.space	1
 1970              		.type	CapSense_sensorIndex, %object
 1971              		.size	CapSense_sensorIndex, 1
 1972              	CapSense_sensorIndex:
 1973 0003 00       		.space	1
 1974              		.text
 1975              	.Letext0:
 1976              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1977              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1978              		.file 4 "Generated_Source\\PSoC4/cytypes.h"
 1979              		.file 5 "Generated_Source\\PSoC4\\CapSense_Configuration.h"
 1980              		.file 6 "Generated_Source\\PSoC4\\CapSense_Structure.h"
 1981              		.file 7 "Generated_Source\\PSoC4\\CapSense_Sensing.h"
 1982              		.file 8 "Generated_Source\\PSoC4\\CapSense_SensingCSD_LL.h"
 1983              		.file 9 "Generated_Source\\PSoC4/CyLib.h"
 1984              		.file 10 "Generated_Source\\PSoC4\\CapSense_ISR.h"
 1985              		.section	.debug_info,"",%progbits
 1986              	.Ldebug_info0:
 1987 0000 47130000 		.4byte	0x1347
 1988 0004 0400     		.2byte	0x4
 1989 0006 00000000 		.4byte	.Ldebug_abbrev0
 1990 000a 04       		.byte	0x4
 1991 000b 01       		.uleb128 0x1
 1992 000c A5020000 		.4byte	.LASF203
 1993 0010 0C       		.byte	0xc
 1994 0011 DA090000 		.4byte	.LASF204
 1995 0015 59010000 		.4byte	.LASF205
 1996 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1997 001d 00000000 		.4byte	0
 1998 0021 00000000 		.4byte	.Ldebug_line0
 1999 0025 02       		.uleb128 0x2
 2000 0026 01       		.byte	0x1
 2001 0027 06       		.byte	0x6
 2002 0028 4D0C0000 		.4byte	.LASF0
 2003 002c 02       		.uleb128 0x2
 2004 002d 01       		.byte	0x1
 2005 002e 08       		.byte	0x8
 2006 002f 280B0000 		.4byte	.LASF1
 2007 0033 02       		.uleb128 0x2
 2008 0034 02       		.byte	0x2
 2009 0035 05       		.byte	0x5
 2010 0036 E9080000 		.4byte	.LASF2
 2011 003a 02       		.uleb128 0x2
 2012 003b 02       		.byte	0x2
 2013 003c 07       		.byte	0x7
 2014 003d 750C0000 		.4byte	.LASF3
 2015 0041 02       		.uleb128 0x2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 98


 2016 0042 04       		.byte	0x4
 2017 0043 05       		.byte	0x5
 2018 0044 21090000 		.4byte	.LASF4
 2019 0048 03       		.uleb128 0x3
 2020 0049 360B0000 		.4byte	.LASF9
 2021 004d 02       		.byte	0x2
 2022 004e 41       		.byte	0x41
 2023 004f 53000000 		.4byte	0x53
 2024 0053 02       		.uleb128 0x2
 2025 0054 04       		.byte	0x4
 2026 0055 07       		.byte	0x7
 2027 0056 6C0A0000 		.4byte	.LASF5
 2028 005a 02       		.uleb128 0x2
 2029 005b 08       		.byte	0x8
 2030 005c 05       		.byte	0x5
 2031 005d 55060000 		.4byte	.LASF6
 2032 0061 02       		.uleb128 0x2
 2033 0062 08       		.byte	0x8
 2034 0063 07       		.byte	0x7
 2035 0064 60030000 		.4byte	.LASF7
 2036 0068 04       		.uleb128 0x4
 2037 0069 04       		.byte	0x4
 2038 006a 05       		.byte	0x5
 2039 006b 696E7400 		.ascii	"int\000"
 2040 006f 02       		.uleb128 0x2
 2041 0070 04       		.byte	0x4
 2042 0071 07       		.byte	0x7
 2043 0072 BA000000 		.4byte	.LASF8
 2044 0076 03       		.uleb128 0x3
 2045 0077 3F020000 		.4byte	.LASF10
 2046 007b 03       		.byte	0x3
 2047 007c 30       		.byte	0x30
 2048 007d 48000000 		.4byte	0x48
 2049 0081 05       		.uleb128 0x5
 2050 0082 E50C0000 		.4byte	.LASF11
 2051 0086 04       		.byte	0x4
 2052 0087 E401     		.2byte	0x1e4
 2053 0089 2C000000 		.4byte	0x2c
 2054 008d 05       		.uleb128 0x5
 2055 008e 44050000 		.4byte	.LASF12
 2056 0092 04       		.byte	0x4
 2057 0093 E501     		.2byte	0x1e5
 2058 0095 3A000000 		.4byte	0x3a
 2059 0099 05       		.uleb128 0x5
 2060 009a 8B070000 		.4byte	.LASF13
 2061 009e 04       		.byte	0x4
 2062 009f E601     		.2byte	0x1e6
 2063 00a1 53000000 		.4byte	0x53
 2064 00a5 02       		.uleb128 0x2
 2065 00a6 04       		.byte	0x4
 2066 00a7 04       		.byte	0x4
 2067 00a8 99020000 		.4byte	.LASF14
 2068 00ac 02       		.uleb128 0x2
 2069 00ad 08       		.byte	0x8
 2070 00ae 04       		.byte	0x4
 2071 00af EB0C0000 		.4byte	.LASF15
 2072 00b3 02       		.uleb128 0x2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 99


 2073 00b4 01       		.byte	0x1
 2074 00b5 08       		.byte	0x8
 2075 00b6 D2040000 		.4byte	.LASF16
 2076 00ba 05       		.uleb128 0x5
 2077 00bb FE0A0000 		.4byte	.LASF17
 2078 00bf 04       		.byte	0x4
 2079 00c0 8602     		.2byte	0x286
 2080 00c2 53000000 		.4byte	0x53
 2081 00c6 06       		.uleb128 0x6
 2082 00c7 81000000 		.4byte	0x81
 2083 00cb 05       		.uleb128 0x5
 2084 00cc 60080000 		.4byte	.LASF18
 2085 00d0 04       		.byte	0x4
 2086 00d1 9002     		.2byte	0x290
 2087 00d3 D7000000 		.4byte	0xd7
 2088 00d7 06       		.uleb128 0x6
 2089 00d8 99000000 		.4byte	0x99
 2090 00dc 05       		.uleb128 0x5
 2091 00dd 48070000 		.4byte	.LASF19
 2092 00e1 04       		.byte	0x4
 2093 00e2 A002     		.2byte	0x2a0
 2094 00e4 E8000000 		.4byte	0xe8
 2095 00e8 07       		.uleb128 0x7
 2096 00e9 04       		.byte	0x4
 2097 00ea EE000000 		.4byte	0xee
 2098 00ee 08       		.uleb128 0x8
 2099 00ef 05       		.uleb128 0x5
 2100 00f0 840B0000 		.4byte	.LASF20
 2101 00f4 05       		.byte	0x5
 2102 00f5 3201     		.2byte	0x132
 2103 00f7 8D000000 		.4byte	0x8d
 2104 00fb 05       		.uleb128 0x5
 2105 00fc CF050000 		.4byte	.LASF21
 2106 0100 05       		.byte	0x5
 2107 0101 3601     		.2byte	0x136
 2108 0103 81000000 		.4byte	0x81
 2109 0107 09       		.uleb128 0x9
 2110 0108 01       		.byte	0x1
 2111 0109 2C000000 		.4byte	0x2c
 2112 010d 06       		.byte	0x6
 2113 010e 70       		.byte	0x70
 2114 010f 32010000 		.4byte	0x132
 2115 0113 0A       		.uleb128 0xa
 2116 0114 A5000000 		.4byte	.LASF22
 2117 0118 00       		.byte	0
 2118 0119 0A       		.uleb128 0xa
 2119 011a 1B0A0000 		.4byte	.LASF23
 2120 011e 01       		.byte	0x1
 2121 011f 0A       		.uleb128 0xa
 2122 0120 43090000 		.4byte	.LASF24
 2123 0124 02       		.byte	0x2
 2124 0125 0A       		.uleb128 0xa
 2125 0126 AD0B0000 		.4byte	.LASF25
 2126 012a 03       		.byte	0x3
 2127 012b 0A       		.uleb128 0xa
 2128 012c 38080000 		.4byte	.LASF26
 2129 0130 04       		.byte	0x4
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 100


 2130 0131 00       		.byte	0
 2131 0132 03       		.uleb128 0x3
 2132 0133 08060000 		.4byte	.LASF27
 2133 0137 06       		.byte	0x6
 2134 0138 76       		.byte	0x76
 2135 0139 07010000 		.4byte	0x107
 2136 013d 0B       		.uleb128 0xb
 2137 013e 10       		.byte	0x10
 2138 013f 06       		.byte	0x6
 2139 0140 AD       		.byte	0xad
 2140 0141 CA010000 		.4byte	0x1ca
 2141 0145 0C       		.uleb128 0xc
 2142 0146 90050000 		.4byte	.LASF28
 2143 014a 06       		.byte	0x6
 2144 014b B2       		.byte	0xb2
 2145 014c 8D000000 		.4byte	0x8d
 2146 0150 00       		.byte	0
 2147 0151 0C       		.uleb128 0xc
 2148 0152 AF0A0000 		.4byte	.LASF29
 2149 0156 06       		.byte	0x6
 2150 0157 B7       		.byte	0xb7
 2151 0158 EF000000 		.4byte	0xef
 2152 015c 02       		.byte	0x2
 2153 015d 0C       		.uleb128 0xc
 2154 015e CA040000 		.4byte	.LASF30
 2155 0162 06       		.byte	0x6
 2156 0163 BC       		.byte	0xbc
 2157 0164 81000000 		.4byte	0x81
 2158 0168 04       		.byte	0x4
 2159 0169 0C       		.uleb128 0xc
 2160 016a 27070000 		.4byte	.LASF31
 2161 016e 06       		.byte	0x6
 2162 016f C1       		.byte	0xc1
 2163 0170 81000000 		.4byte	0x81
 2164 0174 05       		.byte	0x5
 2165 0175 0C       		.uleb128 0xc
 2166 0176 61040000 		.4byte	.LASF32
 2167 017a 06       		.byte	0x6
 2168 017b C7       		.byte	0xc7
 2169 017c 81000000 		.4byte	0x81
 2170 0180 06       		.byte	0x6
 2171 0181 0C       		.uleb128 0xc
 2172 0182 84060000 		.4byte	.LASF33
 2173 0186 06       		.byte	0x6
 2174 0187 CD       		.byte	0xcd
 2175 0188 81000000 		.4byte	0x81
 2176 018c 07       		.byte	0x7
 2177 018d 0C       		.uleb128 0xc
 2178 018e 9B040000 		.4byte	.LASF34
 2179 0192 06       		.byte	0x6
 2180 0193 D4       		.byte	0xd4
 2181 0194 FB000000 		.4byte	0xfb
 2182 0198 08       		.byte	0x8
 2183 0199 0C       		.uleb128 0xc
 2184 019a 8D0A0000 		.4byte	.LASF35
 2185 019e 06       		.byte	0x6
 2186 019f DB       		.byte	0xdb
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 101


 2187 01a0 CA010000 		.4byte	0x1ca
 2188 01a4 09       		.byte	0x9
 2189 01a5 0C       		.uleb128 0xc
 2190 01a6 68020000 		.4byte	.LASF36
 2191 01aa 06       		.byte	0x6
 2192 01ab E0       		.byte	0xe0
 2193 01ac 81000000 		.4byte	0x81
 2194 01b0 0A       		.byte	0xa
 2195 01b1 0C       		.uleb128 0xc
 2196 01b2 FC0B0000 		.4byte	.LASF37
 2197 01b6 06       		.byte	0x6
 2198 01b7 E8       		.byte	0xe8
 2199 01b8 8D000000 		.4byte	0x8d
 2200 01bc 0C       		.byte	0xc
 2201 01bd 0C       		.uleb128 0xc
 2202 01be A6080000 		.4byte	.LASF38
 2203 01c2 06       		.byte	0x6
 2204 01c3 ED       		.byte	0xed
 2205 01c4 81000000 		.4byte	0x81
 2206 01c8 0E       		.byte	0xe
 2207 01c9 00       		.byte	0
 2208 01ca 0D       		.uleb128 0xd
 2209 01cb 81000000 		.4byte	0x81
 2210 01cf DA010000 		.4byte	0x1da
 2211 01d3 0E       		.uleb128 0xe
 2212 01d4 DA010000 		.4byte	0x1da
 2213 01d8 00       		.byte	0
 2214 01d9 00       		.byte	0
 2215 01da 02       		.uleb128 0x2
 2216 01db 04       		.byte	0x4
 2217 01dc 07       		.byte	0x7
 2218 01dd 5B0A0000 		.4byte	.LASF39
 2219 01e1 03       		.uleb128 0x3
 2220 01e2 66070000 		.4byte	.LASF40
 2221 01e6 06       		.byte	0x6
 2222 01e7 EE       		.byte	0xee
 2223 01e8 3D010000 		.4byte	0x13d
 2224 01ec 0B       		.uleb128 0xb
 2225 01ed 10       		.byte	0x10
 2226 01ee 06       		.byte	0x6
 2227 01ef F3       		.byte	0xf3
 2228 01f0 82020000 		.4byte	0x282
 2229 01f4 0C       		.uleb128 0xc
 2230 01f5 90050000 		.4byte	.LASF28
 2231 01f9 06       		.byte	0x6
 2232 01fa F8       		.byte	0xf8
 2233 01fb 8D000000 		.4byte	0x8d
 2234 01ff 00       		.byte	0
 2235 0200 0C       		.uleb128 0xc
 2236 0201 AF0A0000 		.4byte	.LASF29
 2237 0205 06       		.byte	0x6
 2238 0206 FD       		.byte	0xfd
 2239 0207 EF000000 		.4byte	0xef
 2240 020b 02       		.byte	0x2
 2241 020c 0F       		.uleb128 0xf
 2242 020d CA040000 		.4byte	.LASF30
 2243 0211 06       		.byte	0x6
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 102


 2244 0212 0201     		.2byte	0x102
 2245 0214 81000000 		.4byte	0x81
 2246 0218 04       		.byte	0x4
 2247 0219 0F       		.uleb128 0xf
 2248 021a 27070000 		.4byte	.LASF31
 2249 021e 06       		.byte	0x6
 2250 021f 0701     		.2byte	0x107
 2251 0221 81000000 		.4byte	0x81
 2252 0225 05       		.byte	0x5
 2253 0226 0F       		.uleb128 0xf
 2254 0227 61040000 		.4byte	.LASF32
 2255 022b 06       		.byte	0x6
 2256 022c 0D01     		.2byte	0x10d
 2257 022e 81000000 		.4byte	0x81
 2258 0232 06       		.byte	0x6
 2259 0233 0F       		.uleb128 0xf
 2260 0234 84060000 		.4byte	.LASF33
 2261 0238 06       		.byte	0x6
 2262 0239 1301     		.2byte	0x113
 2263 023b 81000000 		.4byte	0x81
 2264 023f 07       		.byte	0x7
 2265 0240 0F       		.uleb128 0xf
 2266 0241 9B040000 		.4byte	.LASF34
 2267 0245 06       		.byte	0x6
 2268 0246 1A01     		.2byte	0x11a
 2269 0248 FB000000 		.4byte	0xfb
 2270 024c 08       		.byte	0x8
 2271 024d 0F       		.uleb128 0xf
 2272 024e 8D0A0000 		.4byte	.LASF35
 2273 0252 06       		.byte	0x6
 2274 0253 2101     		.2byte	0x121
 2275 0255 CA010000 		.4byte	0x1ca
 2276 0259 09       		.byte	0x9
 2277 025a 0F       		.uleb128 0xf
 2278 025b 68020000 		.4byte	.LASF36
 2279 025f 06       		.byte	0x6
 2280 0260 2601     		.2byte	0x126
 2281 0262 81000000 		.4byte	0x81
 2282 0266 0A       		.byte	0xa
 2283 0267 0F       		.uleb128 0xf
 2284 0268 FC0B0000 		.4byte	.LASF37
 2285 026c 06       		.byte	0x6
 2286 026d 2E01     		.2byte	0x12e
 2287 026f 8D000000 		.4byte	0x8d
 2288 0273 0C       		.byte	0xc
 2289 0274 0F       		.uleb128 0xf
 2290 0275 A6080000 		.4byte	.LASF38
 2291 0279 06       		.byte	0x6
 2292 027a 3301     		.2byte	0x133
 2293 027c 81000000 		.4byte	0x81
 2294 0280 0E       		.byte	0xe
 2295 0281 00       		.byte	0
 2296 0282 05       		.uleb128 0x5
 2297 0283 E00A0000 		.4byte	.LASF41
 2298 0287 06       		.byte	0x6
 2299 0288 3401     		.2byte	0x134
 2300 028a EC010000 		.4byte	0x1ec
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 103


 2301 028e 10       		.uleb128 0x10
 2302 028f 12       		.byte	0x12
 2303 0290 06       		.byte	0x6
 2304 0291 3901     		.2byte	0x139
 2305 0293 34030000 		.4byte	0x334
 2306 0297 0F       		.uleb128 0xf
 2307 0298 90050000 		.4byte	.LASF28
 2308 029c 06       		.byte	0x6
 2309 029d 3E01     		.2byte	0x13e
 2310 029f 8D000000 		.4byte	0x8d
 2311 02a3 00       		.byte	0
 2312 02a4 0F       		.uleb128 0xf
 2313 02a5 AF0A0000 		.4byte	.LASF29
 2314 02a9 06       		.byte	0x6
 2315 02aa 4301     		.2byte	0x143
 2316 02ac EF000000 		.4byte	0xef
 2317 02b0 02       		.byte	0x2
 2318 02b1 0F       		.uleb128 0xf
 2319 02b2 CA040000 		.4byte	.LASF30
 2320 02b6 06       		.byte	0x6
 2321 02b7 4801     		.2byte	0x148
 2322 02b9 81000000 		.4byte	0x81
 2323 02bd 04       		.byte	0x4
 2324 02be 0F       		.uleb128 0xf
 2325 02bf 27070000 		.4byte	.LASF31
 2326 02c3 06       		.byte	0x6
 2327 02c4 4D01     		.2byte	0x14d
 2328 02c6 81000000 		.4byte	0x81
 2329 02ca 05       		.byte	0x5
 2330 02cb 0F       		.uleb128 0xf
 2331 02cc 61040000 		.4byte	.LASF32
 2332 02d0 06       		.byte	0x6
 2333 02d1 5301     		.2byte	0x153
 2334 02d3 81000000 		.4byte	0x81
 2335 02d7 06       		.byte	0x6
 2336 02d8 0F       		.uleb128 0xf
 2337 02d9 84060000 		.4byte	.LASF33
 2338 02dd 06       		.byte	0x6
 2339 02de 5901     		.2byte	0x159
 2340 02e0 81000000 		.4byte	0x81
 2341 02e4 07       		.byte	0x7
 2342 02e5 0F       		.uleb128 0xf
 2343 02e6 9B040000 		.4byte	.LASF34
 2344 02ea 06       		.byte	0x6
 2345 02eb 6001     		.2byte	0x160
 2346 02ed FB000000 		.4byte	0xfb
 2347 02f1 08       		.byte	0x8
 2348 02f2 0F       		.uleb128 0xf
 2349 02f3 8D0A0000 		.4byte	.LASF35
 2350 02f7 06       		.byte	0x6
 2351 02f8 6701     		.2byte	0x167
 2352 02fa CA010000 		.4byte	0x1ca
 2353 02fe 09       		.byte	0x9
 2354 02ff 0F       		.uleb128 0xf
 2355 0300 68020000 		.4byte	.LASF36
 2356 0304 06       		.byte	0x6
 2357 0305 6C01     		.2byte	0x16c
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 104


 2358 0307 81000000 		.4byte	0x81
 2359 030b 0A       		.byte	0xa
 2360 030c 0F       		.uleb128 0xf
 2361 030d FC0B0000 		.4byte	.LASF37
 2362 0311 06       		.byte	0x6
 2363 0312 7401     		.2byte	0x174
 2364 0314 8D000000 		.4byte	0x8d
 2365 0318 0C       		.byte	0xc
 2366 0319 0F       		.uleb128 0xf
 2367 031a A6080000 		.4byte	.LASF38
 2368 031e 06       		.byte	0x6
 2369 031f 7901     		.2byte	0x179
 2370 0321 81000000 		.4byte	0x81
 2371 0325 0E       		.byte	0xe
 2372 0326 0F       		.uleb128 0xf
 2373 0327 5C000000 		.4byte	.LASF42
 2374 032b 06       		.byte	0x6
 2375 032c 7E01     		.2byte	0x17e
 2376 032e EF000000 		.4byte	0xef
 2377 0332 10       		.byte	0x10
 2378 0333 00       		.byte	0
 2379 0334 05       		.uleb128 0x5
 2380 0335 070B0000 		.4byte	.LASF43
 2381 0339 06       		.byte	0x6
 2382 033a 7F01     		.2byte	0x17f
 2383 033c 8E020000 		.4byte	0x28e
 2384 0340 10       		.uleb128 0x10
 2385 0341 62       		.byte	0x62
 2386 0342 06       		.byte	0x6
 2387 0343 8501     		.2byte	0x185
 2388 0345 98030000 		.4byte	0x398
 2389 0349 0F       		.uleb128 0xf
 2390 034a 30000000 		.4byte	.LASF44
 2391 034e 06       		.byte	0x6
 2392 034f 8A01     		.2byte	0x18a
 2393 0351 82020000 		.4byte	0x282
 2394 0355 00       		.byte	0
 2395 0356 0F       		.uleb128 0xf
 2396 0357 B7010000 		.4byte	.LASF45
 2397 035b 06       		.byte	0x6
 2398 035c 8F01     		.2byte	0x18f
 2399 035e 82020000 		.4byte	0x282
 2400 0362 10       		.byte	0x10
 2401 0363 0F       		.uleb128 0xf
 2402 0364 880C0000 		.4byte	.LASF46
 2403 0368 06       		.byte	0x6
 2404 0369 9401     		.2byte	0x194
 2405 036b 82020000 		.4byte	0x282
 2406 036f 20       		.byte	0x20
 2407 0370 0F       		.uleb128 0xf
 2408 0371 30070000 		.4byte	.LASF47
 2409 0375 06       		.byte	0x6
 2410 0376 9901     		.2byte	0x199
 2411 0378 82020000 		.4byte	0x282
 2412 037c 30       		.byte	0x30
 2413 037d 0F       		.uleb128 0xf
 2414 037e 39040000 		.4byte	.LASF48
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 105


 2415 0382 06       		.byte	0x6
 2416 0383 9E01     		.2byte	0x19e
 2417 0385 82020000 		.4byte	0x282
 2418 0389 40       		.byte	0x40
 2419 038a 0F       		.uleb128 0xf
 2420 038b AA0A0000 		.4byte	.LASF49
 2421 038f 06       		.byte	0x6
 2422 0390 A301     		.2byte	0x1a3
 2423 0392 34030000 		.4byte	0x334
 2424 0396 50       		.byte	0x50
 2425 0397 00       		.byte	0
 2426 0398 05       		.uleb128 0x5
 2427 0399 01020000 		.4byte	.LASF50
 2428 039d 06       		.byte	0x6
 2429 039e A401     		.2byte	0x1a4
 2430 03a0 40030000 		.4byte	0x340
 2431 03a4 10       		.uleb128 0x10
 2432 03a5 0A       		.byte	0xa
 2433 03a6 06       		.byte	0x6
 2434 03a7 AA01     		.2byte	0x1aa
 2435 03a9 FC030000 		.4byte	0x3fc
 2436 03ad 11       		.uleb128 0x11
 2437 03ae 72617700 		.ascii	"raw\000"
 2438 03b2 06       		.byte	0x6
 2439 03b3 AF01     		.2byte	0x1af
 2440 03b5 FC030000 		.4byte	0x3fc
 2441 03b9 00       		.byte	0
 2442 03ba 0F       		.uleb128 0xf
 2443 03bb 700C0000 		.4byte	.LASF51
 2444 03bf 06       		.byte	0x6
 2445 03c0 B401     		.2byte	0x1b4
 2446 03c2 FC030000 		.4byte	0x3fc
 2447 03c6 02       		.byte	0x2
 2448 03c7 0F       		.uleb128 0xf
 2449 03c8 B80A0000 		.4byte	.LASF52
 2450 03cc 06       		.byte	0x6
 2451 03cd BA01     		.2byte	0x1ba
 2452 03cf CA010000 		.4byte	0x1ca
 2453 03d3 04       		.byte	0x4
 2454 03d4 0F       		.uleb128 0xf
 2455 03d5 35090000 		.4byte	.LASF53
 2456 03d9 06       		.byte	0x6
 2457 03da BF01     		.2byte	0x1bf
 2458 03dc EF000000 		.4byte	0xef
 2459 03e0 06       		.byte	0x6
 2460 03e1 0F       		.uleb128 0xf
 2461 03e2 F20C0000 		.4byte	.LASF54
 2462 03e6 06       		.byte	0x6
 2463 03e7 C401     		.2byte	0x1c4
 2464 03e9 0C040000 		.4byte	0x40c
 2465 03ed 08       		.byte	0x8
 2466 03ee 0F       		.uleb128 0xf
 2467 03ef 46060000 		.4byte	.LASF55
 2468 03f3 06       		.byte	0x6
 2469 03f4 C901     		.2byte	0x1c9
 2470 03f6 CA010000 		.4byte	0x1ca
 2471 03fa 09       		.byte	0x9
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 106


 2472 03fb 00       		.byte	0
 2473 03fc 0D       		.uleb128 0xd
 2474 03fd 8D000000 		.4byte	0x8d
 2475 0401 0C040000 		.4byte	0x40c
 2476 0405 0E       		.uleb128 0xe
 2477 0406 DA010000 		.4byte	0x1da
 2478 040a 00       		.byte	0
 2479 040b 00       		.byte	0
 2480 040c 0D       		.uleb128 0xd
 2481 040d FB000000 		.4byte	0xfb
 2482 0411 1C040000 		.4byte	0x41c
 2483 0415 0E       		.uleb128 0xe
 2484 0416 DA010000 		.4byte	0x1da
 2485 041a 00       		.byte	0
 2486 041b 00       		.byte	0
 2487 041c 05       		.uleb128 0x5
 2488 041d 07040000 		.4byte	.LASF56
 2489 0421 06       		.byte	0x6
 2490 0422 CA01     		.2byte	0x1ca
 2491 0424 A4030000 		.4byte	0x3a4
 2492 0428 10       		.uleb128 0x10
 2493 0429 3C       		.byte	0x3c
 2494 042a 06       		.byte	0x6
 2495 042b D001     		.2byte	0x1d0
 2496 042d 80040000 		.4byte	0x480
 2497 0431 0F       		.uleb128 0xf
 2498 0432 30000000 		.4byte	.LASF44
 2499 0436 06       		.byte	0x6
 2500 0437 D501     		.2byte	0x1d5
 2501 0439 80040000 		.4byte	0x480
 2502 043d 00       		.byte	0
 2503 043e 0F       		.uleb128 0xf
 2504 043f B7010000 		.4byte	.LASF45
 2505 0443 06       		.byte	0x6
 2506 0444 DA01     		.2byte	0x1da
 2507 0446 80040000 		.4byte	0x480
 2508 044a 0A       		.byte	0xa
 2509 044b 0F       		.uleb128 0xf
 2510 044c 880C0000 		.4byte	.LASF46
 2511 0450 06       		.byte	0x6
 2512 0451 DF01     		.2byte	0x1df
 2513 0453 80040000 		.4byte	0x480
 2514 0457 14       		.byte	0x14
 2515 0458 0F       		.uleb128 0xf
 2516 0459 30070000 		.4byte	.LASF47
 2517 045d 06       		.byte	0x6
 2518 045e E401     		.2byte	0x1e4
 2519 0460 80040000 		.4byte	0x480
 2520 0464 1E       		.byte	0x1e
 2521 0465 0F       		.uleb128 0xf
 2522 0466 39040000 		.4byte	.LASF48
 2523 046a 06       		.byte	0x6
 2524 046b E901     		.2byte	0x1e9
 2525 046d 80040000 		.4byte	0x480
 2526 0471 28       		.byte	0x28
 2527 0472 0F       		.uleb128 0xf
 2528 0473 AA0A0000 		.4byte	.LASF49
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 107


 2529 0477 06       		.byte	0x6
 2530 0478 EE01     		.2byte	0x1ee
 2531 047a 80040000 		.4byte	0x480
 2532 047e 32       		.byte	0x32
 2533 047f 00       		.byte	0
 2534 0480 0D       		.uleb128 0xd
 2535 0481 1C040000 		.4byte	0x41c
 2536 0485 90040000 		.4byte	0x490
 2537 0489 0E       		.uleb128 0xe
 2538 048a DA010000 		.4byte	0x1da
 2539 048e 00       		.byte	0
 2540 048f 00       		.byte	0
 2541 0490 05       		.uleb128 0x5
 2542 0491 C60D0000 		.4byte	.LASF57
 2543 0495 06       		.byte	0x6
 2544 0496 EF01     		.2byte	0x1ef
 2545 0498 28040000 		.4byte	0x428
 2546 049c 10       		.uleb128 0x10
 2547 049d C8       		.byte	0xc8
 2548 049e 06       		.byte	0x6
 2549 049f F501     		.2byte	0x1f5
 2550 04a1 9D050000 		.4byte	0x59d
 2551 04a5 0F       		.uleb128 0xf
 2552 04a6 79080000 		.4byte	.LASF58
 2553 04aa 06       		.byte	0x6
 2554 04ab FC01     		.2byte	0x1fc
 2555 04ad 8D000000 		.4byte	0x8d
 2556 04b1 00       		.byte	0
 2557 04b2 0F       		.uleb128 0xf
 2558 04b3 320D0000 		.4byte	.LASF59
 2559 04b7 06       		.byte	0x6
 2560 04b8 0102     		.2byte	0x201
 2561 04ba 8D000000 		.4byte	0x8d
 2562 04be 02       		.byte	0x2
 2563 04bf 0F       		.uleb128 0xf
 2564 04c0 D3000000 		.4byte	.LASF60
 2565 04c4 06       		.byte	0x6
 2566 04c5 0602     		.2byte	0x206
 2567 04c7 8D000000 		.4byte	0x8d
 2568 04cb 04       		.byte	0x4
 2569 04cc 0F       		.uleb128 0xf
 2570 04cd 3A090000 		.4byte	.LASF61
 2571 04d1 06       		.byte	0x6
 2572 04d2 0C02     		.2byte	0x20c
 2573 04d4 8D000000 		.4byte	0x8d
 2574 04d8 06       		.byte	0x6
 2575 04d9 0F       		.uleb128 0xf
 2576 04da C7000000 		.4byte	.LASF62
 2577 04de 06       		.byte	0x6
 2578 04df 1102     		.2byte	0x211
 2579 04e1 8D000000 		.4byte	0x8d
 2580 04e5 08       		.byte	0x8
 2581 04e6 0F       		.uleb128 0xf
 2582 04e7 9B050000 		.4byte	.LASF63
 2583 04eb 06       		.byte	0x6
 2584 04ec 1602     		.2byte	0x216
 2585 04ee D7000000 		.4byte	0xd7
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 108


 2586 04f2 0C       		.byte	0xc
 2587 04f3 0F       		.uleb128 0xf
 2588 04f4 2A090000 		.4byte	.LASF64
 2589 04f8 06       		.byte	0x6
 2590 04f9 1C02     		.2byte	0x21c
 2591 04fb 9D050000 		.4byte	0x59d
 2592 04ff 10       		.byte	0x10
 2593 0500 0F       		.uleb128 0xf
 2594 0501 CF090000 		.4byte	.LASF65
 2595 0505 06       		.byte	0x6
 2596 0506 2302     		.2byte	0x223
 2597 0508 9D050000 		.4byte	0x59d
 2598 050c 14       		.byte	0x14
 2599 050d 0F       		.uleb128 0xf
 2600 050e 8D080000 		.4byte	.LASF66
 2601 0512 06       		.byte	0x6
 2602 0513 3302     		.2byte	0x233
 2603 0515 AD050000 		.4byte	0x5ad
 2604 0519 18       		.byte	0x18
 2605 051a 0F       		.uleb128 0xf
 2606 051b 3D070000 		.4byte	.LASF67
 2607 051f 06       		.byte	0x6
 2608 0520 3902     		.2byte	0x239
 2609 0522 8D000000 		.4byte	0x8d
 2610 0526 1E       		.byte	0x1e
 2611 0527 0F       		.uleb128 0xf
 2612 0528 FD030000 		.4byte	.LASF68
 2613 052c 06       		.byte	0x6
 2614 052d 3E02     		.2byte	0x23e
 2615 052f 81000000 		.4byte	0x81
 2616 0533 20       		.byte	0x20
 2617 0534 0F       		.uleb128 0xf
 2618 0535 9F060000 		.4byte	.LASF69
 2619 0539 06       		.byte	0x6
 2620 053a 4302     		.2byte	0x243
 2621 053c 98030000 		.4byte	0x398
 2622 0540 22       		.byte	0x22
 2623 0541 0F       		.uleb128 0xf
 2624 0542 58030000 		.4byte	.LASF70
 2625 0546 06       		.byte	0x6
 2626 0547 4802     		.2byte	0x248
 2627 0549 90040000 		.4byte	0x490
 2628 054d 84       		.byte	0x84
 2629 054e 0F       		.uleb128 0xf
 2630 054f 95000000 		.4byte	.LASF71
 2631 0553 06       		.byte	0x6
 2632 0554 4D02     		.2byte	0x24d
 2633 0556 81000000 		.4byte	0x81
 2634 055a C0       		.byte	0xc0
 2635 055b 0F       		.uleb128 0xf
 2636 055c A5030000 		.4byte	.LASF72
 2637 0560 06       		.byte	0x6
 2638 0561 5202     		.2byte	0x252
 2639 0563 81000000 		.4byte	0x81
 2640 0567 C1       		.byte	0xc1
 2641 0568 0F       		.uleb128 0xf
 2642 0569 66080000 		.4byte	.LASF73
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 109


 2643 056d 06       		.byte	0x6
 2644 056e 5702     		.2byte	0x257
 2645 0570 8D000000 		.4byte	0x8d
 2646 0574 C2       		.byte	0xc2
 2647 0575 0F       		.uleb128 0xf
 2648 0576 17070000 		.4byte	.LASF74
 2649 057a 06       		.byte	0x6
 2650 057b 5C02     		.2byte	0x25c
 2651 057d FC030000 		.4byte	0x3fc
 2652 0581 C4       		.byte	0xc4
 2653 0582 0F       		.uleb128 0xf
 2654 0583 DB000000 		.4byte	.LASF75
 2655 0587 06       		.byte	0x6
 2656 0588 6102     		.2byte	0x261
 2657 058a 81000000 		.4byte	0x81
 2658 058e C6       		.byte	0xc6
 2659 058f 0F       		.uleb128 0xf
 2660 0590 690B0000 		.4byte	.LASF76
 2661 0594 06       		.byte	0x6
 2662 0595 6602     		.2byte	0x266
 2663 0597 81000000 		.4byte	0x81
 2664 059b C7       		.byte	0xc7
 2665 059c 00       		.byte	0
 2666 059d 0D       		.uleb128 0xd
 2667 059e 99000000 		.4byte	0x99
 2668 05a2 AD050000 		.4byte	0x5ad
 2669 05a6 0E       		.uleb128 0xe
 2670 05a7 DA010000 		.4byte	0x1da
 2671 05ab 00       		.byte	0
 2672 05ac 00       		.byte	0
 2673 05ad 0D       		.uleb128 0xd
 2674 05ae 81000000 		.4byte	0x81
 2675 05b2 BD050000 		.4byte	0x5bd
 2676 05b6 0E       		.uleb128 0xe
 2677 05b7 DA010000 		.4byte	0x1da
 2678 05bb 05       		.byte	0x5
 2679 05bc 00       		.byte	0
 2680 05bd 05       		.uleb128 0x5
 2681 05be F3080000 		.4byte	.LASF77
 2682 05c2 06       		.byte	0x6
 2683 05c3 6702     		.2byte	0x267
 2684 05c5 9C040000 		.4byte	0x49c
 2685 05c9 10       		.uleb128 0x10
 2686 05ca 1C       		.byte	0x1c
 2687 05cb 06       		.byte	0x6
 2688 05cc 6D02     		.2byte	0x26d
 2689 05ce 48060000 		.4byte	0x648
 2690 05d2 0F       		.uleb128 0xf
 2691 05d3 82070000 		.4byte	.LASF78
 2692 05d7 06       		.byte	0x6
 2693 05d8 7202     		.2byte	0x272
 2694 05da 48060000 		.4byte	0x648
 2695 05de 00       		.byte	0
 2696 05df 0F       		.uleb128 0xf
 2697 05e0 4F060000 		.4byte	.LASF79
 2698 05e4 06       		.byte	0x6
 2699 05e5 7702     		.2byte	0x277
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 110


 2700 05e7 48060000 		.4byte	0x648
 2701 05eb 04       		.byte	0x4
 2702 05ec 0F       		.uleb128 0xf
 2703 05ed 43040000 		.4byte	.LASF80
 2704 05f1 06       		.byte	0x6
 2705 05f2 7C02     		.2byte	0x27c
 2706 05f4 48060000 		.4byte	0x648
 2707 05f8 08       		.byte	0x8
 2708 05f9 0F       		.uleb128 0xf
 2709 05fa 5F090000 		.4byte	.LASF81
 2710 05fe 06       		.byte	0x6
 2711 05ff 8102     		.2byte	0x281
 2712 0601 48060000 		.4byte	0x648
 2713 0605 0C       		.byte	0xc
 2714 0606 0F       		.uleb128 0xf
 2715 0607 F20B0000 		.4byte	.LASF82
 2716 060b 06       		.byte	0x6
 2717 060c 8602     		.2byte	0x286
 2718 060e 99000000 		.4byte	0x99
 2719 0612 10       		.byte	0x10
 2720 0613 0F       		.uleb128 0xf
 2721 0614 C1070000 		.4byte	.LASF83
 2722 0618 06       		.byte	0x6
 2723 0619 8B02     		.2byte	0x28b
 2724 061b 99000000 		.4byte	0x99
 2725 061f 14       		.byte	0x14
 2726 0620 0F       		.uleb128 0xf
 2727 0621 39050000 		.4byte	.LASF84
 2728 0625 06       		.byte	0x6
 2729 0626 9002     		.2byte	0x290
 2730 0628 81000000 		.4byte	0x81
 2731 062c 18       		.byte	0x18
 2732 062d 0F       		.uleb128 0xf
 2733 062e 640A0000 		.4byte	.LASF85
 2734 0632 06       		.byte	0x6
 2735 0633 9502     		.2byte	0x295
 2736 0635 81000000 		.4byte	0x81
 2737 0639 19       		.byte	0x19
 2738 063a 0F       		.uleb128 0xf
 2739 063b 9F020000 		.4byte	.LASF86
 2740 063f 06       		.byte	0x6
 2741 0640 9A02     		.2byte	0x29a
 2742 0642 81000000 		.4byte	0x81
 2743 0646 1A       		.byte	0x1a
 2744 0647 00       		.byte	0
 2745 0648 07       		.uleb128 0x7
 2746 0649 04       		.byte	0x4
 2747 064a CB000000 		.4byte	0xcb
 2748 064e 05       		.uleb128 0x5
 2749 064f 8C030000 		.4byte	.LASF87
 2750 0653 06       		.byte	0x6
 2751 0654 9B02     		.2byte	0x29b
 2752 0656 C9050000 		.4byte	0x5c9
 2753 065a 10       		.uleb128 0x10
 2754 065b 1C       		.byte	0x1c
 2755 065c 06       		.byte	0x6
 2756 065d CE02     		.2byte	0x2ce
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 111


 2757 065f D9060000 		.4byte	0x6d9
 2758 0663 0F       		.uleb128 0xf
 2759 0664 C10C0000 		.4byte	.LASF88
 2760 0668 06       		.byte	0x6
 2761 0669 D702     		.2byte	0x2d7
 2762 066b D9060000 		.4byte	0x6d9
 2763 066f 00       		.byte	0
 2764 0670 0F       		.uleb128 0xf
 2765 0671 780B0000 		.4byte	.LASF89
 2766 0675 06       		.byte	0x6
 2767 0676 DE02     		.2byte	0x2de
 2768 0678 E0060000 		.4byte	0x6e0
 2769 067c 04       		.byte	0x4
 2770 067d 0F       		.uleb128 0xf
 2771 067e 82080000 		.4byte	.LASF90
 2772 0682 06       		.byte	0x6
 2773 0683 E402     		.2byte	0x2e4
 2774 0685 E2060000 		.4byte	0x6e2
 2775 0689 08       		.byte	0x8
 2776 068a 0F       		.uleb128 0xf
 2777 068b 92070000 		.4byte	.LASF91
 2778 068f 06       		.byte	0x6
 2779 0690 EA02     		.2byte	0x2ea
 2780 0692 E0060000 		.4byte	0x6e0
 2781 0696 0C       		.byte	0xc
 2782 0697 0F       		.uleb128 0xf
 2783 0698 5A050000 		.4byte	.LASF92
 2784 069c 06       		.byte	0x6
 2785 069d F102     		.2byte	0x2f1
 2786 069f E8060000 		.4byte	0x6e8
 2787 06a3 10       		.byte	0x10
 2788 06a4 0F       		.uleb128 0xf
 2789 06a5 560B0000 		.4byte	.LASF93
 2790 06a9 06       		.byte	0x6
 2791 06aa F602     		.2byte	0x2f6
 2792 06ac 99000000 		.4byte	0x99
 2793 06b0 14       		.byte	0x14
 2794 06b1 0F       		.uleb128 0xf
 2795 06b2 BE040000 		.4byte	.LASF94
 2796 06b6 06       		.byte	0x6
 2797 06b7 FD02     		.2byte	0x2fd
 2798 06b9 8D000000 		.4byte	0x8d
 2799 06bd 18       		.byte	0x18
 2800 06be 0F       		.uleb128 0xf
 2801 06bf B5030000 		.4byte	.LASF95
 2802 06c3 06       		.byte	0x6
 2803 06c4 0403     		.2byte	0x304
 2804 06c6 81000000 		.4byte	0x81
 2805 06ca 1A       		.byte	0x1a
 2806 06cb 0F       		.uleb128 0xf
 2807 06cc 63060000 		.4byte	.LASF96
 2808 06d0 06       		.byte	0x6
 2809 06d1 0E03     		.2byte	0x30e
 2810 06d3 81000000 		.4byte	0x81
 2811 06d7 1B       		.byte	0x1b
 2812 06d8 00       		.byte	0
 2813 06d9 07       		.uleb128 0x7
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 112


 2814 06da 04       		.byte	0x4
 2815 06db DF060000 		.4byte	0x6df
 2816 06df 12       		.uleb128 0x12
 2817 06e0 13       		.uleb128 0x13
 2818 06e1 04       		.byte	0x4
 2819 06e2 07       		.uleb128 0x7
 2820 06e3 04       		.byte	0x4
 2821 06e4 1C040000 		.4byte	0x41c
 2822 06e8 07       		.uleb128 0x7
 2823 06e9 04       		.byte	0x4
 2824 06ea 81000000 		.4byte	0x81
 2825 06ee 05       		.uleb128 0x5
 2826 06ef 7A040000 		.4byte	.LASF97
 2827 06f3 06       		.byte	0x6
 2828 06f4 0F03     		.2byte	0x30f
 2829 06f6 5A060000 		.4byte	0x65a
 2830 06fa 10       		.uleb128 0x10
 2831 06fb A8       		.byte	0xa8
 2832 06fc 06       		.byte	0x6
 2833 06fd 1503     		.2byte	0x315
 2834 06ff 11070000 		.4byte	0x711
 2835 0703 0F       		.uleb128 0xf
 2836 0704 E30D0000 		.4byte	.LASF98
 2837 0708 06       		.byte	0x6
 2838 0709 1A03     		.2byte	0x31a
 2839 070b 11070000 		.4byte	0x711
 2840 070f 00       		.byte	0
 2841 0710 00       		.byte	0
 2842 0711 0D       		.uleb128 0xd
 2843 0712 EE060000 		.4byte	0x6ee
 2844 0716 21070000 		.4byte	0x721
 2845 071a 0E       		.uleb128 0xe
 2846 071b DA010000 		.4byte	0x1da
 2847 071f 05       		.byte	0x5
 2848 0720 00       		.byte	0
 2849 0721 05       		.uleb128 0x5
 2850 0722 BC060000 		.4byte	.LASF99
 2851 0726 06       		.byte	0x6
 2852 0727 1B03     		.2byte	0x31b
 2853 0729 FA060000 		.4byte	0x6fa
 2854 072d 02       		.uleb128 0x2
 2855 072e 08       		.byte	0x8
 2856 072f 04       		.byte	0x4
 2857 0730 54080000 		.4byte	.LASF100
 2858 0734 09       		.uleb128 0x9
 2859 0735 01       		.byte	0x1
 2860 0736 2C000000 		.4byte	0x2c
 2861 073a 07       		.byte	0x7
 2862 073b 43       		.byte	0x43
 2863 073c 5F070000 		.4byte	0x75f
 2864 0740 0A       		.uleb128 0xa
 2865 0741 A8060000 		.4byte	.LASF101
 2866 0745 00       		.byte	0
 2867 0746 0A       		.uleb128 0xa
 2868 0747 BB050000 		.4byte	.LASF102
 2869 074b 01       		.byte	0x1
 2870 074c 0A       		.uleb128 0xa
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 113


 2871 074d 1D050000 		.4byte	.LASF103
 2872 0751 02       		.byte	0x2
 2873 0752 0A       		.uleb128 0xa
 2874 0753 480D0000 		.4byte	.LASF104
 2875 0757 03       		.byte	0x3
 2876 0758 0A       		.uleb128 0xa
 2877 0759 1F010000 		.4byte	.LASF105
 2878 075d 04       		.byte	0x4
 2879 075e 00       		.byte	0
 2880 075f 03       		.uleb128 0x3
 2881 0760 E2070000 		.4byte	.LASF106
 2882 0764 07       		.byte	0x7
 2883 0765 49       		.byte	0x49
 2884 0766 34070000 		.4byte	0x734
 2885 076a 0B       		.uleb128 0xb
 2886 076b 08       		.byte	0x8
 2887 076c 07       		.byte	0x7
 2888 076d CF       		.byte	0xcf
 2889 076e 8B070000 		.4byte	0x78b
 2890 0772 0C       		.uleb128 0xc
 2891 0773 96090000 		.4byte	.LASF107
 2892 0777 07       		.byte	0x7
 2893 0778 D4       		.byte	0xd4
 2894 0779 99000000 		.4byte	0x99
 2895 077d 00       		.byte	0
 2896 077e 0C       		.uleb128 0xc
 2897 077f A2070000 		.4byte	.LASF108
 2898 0783 07       		.byte	0x7
 2899 0784 D9       		.byte	0xd9
 2900 0785 99000000 		.4byte	0x99
 2901 0789 04       		.byte	0x4
 2902 078a 00       		.byte	0
 2903 078b 03       		.uleb128 0x3
 2904 078c C00A0000 		.4byte	.LASF109
 2905 0790 07       		.byte	0x7
 2906 0791 DA       		.byte	0xda
 2907 0792 6A070000 		.4byte	0x76a
 2908 0796 14       		.uleb128 0x14
 2909 0797 A6040000 		.4byte	.LASF112
 2910 079b 01       		.byte	0x1
 2911 079c 3B0A     		.2byte	0xa3b
 2912 079e 81000000 		.4byte	0x81
 2913 07a2 00000000 		.4byte	.LFB21
 2914 07a6 84000000 		.4byte	.LFE21-.LFB21
 2915 07aa 01       		.uleb128 0x1
 2916 07ab 9C       		.byte	0x9c
 2917 07ac E1070000 		.4byte	0x7e1
 2918 07b0 15       		.uleb128 0x15
 2919 07b1 160D0000 		.4byte	.LASF110
 2920 07b5 01       		.byte	0x1
 2921 07b6 3B0A     		.2byte	0xa3b
 2922 07b8 99000000 		.4byte	0x99
 2923 07bc 00000000 		.4byte	.LLST0
 2924 07c0 15       		.uleb128 0x15
 2925 07c1 4B050000 		.4byte	.LASF111
 2926 07c5 01       		.byte	0x1
 2927 07c6 3B0A     		.2byte	0xa3b
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 114


 2928 07c8 99000000 		.4byte	0x99
 2929 07cc 2C000000 		.4byte	.LLST1
 2930 07d0 16       		.uleb128 0x16
 2931 07d1 BE030000 		.4byte	.LASF114
 2932 07d5 01       		.byte	0x1
 2933 07d6 3D0A     		.2byte	0xa3d
 2934 07d8 81000000 		.4byte	0x81
 2935 07dc 58000000 		.4byte	.LLST2
 2936 07e0 00       		.byte	0
 2937 07e1 14       		.uleb128 0x14
 2938 07e2 80020000 		.4byte	.LASF113
 2939 07e6 01       		.byte	0x1
 2940 07e7 870A     		.2byte	0xa87
 2941 07e9 81000000 		.4byte	0x81
 2942 07ed 00000000 		.4byte	.LFB22
 2943 07f1 42000000 		.4byte	.LFE22-.LFB22
 2944 07f5 01       		.uleb128 0x1
 2945 07f6 9C       		.byte	0x9c
 2946 07f7 4C080000 		.4byte	0x84c
 2947 07fb 15       		.uleb128 0x15
 2948 07fc 160D0000 		.4byte	.LASF110
 2949 0800 01       		.byte	0x1
 2950 0801 870A     		.2byte	0xa87
 2951 0803 99000000 		.4byte	0x99
 2952 0807 77000000 		.4byte	.LLST3
 2953 080b 15       		.uleb128 0x15
 2954 080c BE030000 		.4byte	.LASF114
 2955 0810 01       		.byte	0x1
 2956 0811 870A     		.2byte	0xa87
 2957 0813 81000000 		.4byte	0x81
 2958 0817 BC000000 		.4byte	.LLST4
 2959 081b 16       		.uleb128 0x16
 2960 081c 49010000 		.4byte	.LASF115
 2961 0820 01       		.byte	0x1
 2962 0821 890A     		.2byte	0xa89
 2963 0823 99000000 		.4byte	0x99
 2964 0827 F6000000 		.4byte	.LLST5
 2965 082b 16       		.uleb128 0x16
 2966 082c AD010000 		.4byte	.LASF116
 2967 0830 01       		.byte	0x1
 2968 0831 8A0A     		.2byte	0xa8a
 2969 0833 99000000 		.4byte	0x99
 2970 0837 20010000 		.4byte	.LLST6
 2971 083b 16       		.uleb128 0x16
 2972 083c CE0C0000 		.4byte	.LASF117
 2973 0840 01       		.byte	0x1
 2974 0841 8B0A     		.2byte	0xa8b
 2975 0843 99000000 		.4byte	0x99
 2976 0847 49010000 		.4byte	.LLST7
 2977 084b 00       		.byte	0
 2978 084c 17       		.uleb128 0x17
 2979 084d C0010000 		.4byte	.LASF206
 2980 0851 01       		.byte	0x1
 2981 0852 EC       		.byte	0xec
 2982 0853 99000000 		.4byte	0x99
 2983 0857 00000000 		.4byte	.LFB1
 2984 085b 10000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 115


 2985 085f 01       		.uleb128 0x1
 2986 0860 9C       		.byte	0x9c
 2987 0861 18       		.uleb128 0x18
 2988 0862 65090000 		.4byte	.LASF120
 2989 0866 01       		.byte	0x1
 2990 0867 1A01     		.2byte	0x11a
 2991 0869 BA000000 		.4byte	0xba
 2992 086d 00000000 		.4byte	.LFB2
 2993 0871 40000000 		.4byte	.LFE2-.LFB2
 2994 0875 01       		.uleb128 0x1
 2995 0876 9C       		.byte	0x9c
 2996 0877 A5080000 		.4byte	0x8a5
 2997 087b 15       		.uleb128 0x15
 2998 087c 640D0000 		.4byte	.LASF118
 2999 0880 01       		.byte	0x1
 3000 0881 1A01     		.2byte	0x11a
 3001 0883 99000000 		.4byte	0x99
 3002 0887 5C010000 		.4byte	.LLST8
 3003 088b 16       		.uleb128 0x16
 3004 088c 3B0D0000 		.4byte	.LASF119
 3005 0890 01       		.byte	0x1
 3006 0891 1C01     		.2byte	0x11c
 3007 0893 BA000000 		.4byte	0xba
 3008 0897 7D010000 		.4byte	.LLST9
 3009 089b 19       		.uleb128 0x19
 3010 089c 38000000 		.4byte	.LVL27
 3011 08a0 8F120000 		.4byte	0x128f
 3012 08a4 00       		.byte	0
 3013 08a5 18       		.uleb128 0x18
 3014 08a6 D2060000 		.4byte	.LASF121
 3015 08aa 01       		.byte	0x1
 3016 08ab 6D01     		.2byte	0x16d
 3017 08ad BA000000 		.4byte	0xba
 3018 08b1 00000000 		.4byte	.LFB3
 3019 08b5 2C000000 		.4byte	.LFE3-.LFB3
 3020 08b9 01       		.uleb128 0x1
 3021 08ba 9C       		.byte	0x9c
 3022 08bb D9080000 		.4byte	0x8d9
 3023 08bf 16       		.uleb128 0x16
 3024 08c0 37000000 		.4byte	.LASF122
 3025 08c4 01       		.byte	0x1
 3026 08c5 6F01     		.2byte	0x16f
 3027 08c7 BA000000 		.4byte	0xba
 3028 08cb 9B010000 		.4byte	.LLST10
 3029 08cf 19       		.uleb128 0x19
 3030 08d0 16000000 		.4byte	.LVL30
 3031 08d4 9B120000 		.4byte	0x129b
 3032 08d8 00       		.byte	0
 3033 08d9 18       		.uleb128 0x18
 3034 08da DA0B0000 		.4byte	.LASF123
 3035 08de 01       		.byte	0x1
 3036 08df AB01     		.2byte	0x1ab
 3037 08e1 BA000000 		.4byte	0xba
 3038 08e5 00000000 		.4byte	.LFB4
 3039 08e9 48000000 		.4byte	.LFE4-.LFB4
 3040 08ed 01       		.uleb128 0x1
 3041 08ee 9C       		.byte	0x9c
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 116


 3042 08ef 31090000 		.4byte	0x931
 3043 08f3 16       		.uleb128 0x16
 3044 08f4 37000000 		.4byte	.LASF122
 3045 08f8 01       		.byte	0x1
 3046 08f9 AD01     		.2byte	0x1ad
 3047 08fb BA000000 		.4byte	0xba
 3048 08ff BA010000 		.4byte	.LLST11
 3049 0903 16       		.uleb128 0x16
 3050 0904 09080000 		.4byte	.LASF124
 3051 0908 01       		.byte	0x1
 3052 0909 AF01     		.2byte	0x1af
 3053 090b 99000000 		.4byte	0x99
 3054 090f 08020000 		.4byte	.LLST12
 3055 0913 1A       		.uleb128 0x1a
 3056 0914 18000000 		.4byte	.LVL35
 3057 0918 61080000 		.4byte	0x861
 3058 091c 27090000 		.4byte	0x927
 3059 0920 1B       		.uleb128 0x1b
 3060 0921 01       		.uleb128 0x1
 3061 0922 50       		.byte	0x50
 3062 0923 02       		.uleb128 0x2
 3063 0924 74       		.byte	0x74
 3064 0925 00       		.sleb128 0
 3065 0926 00       		.byte	0
 3066 0927 19       		.uleb128 0x19
 3067 0928 32000000 		.4byte	.LVL36
 3068 092c A5080000 		.4byte	0x8a5
 3069 0930 00       		.byte	0
 3070 0931 18       		.uleb128 0x18
 3071 0932 68000000 		.4byte	.LASF125
 3072 0936 01       		.byte	0x1
 3073 0937 1702     		.2byte	0x217
 3074 0939 BA000000 		.4byte	0xba
 3075 093d 00000000 		.4byte	.LFB5
 3076 0941 58000000 		.4byte	.LFE5-.LFB5
 3077 0945 01       		.uleb128 0x1
 3078 0946 9C       		.byte	0x9c
 3079 0947 85090000 		.4byte	0x985
 3080 094b 15       		.uleb128 0x15
 3081 094c 640D0000 		.4byte	.LASF118
 3082 0950 01       		.byte	0x1
 3083 0951 1702     		.2byte	0x217
 3084 0953 99000000 		.4byte	0x99
 3085 0957 1B020000 		.4byte	.LLST13
 3086 095b 15       		.uleb128 0x15
 3087 095c 1D020000 		.4byte	.LASF126
 3088 0960 01       		.byte	0x1
 3089 0961 1702     		.2byte	0x217
 3090 0963 99000000 		.4byte	0x99
 3091 0967 3C020000 		.4byte	.LLST14
 3092 096b 16       		.uleb128 0x16
 3093 096c 3B0D0000 		.4byte	.LASF119
 3094 0970 01       		.byte	0x1
 3095 0971 1902     		.2byte	0x219
 3096 0973 BA000000 		.4byte	0xba
 3097 0977 5D020000 		.4byte	.LLST15
 3098 097b 19       		.uleb128 0x19
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 117


 3099 097c 4C000000 		.4byte	.LVL42
 3100 0980 A7120000 		.4byte	0x12a7
 3101 0984 00       		.byte	0
 3102 0985 18       		.uleb128 0x18
 3103 0986 55070000 		.4byte	.LASF127
 3104 098a 01       		.byte	0x1
 3105 098b 8102     		.2byte	0x281
 3106 098d BA000000 		.4byte	0xba
 3107 0991 00000000 		.4byte	.LFB6
 3108 0995 2C000000 		.4byte	.LFE6-.LFB6
 3109 0999 01       		.uleb128 0x1
 3110 099a 9C       		.byte	0x9c
 3111 099b B9090000 		.4byte	0x9b9
 3112 099f 16       		.uleb128 0x16
 3113 09a0 37000000 		.4byte	.LASF122
 3114 09a4 01       		.byte	0x1
 3115 09a5 8302     		.2byte	0x283
 3116 09a7 BA000000 		.4byte	0xba
 3117 09ab 7B020000 		.4byte	.LLST16
 3118 09af 19       		.uleb128 0x19
 3119 09b0 16000000 		.4byte	.LVL45
 3120 09b4 B3120000 		.4byte	0x12b3
 3121 09b8 00       		.byte	0
 3122 09b9 1C       		.uleb128 0x1c
 3123 09ba 410B0000 		.4byte	.LASF134
 3124 09be 01       		.byte	0x1
 3125 09bf 4803     		.2byte	0x348
 3126 09c1 00000000 		.4byte	.LFB8
 3127 09c5 BC000000 		.4byte	.LFE8-.LFB8
 3128 09c9 01       		.uleb128 0x1
 3129 09ca 9C       		.byte	0x9c
 3130 09cb 990A0000 		.4byte	0xa99
 3131 09cf 15       		.uleb128 0x15
 3132 09d0 640D0000 		.4byte	.LASF118
 3133 09d4 01       		.byte	0x1
 3134 09d5 4803     		.2byte	0x348
 3135 09d7 99000000 		.4byte	0x99
 3136 09db 9A020000 		.4byte	.LLST17
 3137 09df 15       		.uleb128 0x15
 3138 09e0 22000000 		.4byte	.LASF128
 3139 09e4 01       		.byte	0x1
 3140 09e5 4803     		.2byte	0x348
 3141 09e7 99000000 		.4byte	0x99
 3142 09eb BB020000 		.4byte	.LLST18
 3143 09ef 15       		.uleb128 0x15
 3144 09f0 CA0B0000 		.4byte	.LASF129
 3145 09f4 01       		.byte	0x1
 3146 09f5 4803     		.2byte	0x348
 3147 09f7 99000000 		.4byte	0x99
 3148 09fb DC020000 		.4byte	.LLST19
 3149 09ff 1D       		.uleb128 0x1d
 3150 0a00 93040000 		.4byte	.LASF130
 3151 0a04 01       		.byte	0x1
 3152 0a05 4A03     		.2byte	0x34a
 3153 0a07 99000000 		.4byte	0x99
 3154 0a0b 01       		.byte	0x1
 3155 0a0c 16       		.uleb128 0x16
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 118


 3156 0a0d D00B0000 		.4byte	.LASF131
 3157 0a11 01       		.byte	0x1
 3158 0a12 4B03     		.2byte	0x34b
 3159 0a14 99000000 		.4byte	0x99
 3160 0a18 08030000 		.4byte	.LLST20
 3161 0a1c 16       		.uleb128 0x16
 3162 0a1d 3A010000 		.4byte	.LASF132
 3163 0a21 01       		.byte	0x1
 3164 0a22 4C03     		.2byte	0x34c
 3165 0a24 81000000 		.4byte	0x81
 3166 0a28 27030000 		.4byte	.LLST21
 3167 0a2c 16       		.uleb128 0x16
 3168 0a2d 630B0000 		.4byte	.LASF133
 3169 0a31 01       		.byte	0x1
 3170 0a32 4D03     		.2byte	0x34d
 3171 0a34 990A0000 		.4byte	0xa99
 3172 0a38 5B030000 		.4byte	.LLST22
 3173 0a3c 19       		.uleb128 0x19
 3174 0a3d 1E000000 		.4byte	.LVL53
 3175 0a41 BF120000 		.4byte	0x12bf
 3176 0a45 19       		.uleb128 0x19
 3177 0a46 3E000000 		.4byte	.LVL54
 3178 0a4a CA120000 		.4byte	0x12ca
 3179 0a4e 19       		.uleb128 0x19
 3180 0a4f 54000000 		.4byte	.LVL55
 3181 0a53 BF120000 		.4byte	0x12bf
 3182 0a57 19       		.uleb128 0x19
 3183 0a58 74000000 		.4byte	.LVL56
 3184 0a5c CA120000 		.4byte	0x12ca
 3185 0a60 19       		.uleb128 0x19
 3186 0a61 7A000000 		.4byte	.LVL57
 3187 0a65 BF120000 		.4byte	0x12bf
 3188 0a69 19       		.uleb128 0x19
 3189 0a6a 8C000000 		.4byte	.LVL58
 3190 0a6e CA120000 		.4byte	0x12ca
 3191 0a72 1A       		.uleb128 0x1a
 3192 0a73 94000000 		.4byte	.LVL59
 3193 0a77 D5120000 		.4byte	0x12d5
 3194 0a7b 860A0000 		.4byte	0xa86
 3195 0a7f 1B       		.uleb128 0x1b
 3196 0a80 01       		.uleb128 0x1
 3197 0a81 50       		.byte	0x50
 3198 0a82 02       		.uleb128 0x2
 3199 0a83 74       		.byte	0x74
 3200 0a84 00       		.sleb128 0
 3201 0a85 00       		.byte	0
 3202 0a86 19       		.uleb128 0x19
 3203 0a87 9A000000 		.4byte	.LVL60
 3204 0a8b BF120000 		.4byte	0x12bf
 3205 0a8f 19       		.uleb128 0x19
 3206 0a90 AC000000 		.4byte	.LVL61
 3207 0a94 CA120000 		.4byte	0x12ca
 3208 0a98 00       		.byte	0
 3209 0a99 07       		.uleb128 0x7
 3210 0a9a 04       		.byte	0x4
 3211 0a9b 9F0A0000 		.4byte	0xa9f
 3212 0a9f 1E       		.uleb128 0x1e
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 119


 3213 0aa0 4E060000 		.4byte	0x64e
 3214 0aa4 1C       		.uleb128 0x1c
 3215 0aa5 07090000 		.4byte	.LASF135
 3216 0aa9 01       		.byte	0x1
 3217 0aaa 8E04     		.2byte	0x48e
 3218 0aac 00000000 		.4byte	.LFB11
 3219 0ab0 8C000000 		.4byte	.LFE11-.LFB11
 3220 0ab4 01       		.uleb128 0x1
 3221 0ab5 9C       		.byte	0x9c
 3222 0ab6 5D0B0000 		.4byte	0xb5d
 3223 0aba 15       		.uleb128 0x15
 3224 0abb CA0B0000 		.4byte	.LASF129
 3225 0abf 01       		.byte	0x1
 3226 0ac0 8E04     		.2byte	0x48e
 3227 0ac2 99000000 		.4byte	0x99
 3228 0ac6 6E030000 		.4byte	.LLST23
 3229 0aca 16       		.uleb128 0x16
 3230 0acb 3A010000 		.4byte	.LASF132
 3231 0acf 01       		.byte	0x1
 3232 0ad0 9004     		.2byte	0x490
 3233 0ad2 81000000 		.4byte	0x81
 3234 0ad6 9A030000 		.4byte	.LLST24
 3235 0ada 16       		.uleb128 0x16
 3236 0adb 76020000 		.4byte	.LASF136
 3237 0adf 01       		.byte	0x1
 3238 0ae0 9204     		.2byte	0x492
 3239 0ae2 99000000 		.4byte	0x99
 3240 0ae6 AD030000 		.4byte	.LLST25
 3241 0aea 16       		.uleb128 0x16
 3242 0aeb 55040000 		.4byte	.LASF137
 3243 0aef 01       		.byte	0x1
 3244 0af0 9404     		.2byte	0x494
 3245 0af2 99000000 		.4byte	0x99
 3246 0af6 CC030000 		.4byte	.LLST26
 3247 0afa 16       		.uleb128 0x16
 3248 0afb EE030000 		.4byte	.LASF138
 3249 0aff 01       		.byte	0x1
 3250 0b00 9504     		.2byte	0x495
 3251 0b02 99000000 		.4byte	0x99
 3252 0b06 EB030000 		.4byte	.LLST27
 3253 0b0a 16       		.uleb128 0x16
 3254 0b0b 0D050000 		.4byte	.LASF139
 3255 0b0f 01       		.byte	0x1
 3256 0b10 9704     		.2byte	0x497
 3257 0b12 99000000 		.4byte	0x99
 3258 0b16 0A040000 		.4byte	.LLST28
 3259 0b1a 16       		.uleb128 0x16
 3260 0b1b F7060000 		.4byte	.LASF140
 3261 0b1f 01       		.byte	0x1
 3262 0b20 9804     		.2byte	0x498
 3263 0b22 99000000 		.4byte	0x99
 3264 0b26 34040000 		.4byte	.LLST29
 3265 0b2a 16       		.uleb128 0x16
 3266 0b2b 4F030000 		.4byte	.LASF141
 3267 0b2f 01       		.byte	0x1
 3268 0b30 9A04     		.2byte	0x49a
 3269 0b32 990A0000 		.4byte	0xa99
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 120


 3270 0b36 47040000 		.4byte	.LLST30
 3271 0b3a 19       		.uleb128 0x19
 3272 0b3b 38000000 		.4byte	.LVL72
 3273 0b3f BF120000 		.4byte	0x12bf
 3274 0b43 19       		.uleb128 0x19
 3275 0b44 70000000 		.4byte	.LVL83
 3276 0b48 CA120000 		.4byte	0x12ca
 3277 0b4c 1F       		.uleb128 0x1f
 3278 0b4d 7E000000 		.4byte	.LVL86
 3279 0b51 E1120000 		.4byte	0x12e1
 3280 0b55 1B       		.uleb128 0x1b
 3281 0b56 01       		.uleb128 0x1
 3282 0b57 50       		.byte	0x50
 3283 0b58 02       		.uleb128 0x2
 3284 0b59 78       		.byte	0x78
 3285 0b5a 00       		.sleb128 0
 3286 0b5b 00       		.byte	0
 3287 0b5c 00       		.byte	0
 3288 0b5d 1C       		.uleb128 0x1c
 3289 0b5e A30C0000 		.4byte	.LASF142
 3290 0b62 01       		.byte	0x1
 3291 0b63 2405     		.2byte	0x524
 3292 0b65 00000000 		.4byte	.LFB12
 3293 0b69 78000000 		.4byte	.LFE12-.LFB12
 3294 0b6d 01       		.uleb128 0x1
 3295 0b6e 9C       		.byte	0x9c
 3296 0b6f 960B0000 		.4byte	0xb96
 3297 0b73 16       		.uleb128 0x16
 3298 0b74 97080000 		.4byte	.LASF143
 3299 0b78 01       		.byte	0x1
 3300 0b79 2C05     		.2byte	0x52c
 3301 0b7b BA000000 		.4byte	0xba
 3302 0b7f 5A040000 		.4byte	.LLST31
 3303 0b83 19       		.uleb128 0x19
 3304 0b84 14000000 		.4byte	.LVL92
 3305 0b88 61080000 		.4byte	0x861
 3306 0b8c 19       		.uleb128 0x19
 3307 0b8d 2A000000 		.4byte	.LVL94
 3308 0b91 A5080000 		.4byte	0x8a5
 3309 0b95 00       		.byte	0
 3310 0b96 1C       		.uleb128 0x1c
 3311 0b97 D0080000 		.4byte	.LASF144
 3312 0b9b 01       		.byte	0x1
 3313 0b9c 7105     		.2byte	0x571
 3314 0b9e 00000000 		.4byte	.LFB13
 3315 0ba2 08000000 		.4byte	.LFE13-.LFB13
 3316 0ba6 01       		.uleb128 0x1
 3317 0ba7 9C       		.byte	0x9c
 3318 0ba8 CE0B0000 		.4byte	0xbce
 3319 0bac 15       		.uleb128 0x15
 3320 0bad 850A0000 		.4byte	.LASF145
 3321 0bb1 01       		.byte	0x1
 3322 0bb2 7105     		.2byte	0x571
 3323 0bb4 DC000000 		.4byte	0xdc
 3324 0bb8 A5040000 		.4byte	.LLST32
 3325 0bbc 1F       		.uleb128 0x1f
 3326 0bbd 06000000 		.4byte	.LVL101
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 121


 3327 0bc1 ED120000 		.4byte	0x12ed
 3328 0bc5 1B       		.uleb128 0x1b
 3329 0bc6 01       		.uleb128 0x1
 3330 0bc7 50       		.byte	0x50
 3331 0bc8 03       		.uleb128 0x3
 3332 0bc9 F3       		.byte	0xf3
 3333 0bca 01       		.uleb128 0x1
 3334 0bcb 50       		.byte	0x50
 3335 0bcc 00       		.byte	0
 3336 0bcd 00       		.byte	0
 3337 0bce 1C       		.uleb128 0x1c
 3338 0bcf D9010000 		.4byte	.LASF146
 3339 0bd3 01       		.byte	0x1
 3340 0bd4 8805     		.2byte	0x588
 3341 0bd6 00000000 		.4byte	.LFB14
 3342 0bda 30000000 		.4byte	.LFE14-.LFB14
 3343 0bde 01       		.uleb128 0x1
 3344 0bdf 9C       		.byte	0x9c
 3345 0be0 F50B0000 		.4byte	0xbf5
 3346 0be4 15       		.uleb128 0x15
 3347 0be5 4E040000 		.4byte	.LASF147
 3348 0be9 01       		.byte	0x1
 3349 0bea 8805     		.2byte	0x588
 3350 0bec 99000000 		.4byte	0x99
 3351 0bf0 C6040000 		.4byte	.LLST33
 3352 0bf4 00       		.byte	0
 3353 0bf5 1C       		.uleb128 0x1c
 3354 0bf6 EA050000 		.4byte	.LASF148
 3355 0bfa 01       		.byte	0x1
 3356 0bfb CC05     		.2byte	0x5cc
 3357 0bfd 00000000 		.4byte	.LFB15
 3358 0c01 14000000 		.4byte	.LFE15-.LFB15
 3359 0c05 01       		.uleb128 0x1
 3360 0c06 9C       		.byte	0x9c
 3361 0c07 2C0C0000 		.4byte	0xc2c
 3362 0c0b 15       		.uleb128 0x15
 3363 0c0c FC0B0000 		.4byte	.LASF37
 3364 0c10 01       		.byte	0x1
 3365 0c11 CC05     		.2byte	0x5cc
 3366 0c13 99000000 		.4byte	0x99
 3367 0c17 F4040000 		.4byte	.LLST34
 3368 0c1b 16       		.uleb128 0x16
 3369 0c1c D90C0000 		.4byte	.LASF149
 3370 0c20 01       		.byte	0x1
 3371 0c21 CF05     		.2byte	0x5cf
 3372 0c23 99000000 		.4byte	0x99
 3373 0c27 22050000 		.4byte	.LLST35
 3374 0c2b 00       		.byte	0
 3375 0c2c 1C       		.uleb128 0x1c
 3376 0c2d C6070000 		.4byte	.LASF150
 3377 0c31 01       		.byte	0x1
 3378 0c32 2006     		.2byte	0x620
 3379 0c34 00000000 		.4byte	.LFB16
 3380 0c38 12000000 		.4byte	.LFE16-.LFB16
 3381 0c3c 01       		.uleb128 0x1
 3382 0c3d 9C       		.byte	0x9c
 3383 0c3e 880C0000 		.4byte	0xc88
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 122


 3384 0c42 15       		.uleb128 0x15
 3385 0c43 FC0B0000 		.4byte	.LASF37
 3386 0c47 01       		.byte	0x1
 3387 0c48 2006     		.2byte	0x620
 3388 0c4a 99000000 		.4byte	0x99
 3389 0c4e 4B050000 		.4byte	.LLST36
 3390 0c52 15       		.uleb128 0x15
 3391 0c53 4E040000 		.4byte	.LASF147
 3392 0c57 01       		.byte	0x1
 3393 0c58 2006     		.2byte	0x620
 3394 0c5a 99000000 		.4byte	0x99
 3395 0c5e 77050000 		.4byte	.LLST37
 3396 0c62 1A       		.uleb128 0x1a
 3397 0c63 0A000000 		.4byte	.LVL113
 3398 0c67 CE0B0000 		.4byte	0xbce
 3399 0c6b 770C0000 		.4byte	0xc77
 3400 0c6f 1B       		.uleb128 0x1b
 3401 0c70 01       		.uleb128 0x1
 3402 0c71 50       		.byte	0x50
 3403 0c72 03       		.uleb128 0x3
 3404 0c73 F3       		.byte	0xf3
 3405 0c74 01       		.uleb128 0x1
 3406 0c75 51       		.byte	0x51
 3407 0c76 00       		.byte	0
 3408 0c77 1F       		.uleb128 0x1f
 3409 0c78 10000000 		.4byte	.LVL114
 3410 0c7c F50B0000 		.4byte	0xbf5
 3411 0c80 1B       		.uleb128 0x1b
 3412 0c81 01       		.uleb128 0x1
 3413 0c82 50       		.byte	0x50
 3414 0c83 02       		.uleb128 0x2
 3415 0c84 74       		.byte	0x74
 3416 0c85 00       		.sleb128 0
 3417 0c86 00       		.byte	0
 3418 0c87 00       		.byte	0
 3419 0c88 18       		.uleb128 0x18
 3420 0c89 A2050000 		.4byte	.LASF151
 3421 0c8d 01       		.byte	0x1
 3422 0c8e 5406     		.2byte	0x654
 3423 0c90 BA000000 		.4byte	0xba
 3424 0c94 00000000 		.4byte	.LFB17
 3425 0c98 1C000000 		.4byte	.LFE17-.LFB17
 3426 0c9c 01       		.uleb128 0x1
 3427 0c9d 9C       		.byte	0x9c
 3428 0c9e DA0C0000 		.4byte	0xcda
 3429 0ca2 15       		.uleb128 0x15
 3430 0ca3 640D0000 		.4byte	.LASF118
 3431 0ca7 01       		.byte	0x1
 3432 0ca8 5406     		.2byte	0x654
 3433 0caa 99000000 		.4byte	0x99
 3434 0cae 98050000 		.4byte	.LLST38
 3435 0cb2 16       		.uleb128 0x16
 3436 0cb3 8F060000 		.4byte	.LASF152
 3437 0cb7 01       		.byte	0x1
 3438 0cb8 5606     		.2byte	0x656
 3439 0cba BA000000 		.4byte	0xba
 3440 0cbe DA050000 		.4byte	.LLST39
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 123


 3441 0cc2 1F       		.uleb128 0x1f
 3442 0cc3 1A000000 		.4byte	.LVL122
 3443 0cc7 F8120000 		.4byte	0x12f8
 3444 0ccb 1B       		.uleb128 0x1b
 3445 0ccc 01       		.uleb128 0x1
 3446 0ccd 50       		.byte	0x50
 3447 0cce 03       		.uleb128 0x3
 3448 0ccf F3       		.byte	0xf3
 3449 0cd0 01       		.uleb128 0x1
 3450 0cd1 50       		.byte	0x50
 3451 0cd2 1B       		.uleb128 0x1b
 3452 0cd3 01       		.uleb128 0x1
 3453 0cd4 51       		.byte	0x51
 3454 0cd5 02       		.uleb128 0x2
 3455 0cd6 08       		.byte	0x8
 3456 0cd7 55       		.byte	0x55
 3457 0cd8 00       		.byte	0
 3458 0cd9 00       		.byte	0
 3459 0cda 18       		.uleb128 0x18
 3460 0cdb 9E090000 		.4byte	.LASF153
 3461 0cdf 01       		.byte	0x1
 3462 0ce0 C906     		.2byte	0x6c9
 3463 0ce2 BA000000 		.4byte	0xba
 3464 0ce6 00000000 		.4byte	.LFB18
 3465 0cea 1A000000 		.4byte	.LFE18-.LFB18
 3466 0cee 01       		.uleb128 0x1
 3467 0cef 9C       		.byte	0x9c
 3468 0cf0 250D0000 		.4byte	0xd25
 3469 0cf4 16       		.uleb128 0x16
 3470 0cf5 8F060000 		.4byte	.LASF152
 3471 0cf9 01       		.byte	0x1
 3472 0cfa CB06     		.2byte	0x6cb
 3473 0cfc BA000000 		.4byte	0xba
 3474 0d00 04060000 		.4byte	.LLST40
 3475 0d04 16       		.uleb128 0x16
 3476 0d05 09080000 		.4byte	.LASF124
 3477 0d09 01       		.byte	0x1
 3478 0d0a CC06     		.2byte	0x6cc
 3479 0d0c 99000000 		.4byte	0x99
 3480 0d10 2E060000 		.4byte	.LLST41
 3481 0d14 1F       		.uleb128 0x1f
 3482 0d15 0E000000 		.4byte	.LVL125
 3483 0d19 880C0000 		.4byte	0xc88
 3484 0d1d 1B       		.uleb128 0x1b
 3485 0d1e 01       		.uleb128 0x1
 3486 0d1f 50       		.byte	0x50
 3487 0d20 02       		.uleb128 0x2
 3488 0d21 74       		.byte	0x74
 3489 0d22 00       		.sleb128 0
 3490 0d23 00       		.byte	0
 3491 0d24 00       		.byte	0
 3492 0d25 18       		.uleb128 0x18
 3493 0d26 00000000 		.4byte	.LASF154
 3494 0d2a 01       		.byte	0x1
 3495 0d2b E80A     		.2byte	0xae8
 3496 0d2d 99000000 		.4byte	0x99
 3497 0d31 00000000 		.4byte	.LFB23
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 124


 3498 0d35 14000000 		.4byte	.LFE23-.LFB23
 3499 0d39 01       		.uleb128 0x1
 3500 0d3a 9C       		.byte	0x9c
 3501 0d3b 6C0D0000 		.4byte	0xd6c
 3502 0d3f 15       		.uleb128 0x15
 3503 0d40 640D0000 		.4byte	.LASF118
 3504 0d44 01       		.byte	0x1
 3505 0d45 E80A     		.2byte	0xae8
 3506 0d47 99000000 		.4byte	0x99
 3507 0d4b 4D060000 		.4byte	.LLST42
 3508 0d4f 20       		.uleb128 0x20
 3509 0d50 7E0A0000 		.4byte	.LASF155
 3510 0d54 01       		.byte	0x1
 3511 0d55 EA0A     		.2byte	0xaea
 3512 0d57 99000000 		.4byte	0x99
 3513 0d5b 01       		.uleb128 0x1
 3514 0d5c 50       		.byte	0x50
 3515 0d5d 20       		.uleb128 0x20
 3516 0d5e 37020000 		.4byte	.LASF156
 3517 0d62 01       		.byte	0x1
 3518 0d63 EE0A     		.2byte	0xaee
 3519 0d65 6C0D0000 		.4byte	0xd6c
 3520 0d69 01       		.uleb128 0x1
 3521 0d6a 53       		.byte	0x53
 3522 0d6b 00       		.byte	0
 3523 0d6c 07       		.uleb128 0x7
 3524 0d6d 04       		.byte	0x4
 3525 0d6e E1010000 		.4byte	0x1e1
 3526 0d72 18       		.uleb128 0x18
 3527 0d73 1F040000 		.4byte	.LASF157
 3528 0d77 01       		.byte	0x1
 3529 0d78 400B     		.2byte	0xb40
 3530 0d7a 81000000 		.4byte	0x81
 3531 0d7e 00000000 		.4byte	.LFB24
 3532 0d82 24000000 		.4byte	.LFE24-.LFB24
 3533 0d86 01       		.uleb128 0x1
 3534 0d87 9C       		.byte	0x9c
 3535 0d88 C80D0000 		.4byte	0xdc8
 3536 0d8c 15       		.uleb128 0x15
 3537 0d8d 160D0000 		.4byte	.LASF110
 3538 0d91 01       		.byte	0x1
 3539 0d92 400B     		.2byte	0xb40
 3540 0d94 99000000 		.4byte	0x99
 3541 0d98 6E060000 		.4byte	.LLST43
 3542 0d9c 21       		.uleb128 0x21
 3543 0d9d 90050000 		.4byte	.LASF28
 3544 0da1 01       		.byte	0x1
 3545 0da2 400B     		.2byte	0xb40
 3546 0da4 99000000 		.4byte	0x99
 3547 0da8 01       		.uleb128 0x1
 3548 0da9 51       		.byte	0x51
 3549 0daa 16       		.uleb128 0x16
 3550 0dab 530A0000 		.4byte	.LASF158
 3551 0daf 01       		.byte	0x1
 3552 0db0 420B     		.2byte	0xb42
 3553 0db2 99000000 		.4byte	0x99
 3554 0db6 A8060000 		.4byte	.LLST44
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 125


 3555 0dba 1D       		.uleb128 0x1d
 3556 0dbb 240D0000 		.4byte	.LASF159
 3557 0dbf 01       		.byte	0x1
 3558 0dc0 430B     		.2byte	0xb43
 3559 0dc2 99000000 		.4byte	0x99
 3560 0dc6 01       		.byte	0x1
 3561 0dc7 00       		.byte	0
 3562 0dc8 22       		.uleb128 0x22
 3563 0dc9 48020000 		.4byte	.LASF171
 3564 0dcd 01       		.byte	0x1
 3565 0dce 9909     		.2byte	0x999
 3566 0dd0 00000000 		.4byte	.LFB20
 3567 0dd4 3A000000 		.4byte	.LFE20-.LFB20
 3568 0dd8 01       		.uleb128 0x1
 3569 0dd9 9C       		.byte	0x9c
 3570 0dda AD0E0000 		.4byte	0xead
 3571 0dde 15       		.uleb128 0x15
 3572 0ddf 09080000 		.4byte	.LASF124
 3573 0de3 01       		.byte	0x1
 3574 0de4 9909     		.2byte	0x999
 3575 0de6 99000000 		.4byte	0x99
 3576 0dea BB060000 		.4byte	.LLST45
 3577 0dee 15       		.uleb128 0x15
 3578 0def 37020000 		.4byte	.LASF156
 3579 0df3 01       		.byte	0x1
 3580 0df4 9909     		.2byte	0x999
 3581 0df6 6C0D0000 		.4byte	0xd6c
 3582 0dfa DC060000 		.4byte	.LLST46
 3583 0dfe 16       		.uleb128 0x16
 3584 0dff BE030000 		.4byte	.LASF114
 3585 0e03 01       		.byte	0x1
 3586 0e04 9B09     		.2byte	0x99b
 3587 0e06 81000000 		.4byte	0x81
 3588 0e0a 08070000 		.4byte	.LLST47
 3589 0e0e 16       		.uleb128 0x16
 3590 0e0f 49010000 		.4byte	.LASF115
 3591 0e13 01       		.byte	0x1
 3592 0e14 9C09     		.2byte	0x99c
 3593 0e16 81000000 		.4byte	0x81
 3594 0e1a 26070000 		.4byte	.LLST48
 3595 0e1e 16       		.uleb128 0x16
 3596 0e1f 4B050000 		.4byte	.LASF111
 3597 0e23 01       		.byte	0x1
 3598 0e24 A009     		.2byte	0x9a0
 3599 0e26 99000000 		.4byte	0x99
 3600 0e2a 39070000 		.4byte	.LLST49
 3601 0e2e 16       		.uleb128 0x16
 3602 0e2f 160D0000 		.4byte	.LASF110
 3603 0e33 01       		.byte	0x1
 3604 0e34 A209     		.2byte	0x9a2
 3605 0e36 99000000 		.4byte	0x99
 3606 0e3a 57070000 		.4byte	.LLST50
 3607 0e3e 1A       		.uleb128 0x1a
 3608 0e3f 08000000 		.4byte	.LVL141
 3609 0e43 250D0000 		.4byte	0xd25
 3610 0e47 530E0000 		.4byte	0xe53
 3611 0e4b 1B       		.uleb128 0x1b
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 126


 3612 0e4c 01       		.uleb128 0x1
 3613 0e4d 50       		.byte	0x50
 3614 0e4e 03       		.uleb128 0x3
 3615 0e4f F3       		.byte	0xf3
 3616 0e50 01       		.uleb128 0x1
 3617 0e51 50       		.byte	0x50
 3618 0e52 00       		.byte	0
 3619 0e53 1A       		.uleb128 0x1a
 3620 0e54 12000000 		.4byte	.LVL143
 3621 0e58 04130000 		.4byte	0x1304
 3622 0e5c 6C0E0000 		.4byte	0xe6c
 3623 0e60 1B       		.uleb128 0x1b
 3624 0e61 01       		.uleb128 0x1
 3625 0e62 50       		.byte	0x50
 3626 0e63 02       		.uleb128 0x2
 3627 0e64 75       		.byte	0x75
 3628 0e65 00       		.sleb128 0
 3629 0e66 1B       		.uleb128 0x1b
 3630 0e67 01       		.uleb128 0x1
 3631 0e68 52       		.byte	0x52
 3632 0e69 01       		.uleb128 0x1
 3633 0e6a 30       		.byte	0x30
 3634 0e6b 00       		.byte	0
 3635 0e6c 1A       		.uleb128 0x1a
 3636 0e6d 1A000000 		.4byte	.LVL146
 3637 0e71 96070000 		.4byte	0x796
 3638 0e75 800E0000 		.4byte	0xe80
 3639 0e79 1B       		.uleb128 0x1b
 3640 0e7a 01       		.uleb128 0x1
 3641 0e7b 50       		.byte	0x50
 3642 0e7c 02       		.uleb128 0x2
 3643 0e7d 75       		.byte	0x75
 3644 0e7e 00       		.sleb128 0
 3645 0e7f 00       		.byte	0
 3646 0e80 1A       		.uleb128 0x1a
 3647 0e81 26000000 		.4byte	.LVL149
 3648 0e85 720D0000 		.4byte	0xd72
 3649 0e89 960E0000 		.4byte	0xe96
 3650 0e8d 1B       		.uleb128 0x1b
 3651 0e8e 01       		.uleb128 0x1
 3652 0e8f 50       		.byte	0x50
 3653 0e90 04       		.uleb128 0x4
 3654 0e91 75       		.byte	0x75
 3655 0e92 00       		.sleb128 0
 3656 0e93 31       		.byte	0x31
 3657 0e94 24       		.byte	0x24
 3658 0e95 00       		.byte	0
 3659 0e96 1F       		.uleb128 0x1f
 3660 0e97 30000000 		.4byte	.LVL151
 3661 0e9b E1070000 		.4byte	0x7e1
 3662 0e9f 1B       		.uleb128 0x1b
 3663 0ea0 01       		.uleb128 0x1
 3664 0ea1 50       		.byte	0x50
 3665 0ea2 02       		.uleb128 0x2
 3666 0ea3 75       		.byte	0x75
 3667 0ea4 00       		.sleb128 0
 3668 0ea5 1B       		.uleb128 0x1b
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 127


 3669 0ea6 01       		.uleb128 0x1
 3670 0ea7 51       		.byte	0x51
 3671 0ea8 02       		.uleb128 0x2
 3672 0ea9 74       		.byte	0x74
 3673 0eaa 00       		.sleb128 0
 3674 0eab 00       		.byte	0
 3675 0eac 00       		.byte	0
 3676 0ead 1C       		.uleb128 0x1c
 3677 0eae 8B0D0000 		.4byte	.LASF160
 3678 0eb2 01       		.byte	0x1
 3679 0eb3 6409     		.2byte	0x964
 3680 0eb5 00000000 		.4byte	.LFB19
 3681 0eb9 24000000 		.4byte	.LFE19-.LFB19
 3682 0ebd 01       		.uleb128 0x1
 3683 0ebe 9C       		.byte	0x9c
 3684 0ebf F40E0000 		.4byte	0xef4
 3685 0ec3 16       		.uleb128 0x16
 3686 0ec4 09080000 		.4byte	.LASF124
 3687 0ec8 01       		.byte	0x1
 3688 0ec9 6609     		.2byte	0x966
 3689 0ecb 99000000 		.4byte	0x99
 3690 0ecf 75070000 		.4byte	.LLST51
 3691 0ed3 16       		.uleb128 0x16
 3692 0ed4 37020000 		.4byte	.LASF156
 3693 0ed8 01       		.byte	0x1
 3694 0ed9 6709     		.2byte	0x967
 3695 0edb 6C0D0000 		.4byte	0xd6c
 3696 0edf 94070000 		.4byte	.LLST52
 3697 0ee3 1F       		.uleb128 0x1f
 3698 0ee4 18000000 		.4byte	.LVL159
 3699 0ee8 C80D0000 		.4byte	0xdc8
 3700 0eec 1B       		.uleb128 0x1b
 3701 0eed 01       		.uleb128 0x1
 3702 0eee 50       		.byte	0x50
 3703 0eef 02       		.uleb128 0x2
 3704 0ef0 74       		.byte	0x74
 3705 0ef1 00       		.sleb128 0
 3706 0ef2 00       		.byte	0
 3707 0ef3 00       		.byte	0
 3708 0ef4 1C       		.uleb128 0x1c
 3709 0ef5 ED040000 		.4byte	.LASF161
 3710 0ef9 01       		.byte	0x1
 3711 0efa 7A0B     		.2byte	0xb7a
 3712 0efc 00000000 		.4byte	.LFB25
 3713 0f00 C0000000 		.4byte	.LFE25-.LFB25
 3714 0f04 01       		.uleb128 0x1
 3715 0f05 9C       		.byte	0x9c
 3716 0f06 ED0F0000 		.4byte	0xfed
 3717 0f0a 15       		.uleb128 0x15
 3718 0f0b 6C040000 		.4byte	.LASF162
 3719 0f0f 01       		.byte	0x1
 3720 0f10 7A0B     		.2byte	0xb7a
 3721 0f12 99000000 		.4byte	0x99
 3722 0f16 A7070000 		.4byte	.LLST53
 3723 0f1a 16       		.uleb128 0x16
 3724 0f1b D0010000 		.4byte	.LASF163
 3725 0f1f 01       		.byte	0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 128


 3726 0f20 7C0B     		.2byte	0xb7c
 3727 0f22 99000000 		.4byte	0x99
 3728 0f26 D4070000 		.4byte	.LLST54
 3729 0f2a 16       		.uleb128 0x16
 3730 0f2b 53010000 		.4byte	.LASF164
 3731 0f2f 01       		.byte	0x1
 3732 0f30 7D0B     		.2byte	0xb7d
 3733 0f32 99000000 		.4byte	0x99
 3734 0f36 F3070000 		.4byte	.LLST55
 3735 0f3a 16       		.uleb128 0x16
 3736 0f3b E2030000 		.4byte	.LASF165
 3737 0f3f 01       		.byte	0x1
 3738 0f40 7E0B     		.2byte	0xb7e
 3739 0f42 99000000 		.4byte	0x99
 3740 0f46 11080000 		.4byte	.LLST56
 3741 0f4a 16       		.uleb128 0x16
 3742 0f4b D90C0000 		.4byte	.LASF149
 3743 0f4f 01       		.byte	0x1
 3744 0f50 7F0B     		.2byte	0xb7f
 3745 0f52 99000000 		.4byte	0x99
 3746 0f56 2F080000 		.4byte	.LLST57
 3747 0f5a 16       		.uleb128 0x16
 3748 0f5b 3A010000 		.4byte	.LASF132
 3749 0f5f 01       		.byte	0x1
 3750 0f60 800B     		.2byte	0xb80
 3751 0f62 81000000 		.4byte	0x81
 3752 0f66 79080000 		.4byte	.LLST58
 3753 0f6a 19       		.uleb128 0x19
 3754 0f6b 36000000 		.4byte	.LVL168
 3755 0f6f BF120000 		.4byte	0x12bf
 3756 0f73 19       		.uleb128 0x19
 3757 0f74 40000000 		.4byte	.LVL172
 3758 0f78 CA120000 		.4byte	0x12ca
 3759 0f7c 19       		.uleb128 0x19
 3760 0f7d 44000000 		.4byte	.LVL173
 3761 0f81 BF120000 		.4byte	0x12bf
 3762 0f85 19       		.uleb128 0x19
 3763 0f86 50000000 		.4byte	.LVL176
 3764 0f8a CA120000 		.4byte	0x12ca
 3765 0f8e 19       		.uleb128 0x19
 3766 0f8f 54000000 		.4byte	.LVL177
 3767 0f93 BF120000 		.4byte	0x12bf
 3768 0f97 19       		.uleb128 0x19
 3769 0f98 64000000 		.4byte	.LVL181
 3770 0f9c CA120000 		.4byte	0x12ca
 3771 0fa0 1A       		.uleb128 0x1a
 3772 0fa1 6C000000 		.4byte	.LVL182
 3773 0fa5 10130000 		.4byte	0x1310
 3774 0fa9 B60F0000 		.4byte	0xfb6
 3775 0fad 1B       		.uleb128 0x1b
 3776 0fae 01       		.uleb128 0x1
 3777 0faf 50       		.byte	0x50
 3778 0fb0 04       		.uleb128 0x4
 3779 0fb1 7D       		.byte	0x7d
 3780 0fb2 04       		.sleb128 4
 3781 0fb3 94       		.byte	0x94
 3782 0fb4 02       		.byte	0x2
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 129


 3783 0fb5 00       		.byte	0
 3784 0fb6 19       		.uleb128 0x19
 3785 0fb7 70000000 		.4byte	.LVL183
 3786 0fbb BF120000 		.4byte	0x12bf
 3787 0fbf 19       		.uleb128 0x19
 3788 0fc0 80000000 		.4byte	.LVL187
 3789 0fc4 CA120000 		.4byte	0x12ca
 3790 0fc8 19       		.uleb128 0x19
 3791 0fc9 84000000 		.4byte	.LVL188
 3792 0fcd BF120000 		.4byte	0x12bf
 3793 0fd1 19       		.uleb128 0x19
 3794 0fd2 94000000 		.4byte	.LVL192
 3795 0fd6 CA120000 		.4byte	0x12ca
 3796 0fda 19       		.uleb128 0x19
 3797 0fdb 98000000 		.4byte	.LVL193
 3798 0fdf BF120000 		.4byte	0x12bf
 3799 0fe3 19       		.uleb128 0x19
 3800 0fe4 A6000000 		.4byte	.LVL197
 3801 0fe8 CA120000 		.4byte	0x12ca
 3802 0fec 00       		.byte	0
 3803 0fed 18       		.uleb128 0x18
 3804 0fee 23060000 		.4byte	.LASF166
 3805 0ff2 01       		.byte	0x1
 3806 0ff3 840C     		.2byte	0xc84
 3807 0ff5 76000000 		.4byte	0x76
 3808 0ff9 00000000 		.4byte	.LFB26
 3809 0ffd 1C000000 		.4byte	.LFE26-.LFB26
 3810 1001 01       		.uleb128 0x1
 3811 1002 9C       		.byte	0x9c
 3812 1003 47100000 		.4byte	0x1047
 3813 1007 15       		.uleb128 0x15
 3814 1008 49040000 		.4byte	.LASF167
 3815 100c 01       		.byte	0x1
 3816 100d 840C     		.2byte	0xc84
 3817 100f 5F070000 		.4byte	0x75f
 3818 1013 C3080000 		.4byte	.LLST59
 3819 1017 15       		.uleb128 0x15
 3820 1018 CA0B0000 		.4byte	.LASF129
 3821 101c 01       		.byte	0x1
 3822 101d 840C     		.2byte	0xc84
 3823 101f 76000000 		.4byte	0x76
 3824 1023 E4080000 		.4byte	.LLST60
 3825 1027 16       		.uleb128 0x16
 3826 1028 7E0A0000 		.4byte	.LASF155
 3827 102c 01       		.byte	0x1
 3828 102d 860C     		.2byte	0xc86
 3829 102f 76000000 		.4byte	0x76
 3830 1033 05090000 		.4byte	.LLST61
 3831 1037 1F       		.uleb128 0x1f
 3832 1038 14000000 		.4byte	.LVL203
 3833 103c 1B130000 		.4byte	0x131b
 3834 1040 1B       		.uleb128 0x1b
 3835 1041 01       		.uleb128 0x1
 3836 1042 50       		.byte	0x50
 3837 1043 01       		.uleb128 0x1
 3838 1044 30       		.byte	0x30
 3839 1045 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 130


 3840 1046 00       		.byte	0
 3841 1047 1C       		.uleb128 0x1c
 3842 1048 E0060000 		.4byte	.LASF168
 3843 104c 01       		.byte	0x1
 3844 104d D90C     		.2byte	0xcd9
 3845 104f 00000000 		.4byte	.LFB27
 3846 1053 1C000000 		.4byte	.LFE27-.LFB27
 3847 1057 01       		.uleb128 0x1
 3848 1058 9C       		.byte	0x9c
 3849 1059 B0100000 		.4byte	0x10b0
 3850 105d 15       		.uleb128 0x15
 3851 105e FA010000 		.4byte	.LASF169
 3852 1062 01       		.byte	0x1
 3853 1063 D90C     		.2byte	0xcd9
 3854 1065 48060000 		.4byte	0x648
 3855 1069 30090000 		.4byte	.LLST62
 3856 106d 15       		.uleb128 0x15
 3857 106e C1070000 		.4byte	.LASF83
 3858 1072 01       		.byte	0x1
 3859 1073 D90C     		.2byte	0xcd9
 3860 1075 99000000 		.4byte	0x99
 3861 1079 5C090000 		.4byte	.LLST63
 3862 107d 15       		.uleb128 0x15
 3863 107e E8030000 		.4byte	.LASF170
 3864 1082 01       		.byte	0x1
 3865 1083 D90C     		.2byte	0xcd9
 3866 1085 99000000 		.4byte	0x99
 3867 1089 88090000 		.4byte	.LLST64
 3868 108d 16       		.uleb128 0x16
 3869 108e 3A010000 		.4byte	.LASF132
 3870 1092 01       		.byte	0x1
 3871 1093 DB0C     		.2byte	0xcdb
 3872 1095 81000000 		.4byte	0x81
 3873 1099 B4090000 		.4byte	.LLST65
 3874 109d 19       		.uleb128 0x19
 3875 109e 0C000000 		.4byte	.LVL206
 3876 10a2 BF120000 		.4byte	0x12bf
 3877 10a6 19       		.uleb128 0x19
 3878 10a7 1A000000 		.4byte	.LVL208
 3879 10ab CA120000 		.4byte	0x12ca
 3880 10af 00       		.byte	0
 3881 10b0 22       		.uleb128 0x22
 3882 10b1 42000000 		.4byte	.LASF172
 3883 10b5 01       		.byte	0x1
 3884 10b6 B903     		.2byte	0x3b9
 3885 10b8 00000000 		.4byte	.LFB9
 3886 10bc 28000000 		.4byte	.LFE9-.LFB9
 3887 10c0 01       		.uleb128 0x1
 3888 10c1 9C       		.byte	0x9c
 3889 10c2 0B110000 		.4byte	0x110b
 3890 10c6 16       		.uleb128 0x16
 3891 10c7 D90C0000 		.4byte	.LASF149
 3892 10cb 01       		.byte	0x1
 3893 10cc BE03     		.2byte	0x3be
 3894 10ce 99000000 		.4byte	0x99
 3895 10d2 C7090000 		.4byte	.LLST66
 3896 10d6 1A       		.uleb128 0x1a
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 131


 3897 10d7 16000000 		.4byte	.LVL213
 3898 10db 47100000 		.4byte	0x1047
 3899 10df F8100000 		.4byte	0x10f8
 3900 10e3 1B       		.uleb128 0x1b
 3901 10e4 01       		.uleb128 0x1
 3902 10e5 50       		.byte	0x50
 3903 10e6 05       		.uleb128 0x5
 3904 10e7 0C       		.byte	0xc
 3905 10e8 00040240 		.4byte	0x40020400
 3906 10ec 1B       		.uleb128 0x1b
 3907 10ed 01       		.uleb128 0x1
 3908 10ee 51       		.byte	0x51
 3909 10ef 02       		.uleb128 0x2
 3910 10f0 08       		.byte	0x8
 3911 10f1 F0       		.byte	0xf0
 3912 10f2 1B       		.uleb128 0x1b
 3913 10f3 01       		.uleb128 0x1
 3914 10f4 52       		.byte	0x52
 3915 10f5 01       		.uleb128 0x1
 3916 10f6 30       		.byte	0x30
 3917 10f7 00       		.byte	0
 3918 10f8 19       		.uleb128 0x19
 3919 10f9 1A000000 		.4byte	.LVL214
 3920 10fd 26130000 		.4byte	0x1326
 3921 1101 19       		.uleb128 0x19
 3922 1102 1E000000 		.4byte	.LVL215
 3923 1106 32130000 		.4byte	0x1332
 3924 110a 00       		.byte	0
 3925 110b 1C       		.uleb128 0x1c
 3926 110c 030C0000 		.4byte	.LASF173
 3927 1110 01       		.byte	0x1
 3928 1111 2B04     		.2byte	0x42b
 3929 1113 00000000 		.4byte	.LFB10
 3930 1117 3C000000 		.4byte	.LFE10-.LFB10
 3931 111b 01       		.uleb128 0x1
 3932 111c 9C       		.byte	0x9c
 3933 111d 44110000 		.4byte	0x1144
 3934 1121 15       		.uleb128 0x15
 3935 1122 49040000 		.4byte	.LASF167
 3936 1126 01       		.byte	0x1
 3937 1127 2B04     		.2byte	0x42b
 3938 1129 32010000 		.4byte	0x132
 3939 112d DA090000 		.4byte	.LLST67
 3940 1131 19       		.uleb128 0x19
 3941 1132 14000000 		.4byte	.LVL217
 3942 1136 B0100000 		.4byte	0x10b0
 3943 113a 19       		.uleb128 0x19
 3944 113b 1C000000 		.4byte	.LVL218
 3945 113f 3E130000 		.4byte	0x133e
 3946 1143 00       		.byte	0
 3947 1144 18       		.uleb128 0x18
 3948 1145 000D0000 		.4byte	.LASF174
 3949 1149 01       		.byte	0x1
 3950 114a C302     		.2byte	0x2c3
 3951 114c BA000000 		.4byte	0xba
 3952 1150 00000000 		.4byte	.LFB7
 3953 1154 28000000 		.4byte	.LFE7-.LFB7
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 132


 3954 1158 01       		.uleb128 0x1
 3955 1159 9C       		.byte	0x9c
 3956 115a AA110000 		.4byte	0x11aa
 3957 115e 1D       		.uleb128 0x1d
 3958 115f E6000000 		.4byte	.LASF175
 3959 1163 01       		.byte	0x1
 3960 1164 C502     		.2byte	0x2c5
 3961 1166 BA000000 		.4byte	0xba
 3962 116a 00       		.byte	0
 3963 116b 19       		.uleb128 0x19
 3964 116c 06000000 		.4byte	.LVL220
 3965 1170 AD0E0000 		.4byte	0xead
 3966 1174 1A       		.uleb128 0x1a
 3967 1175 0C000000 		.4byte	.LVL221
 3968 1179 A40A0000 		.4byte	0xaa4
 3969 117d 87110000 		.4byte	0x1187
 3970 1181 1B       		.uleb128 0x1b
 3971 1182 01       		.uleb128 0x1
 3972 1183 50       		.byte	0x50
 3973 1184 01       		.uleb128 0x1
 3974 1185 30       		.byte	0x30
 3975 1186 00       		.byte	0
 3976 1187 1A       		.uleb128 0x1a
 3977 1188 1A000000 		.4byte	.LVL222
 3978 118c 0B110000 		.4byte	0x110b
 3979 1190 9A110000 		.4byte	0x119a
 3980 1194 1B       		.uleb128 0x1b
 3981 1195 01       		.uleb128 0x1
 3982 1196 50       		.byte	0x50
 3983 1197 01       		.uleb128 0x1
 3984 1198 30       		.byte	0x30
 3985 1199 00       		.byte	0
 3986 119a 1F       		.uleb128 0x1f
 3987 119b 20000000 		.4byte	.LVL223
 3988 119f 0B110000 		.4byte	0x110b
 3989 11a3 1B       		.uleb128 0x1b
 3990 11a4 01       		.uleb128 0x1
 3991 11a5 50       		.byte	0x50
 3992 11a6 01       		.uleb128 0x1
 3993 11a7 31       		.byte	0x31
 3994 11a8 00       		.byte	0
 3995 11a9 00       		.byte	0
 3996 11aa 23       		.uleb128 0x23
 3997 11ab 08070000 		.4byte	.LASF176
 3998 11af 06       		.byte	0x6
 3999 11b0 0C05     		.2byte	0x50c
 4000 11b2 BD050000 		.4byte	0x5bd
 4001 11b6 23       		.uleb128 0x23
 4002 11b7 26020000 		.4byte	.LASF177
 4003 11bb 06       		.byte	0x6
 4004 11bc 0D05     		.2byte	0x50d
 4005 11be C2110000 		.4byte	0x11c2
 4006 11c2 1E       		.uleb128 0x1e
 4007 11c3 21070000 		.4byte	0x721
 4008 11c7 0D       		.uleb128 0xd
 4009 11c8 9F0A0000 		.4byte	0xa9f
 4010 11cc D7110000 		.4byte	0x11d7
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 133


 4011 11d0 0E       		.uleb128 0xe
 4012 11d1 DA010000 		.4byte	0x1da
 4013 11d5 05       		.byte	0x5
 4014 11d6 00       		.byte	0
 4015 11d7 23       		.uleb128 0x23
 4016 11d8 930C0000 		.4byte	.LASF178
 4017 11dc 06       		.byte	0x6
 4018 11dd 0E05     		.2byte	0x50e
 4019 11df E3110000 		.4byte	0x11e3
 4020 11e3 1E       		.uleb128 0x1e
 4021 11e4 C7110000 		.4byte	0x11c7
 4022 11e8 24       		.uleb128 0x24
 4023 11e9 80000000 		.4byte	.LASF179
 4024 11ed 01       		.byte	0x1
 4025 11ee BC       		.byte	0xbc
 4026 11ef C6000000 		.4byte	0xc6
 4027 11f3 05       		.uleb128 0x5
 4028 11f4 03       		.byte	0x3
 4029 11f5 00000000 		.4byte	CapSense_widgetIndex
 4030 11f9 24       		.uleb128 0x24
 4031 11fa 77030000 		.4byte	.LASF180
 4032 11fe 01       		.byte	0x1
 4033 11ff BD       		.byte	0xbd
 4034 1200 C6000000 		.4byte	0xc6
 4035 1204 05       		.uleb128 0x5
 4036 1205 03       		.byte	0x3
 4037 1206 00000000 		.4byte	CapSense_sensorIndex
 4038 120a 24       		.uleb128 0x24
 4039 120b 6D0D0000 		.4byte	.LASF181
 4040 120f 01       		.byte	0x1
 4041 1210 BE       		.byte	0xbe
 4042 1211 81000000 		.4byte	0x81
 4043 1215 05       		.uleb128 0x5
 4044 1216 03       		.byte	0x3
 4045 1217 00000000 		.4byte	CapSense_requestScanAllWidget
 4046 121b 24       		.uleb128 0x24
 4047 121c 370C0000 		.4byte	.LASF182
 4048 1220 01       		.byte	0x1
 4049 1221 C1       		.byte	0xc1
 4050 1222 E2060000 		.4byte	0x6e2
 4051 1226 05       		.uleb128 0x5
 4052 1227 03       		.byte	0x3
 4053 1228 00000000 		.4byte	CapSense_curRamSnsPtr
 4054 122c 24       		.uleb128 0x24
 4055 122d 370A0000 		.4byte	.LASF183
 4056 1231 01       		.byte	0x1
 4057 1232 AF       		.byte	0xaf
 4058 1233 32010000 		.4byte	0x132
 4059 1237 05       		.uleb128 0x5
 4060 1238 03       		.byte	0x3
 4061 1239 00000000 		.4byte	CapSense_currentSenseMethod
 4062 123d 24       		.uleb128 0x24
 4063 123e 590C0000 		.4byte	.LASF184
 4064 1242 01       		.byte	0x1
 4065 1243 B8       		.byte	0xb8
 4066 1244 4E120000 		.4byte	0x124e
 4067 1248 05       		.uleb128 0x5
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 134


 4068 1249 03       		.byte	0x3
 4069 124a 00000000 		.4byte	CapSense_scanFreqIndex
 4070 124e 1E       		.uleb128 0x1e
 4071 124f 81000000 		.4byte	0x81
 4072 1253 24       		.uleb128 0x24
 4073 1254 AC070000 		.4byte	.LASF185
 4074 1258 01       		.byte	0x1
 4075 1259 D0       		.byte	0xd0
 4076 125a 990A0000 		.4byte	0xa99
 4077 125e 05       		.uleb128 0x5
 4078 125f 03       		.byte	0x3
 4079 1260 00000000 		.4byte	CapSense_curSnsIOPtr
 4080 1264 0D       		.uleb128 0xd
 4081 1265 74120000 		.4byte	0x1274
 4082 1269 74120000 		.4byte	0x1274
 4083 126d 0E       		.uleb128 0xe
 4084 126e DA010000 		.4byte	0x1da
 4085 1272 05       		.byte	0x5
 4086 1273 00       		.byte	0
 4087 1274 1E       		.uleb128 0x1e
 4088 1275 8B070000 		.4byte	0x78b
 4089 1279 24       		.uleb128 0x24
 4090 127a AF0D0000 		.4byte	.LASF186
 4091 127e 01       		.byte	0x1
 4092 127f D2       		.byte	0xd2
 4093 1280 8A120000 		.4byte	0x128a
 4094 1284 05       		.uleb128 0x5
 4095 1285 03       		.byte	0x3
 4096 1286 00000000 		.4byte	CapSense_idacGainTable
 4097 128a 1E       		.uleb128 0x1e
 4098 128b 64120000 		.4byte	0x1264
 4099 128f 25       		.uleb128 0x25
 4100 1290 37030000 		.4byte	.LASF187
 4101 1294 37030000 		.4byte	.LASF187
 4102 1298 08       		.byte	0x8
 4103 1299 8801     		.2byte	0x188
 4104 129b 25       		.uleb128 0x25
 4105 129c 9C0B0000 		.4byte	.LASF188
 4106 12a0 9C0B0000 		.4byte	.LASF188
 4107 12a4 08       		.byte	0x8
 4108 12a5 8A01     		.2byte	0x18a
 4109 12a7 25       		.uleb128 0x25
 4110 12a8 C7030000 		.4byte	.LASF189
 4111 12ac C7030000 		.4byte	.LASF189
 4112 12b0 08       		.byte	0x8
 4113 12b1 8901     		.2byte	0x189
 4114 12b3 25       		.uleb128 0x25
 4115 12b4 BB090000 		.4byte	.LASF190
 4116 12b8 BB090000 		.4byte	.LASF190
 4117 12bc 08       		.byte	0x8
 4118 12bd 8B01     		.2byte	0x18b
 4119 12bf 26       		.uleb128 0x26
 4120 12c0 200C0000 		.4byte	.LASF191
 4121 12c4 200C0000 		.4byte	.LASF191
 4122 12c8 09       		.byte	0x9
 4123 12c9 E5       		.byte	0xe5
 4124 12ca 26       		.uleb128 0x26
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 135


 4125 12cb D7040000 		.4byte	.LASF192
 4126 12cf D7040000 		.4byte	.LASF192
 4127 12d3 09       		.byte	0x9
 4128 12d4 E6       		.byte	0xe6
 4129 12d5 25       		.uleb128 0x25
 4130 12d6 040A0000 		.4byte	.LASF193
 4131 12da 040A0000 		.4byte	.LASF193
 4132 12de 08       		.byte	0x8
 4133 12df 9101     		.2byte	0x191
 4134 12e1 25       		.uleb128 0x25
 4135 12e2 F1000000 		.4byte	.LASF194
 4136 12e6 F1000000 		.4byte	.LASF194
 4137 12ea 08       		.byte	0x8
 4138 12eb AA01     		.2byte	0x1aa
 4139 12ed 26       		.uleb128 0x26
 4140 12ee 950A0000 		.4byte	.LASF195
 4141 12f2 950A0000 		.4byte	.LASF195
 4142 12f6 0A       		.byte	0xa
 4143 12f7 18       		.byte	0x18
 4144 12f8 25       		.uleb128 0x25
 4145 12f9 7A090000 		.4byte	.LASF196
 4146 12fd 7A090000 		.4byte	.LASF196
 4147 1301 08       		.byte	0x8
 4148 1302 8E01     		.2byte	0x18e
 4149 1304 25       		.uleb128 0x25
 4150 1305 13080000 		.4byte	.LASF197
 4151 1309 13080000 		.4byte	.LASF197
 4152 130d 08       		.byte	0x8
 4153 130e AE01     		.2byte	0x1ae
 4154 1310 26       		.uleb128 0x26
 4155 1311 FF070000 		.4byte	.LASF198
 4156 1315 FF070000 		.4byte	.LASF198
 4157 1319 09       		.byte	0x9
 4158 131a DA       		.byte	0xda
 4159 131b 26       		.uleb128 0x26
 4160 131c 18010000 		.4byte	.LASF199
 4161 1320 18010000 		.4byte	.LASF199
 4162 1324 09       		.byte	0x9
 4163 1325 E7       		.byte	0xe7
 4164 1326 25       		.uleb128 0x25
 4165 1327 B3080000 		.4byte	.LASF200
 4166 132b B3080000 		.4byte	.LASF200
 4167 132f 08       		.byte	0x8
 4168 1330 A501     		.2byte	0x1a5
 4169 1332 25       		.uleb128 0x25
 4170 1333 6A050000 		.4byte	.LASF201
 4171 1337 6A050000 		.4byte	.LASF201
 4172 133b 08       		.byte	0x8
 4173 133c A901     		.2byte	0x1a9
 4174 133e 25       		.uleb128 0x25
 4175 133f 6B060000 		.4byte	.LASF202
 4176 1343 6B060000 		.4byte	.LASF202
 4177 1347 08       		.byte	0x8
 4178 1348 A101     		.2byte	0x1a1
 4179 134a 00       		.byte	0
 4180              		.section	.debug_abbrev,"",%progbits
 4181              	.Ldebug_abbrev0:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 136


 4182 0000 01       		.uleb128 0x1
 4183 0001 11       		.uleb128 0x11
 4184 0002 01       		.byte	0x1
 4185 0003 25       		.uleb128 0x25
 4186 0004 0E       		.uleb128 0xe
 4187 0005 13       		.uleb128 0x13
 4188 0006 0B       		.uleb128 0xb
 4189 0007 03       		.uleb128 0x3
 4190 0008 0E       		.uleb128 0xe
 4191 0009 1B       		.uleb128 0x1b
 4192 000a 0E       		.uleb128 0xe
 4193 000b 55       		.uleb128 0x55
 4194 000c 17       		.uleb128 0x17
 4195 000d 11       		.uleb128 0x11
 4196 000e 01       		.uleb128 0x1
 4197 000f 10       		.uleb128 0x10
 4198 0010 17       		.uleb128 0x17
 4199 0011 00       		.byte	0
 4200 0012 00       		.byte	0
 4201 0013 02       		.uleb128 0x2
 4202 0014 24       		.uleb128 0x24
 4203 0015 00       		.byte	0
 4204 0016 0B       		.uleb128 0xb
 4205 0017 0B       		.uleb128 0xb
 4206 0018 3E       		.uleb128 0x3e
 4207 0019 0B       		.uleb128 0xb
 4208 001a 03       		.uleb128 0x3
 4209 001b 0E       		.uleb128 0xe
 4210 001c 00       		.byte	0
 4211 001d 00       		.byte	0
 4212 001e 03       		.uleb128 0x3
 4213 001f 16       		.uleb128 0x16
 4214 0020 00       		.byte	0
 4215 0021 03       		.uleb128 0x3
 4216 0022 0E       		.uleb128 0xe
 4217 0023 3A       		.uleb128 0x3a
 4218 0024 0B       		.uleb128 0xb
 4219 0025 3B       		.uleb128 0x3b
 4220 0026 0B       		.uleb128 0xb
 4221 0027 49       		.uleb128 0x49
 4222 0028 13       		.uleb128 0x13
 4223 0029 00       		.byte	0
 4224 002a 00       		.byte	0
 4225 002b 04       		.uleb128 0x4
 4226 002c 24       		.uleb128 0x24
 4227 002d 00       		.byte	0
 4228 002e 0B       		.uleb128 0xb
 4229 002f 0B       		.uleb128 0xb
 4230 0030 3E       		.uleb128 0x3e
 4231 0031 0B       		.uleb128 0xb
 4232 0032 03       		.uleb128 0x3
 4233 0033 08       		.uleb128 0x8
 4234 0034 00       		.byte	0
 4235 0035 00       		.byte	0
 4236 0036 05       		.uleb128 0x5
 4237 0037 16       		.uleb128 0x16
 4238 0038 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 137


 4239 0039 03       		.uleb128 0x3
 4240 003a 0E       		.uleb128 0xe
 4241 003b 3A       		.uleb128 0x3a
 4242 003c 0B       		.uleb128 0xb
 4243 003d 3B       		.uleb128 0x3b
 4244 003e 05       		.uleb128 0x5
 4245 003f 49       		.uleb128 0x49
 4246 0040 13       		.uleb128 0x13
 4247 0041 00       		.byte	0
 4248 0042 00       		.byte	0
 4249 0043 06       		.uleb128 0x6
 4250 0044 35       		.uleb128 0x35
 4251 0045 00       		.byte	0
 4252 0046 49       		.uleb128 0x49
 4253 0047 13       		.uleb128 0x13
 4254 0048 00       		.byte	0
 4255 0049 00       		.byte	0
 4256 004a 07       		.uleb128 0x7
 4257 004b 0F       		.uleb128 0xf
 4258 004c 00       		.byte	0
 4259 004d 0B       		.uleb128 0xb
 4260 004e 0B       		.uleb128 0xb
 4261 004f 49       		.uleb128 0x49
 4262 0050 13       		.uleb128 0x13
 4263 0051 00       		.byte	0
 4264 0052 00       		.byte	0
 4265 0053 08       		.uleb128 0x8
 4266 0054 15       		.uleb128 0x15
 4267 0055 00       		.byte	0
 4268 0056 27       		.uleb128 0x27
 4269 0057 19       		.uleb128 0x19
 4270 0058 00       		.byte	0
 4271 0059 00       		.byte	0
 4272 005a 09       		.uleb128 0x9
 4273 005b 04       		.uleb128 0x4
 4274 005c 01       		.byte	0x1
 4275 005d 0B       		.uleb128 0xb
 4276 005e 0B       		.uleb128 0xb
 4277 005f 49       		.uleb128 0x49
 4278 0060 13       		.uleb128 0x13
 4279 0061 3A       		.uleb128 0x3a
 4280 0062 0B       		.uleb128 0xb
 4281 0063 3B       		.uleb128 0x3b
 4282 0064 0B       		.uleb128 0xb
 4283 0065 01       		.uleb128 0x1
 4284 0066 13       		.uleb128 0x13
 4285 0067 00       		.byte	0
 4286 0068 00       		.byte	0
 4287 0069 0A       		.uleb128 0xa
 4288 006a 28       		.uleb128 0x28
 4289 006b 00       		.byte	0
 4290 006c 03       		.uleb128 0x3
 4291 006d 0E       		.uleb128 0xe
 4292 006e 1C       		.uleb128 0x1c
 4293 006f 0B       		.uleb128 0xb
 4294 0070 00       		.byte	0
 4295 0071 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 138


 4296 0072 0B       		.uleb128 0xb
 4297 0073 13       		.uleb128 0x13
 4298 0074 01       		.byte	0x1
 4299 0075 0B       		.uleb128 0xb
 4300 0076 0B       		.uleb128 0xb
 4301 0077 3A       		.uleb128 0x3a
 4302 0078 0B       		.uleb128 0xb
 4303 0079 3B       		.uleb128 0x3b
 4304 007a 0B       		.uleb128 0xb
 4305 007b 01       		.uleb128 0x1
 4306 007c 13       		.uleb128 0x13
 4307 007d 00       		.byte	0
 4308 007e 00       		.byte	0
 4309 007f 0C       		.uleb128 0xc
 4310 0080 0D       		.uleb128 0xd
 4311 0081 00       		.byte	0
 4312 0082 03       		.uleb128 0x3
 4313 0083 0E       		.uleb128 0xe
 4314 0084 3A       		.uleb128 0x3a
 4315 0085 0B       		.uleb128 0xb
 4316 0086 3B       		.uleb128 0x3b
 4317 0087 0B       		.uleb128 0xb
 4318 0088 49       		.uleb128 0x49
 4319 0089 13       		.uleb128 0x13
 4320 008a 38       		.uleb128 0x38
 4321 008b 0B       		.uleb128 0xb
 4322 008c 00       		.byte	0
 4323 008d 00       		.byte	0
 4324 008e 0D       		.uleb128 0xd
 4325 008f 01       		.uleb128 0x1
 4326 0090 01       		.byte	0x1
 4327 0091 49       		.uleb128 0x49
 4328 0092 13       		.uleb128 0x13
 4329 0093 01       		.uleb128 0x1
 4330 0094 13       		.uleb128 0x13
 4331 0095 00       		.byte	0
 4332 0096 00       		.byte	0
 4333 0097 0E       		.uleb128 0xe
 4334 0098 21       		.uleb128 0x21
 4335 0099 00       		.byte	0
 4336 009a 49       		.uleb128 0x49
 4337 009b 13       		.uleb128 0x13
 4338 009c 2F       		.uleb128 0x2f
 4339 009d 0B       		.uleb128 0xb
 4340 009e 00       		.byte	0
 4341 009f 00       		.byte	0
 4342 00a0 0F       		.uleb128 0xf
 4343 00a1 0D       		.uleb128 0xd
 4344 00a2 00       		.byte	0
 4345 00a3 03       		.uleb128 0x3
 4346 00a4 0E       		.uleb128 0xe
 4347 00a5 3A       		.uleb128 0x3a
 4348 00a6 0B       		.uleb128 0xb
 4349 00a7 3B       		.uleb128 0x3b
 4350 00a8 05       		.uleb128 0x5
 4351 00a9 49       		.uleb128 0x49
 4352 00aa 13       		.uleb128 0x13
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 139


 4353 00ab 38       		.uleb128 0x38
 4354 00ac 0B       		.uleb128 0xb
 4355 00ad 00       		.byte	0
 4356 00ae 00       		.byte	0
 4357 00af 10       		.uleb128 0x10
 4358 00b0 13       		.uleb128 0x13
 4359 00b1 01       		.byte	0x1
 4360 00b2 0B       		.uleb128 0xb
 4361 00b3 0B       		.uleb128 0xb
 4362 00b4 3A       		.uleb128 0x3a
 4363 00b5 0B       		.uleb128 0xb
 4364 00b6 3B       		.uleb128 0x3b
 4365 00b7 05       		.uleb128 0x5
 4366 00b8 01       		.uleb128 0x1
 4367 00b9 13       		.uleb128 0x13
 4368 00ba 00       		.byte	0
 4369 00bb 00       		.byte	0
 4370 00bc 11       		.uleb128 0x11
 4371 00bd 0D       		.uleb128 0xd
 4372 00be 00       		.byte	0
 4373 00bf 03       		.uleb128 0x3
 4374 00c0 08       		.uleb128 0x8
 4375 00c1 3A       		.uleb128 0x3a
 4376 00c2 0B       		.uleb128 0xb
 4377 00c3 3B       		.uleb128 0x3b
 4378 00c4 05       		.uleb128 0x5
 4379 00c5 49       		.uleb128 0x49
 4380 00c6 13       		.uleb128 0x13
 4381 00c7 38       		.uleb128 0x38
 4382 00c8 0B       		.uleb128 0xb
 4383 00c9 00       		.byte	0
 4384 00ca 00       		.byte	0
 4385 00cb 12       		.uleb128 0x12
 4386 00cc 26       		.uleb128 0x26
 4387 00cd 00       		.byte	0
 4388 00ce 00       		.byte	0
 4389 00cf 00       		.byte	0
 4390 00d0 13       		.uleb128 0x13
 4391 00d1 0F       		.uleb128 0xf
 4392 00d2 00       		.byte	0
 4393 00d3 0B       		.uleb128 0xb
 4394 00d4 0B       		.uleb128 0xb
 4395 00d5 00       		.byte	0
 4396 00d6 00       		.byte	0
 4397 00d7 14       		.uleb128 0x14
 4398 00d8 2E       		.uleb128 0x2e
 4399 00d9 01       		.byte	0x1
 4400 00da 03       		.uleb128 0x3
 4401 00db 0E       		.uleb128 0xe
 4402 00dc 3A       		.uleb128 0x3a
 4403 00dd 0B       		.uleb128 0xb
 4404 00de 3B       		.uleb128 0x3b
 4405 00df 05       		.uleb128 0x5
 4406 00e0 27       		.uleb128 0x27
 4407 00e1 19       		.uleb128 0x19
 4408 00e2 49       		.uleb128 0x49
 4409 00e3 13       		.uleb128 0x13
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 140


 4410 00e4 11       		.uleb128 0x11
 4411 00e5 01       		.uleb128 0x1
 4412 00e6 12       		.uleb128 0x12
 4413 00e7 06       		.uleb128 0x6
 4414 00e8 40       		.uleb128 0x40
 4415 00e9 18       		.uleb128 0x18
 4416 00ea 9642     		.uleb128 0x2116
 4417 00ec 19       		.uleb128 0x19
 4418 00ed 01       		.uleb128 0x1
 4419 00ee 13       		.uleb128 0x13
 4420 00ef 00       		.byte	0
 4421 00f0 00       		.byte	0
 4422 00f1 15       		.uleb128 0x15
 4423 00f2 05       		.uleb128 0x5
 4424 00f3 00       		.byte	0
 4425 00f4 03       		.uleb128 0x3
 4426 00f5 0E       		.uleb128 0xe
 4427 00f6 3A       		.uleb128 0x3a
 4428 00f7 0B       		.uleb128 0xb
 4429 00f8 3B       		.uleb128 0x3b
 4430 00f9 05       		.uleb128 0x5
 4431 00fa 49       		.uleb128 0x49
 4432 00fb 13       		.uleb128 0x13
 4433 00fc 02       		.uleb128 0x2
 4434 00fd 17       		.uleb128 0x17
 4435 00fe 00       		.byte	0
 4436 00ff 00       		.byte	0
 4437 0100 16       		.uleb128 0x16
 4438 0101 34       		.uleb128 0x34
 4439 0102 00       		.byte	0
 4440 0103 03       		.uleb128 0x3
 4441 0104 0E       		.uleb128 0xe
 4442 0105 3A       		.uleb128 0x3a
 4443 0106 0B       		.uleb128 0xb
 4444 0107 3B       		.uleb128 0x3b
 4445 0108 05       		.uleb128 0x5
 4446 0109 49       		.uleb128 0x49
 4447 010a 13       		.uleb128 0x13
 4448 010b 02       		.uleb128 0x2
 4449 010c 17       		.uleb128 0x17
 4450 010d 00       		.byte	0
 4451 010e 00       		.byte	0
 4452 010f 17       		.uleb128 0x17
 4453 0110 2E       		.uleb128 0x2e
 4454 0111 00       		.byte	0
 4455 0112 3F       		.uleb128 0x3f
 4456 0113 19       		.uleb128 0x19
 4457 0114 03       		.uleb128 0x3
 4458 0115 0E       		.uleb128 0xe
 4459 0116 3A       		.uleb128 0x3a
 4460 0117 0B       		.uleb128 0xb
 4461 0118 3B       		.uleb128 0x3b
 4462 0119 0B       		.uleb128 0xb
 4463 011a 27       		.uleb128 0x27
 4464 011b 19       		.uleb128 0x19
 4465 011c 49       		.uleb128 0x49
 4466 011d 13       		.uleb128 0x13
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 141


 4467 011e 11       		.uleb128 0x11
 4468 011f 01       		.uleb128 0x1
 4469 0120 12       		.uleb128 0x12
 4470 0121 06       		.uleb128 0x6
 4471 0122 40       		.uleb128 0x40
 4472 0123 18       		.uleb128 0x18
 4473 0124 9742     		.uleb128 0x2117
 4474 0126 19       		.uleb128 0x19
 4475 0127 00       		.byte	0
 4476 0128 00       		.byte	0
 4477 0129 18       		.uleb128 0x18
 4478 012a 2E       		.uleb128 0x2e
 4479 012b 01       		.byte	0x1
 4480 012c 3F       		.uleb128 0x3f
 4481 012d 19       		.uleb128 0x19
 4482 012e 03       		.uleb128 0x3
 4483 012f 0E       		.uleb128 0xe
 4484 0130 3A       		.uleb128 0x3a
 4485 0131 0B       		.uleb128 0xb
 4486 0132 3B       		.uleb128 0x3b
 4487 0133 05       		.uleb128 0x5
 4488 0134 27       		.uleb128 0x27
 4489 0135 19       		.uleb128 0x19
 4490 0136 49       		.uleb128 0x49
 4491 0137 13       		.uleb128 0x13
 4492 0138 11       		.uleb128 0x11
 4493 0139 01       		.uleb128 0x1
 4494 013a 12       		.uleb128 0x12
 4495 013b 06       		.uleb128 0x6
 4496 013c 40       		.uleb128 0x40
 4497 013d 18       		.uleb128 0x18
 4498 013e 9742     		.uleb128 0x2117
 4499 0140 19       		.uleb128 0x19
 4500 0141 01       		.uleb128 0x1
 4501 0142 13       		.uleb128 0x13
 4502 0143 00       		.byte	0
 4503 0144 00       		.byte	0
 4504 0145 19       		.uleb128 0x19
 4505 0146 898201   		.uleb128 0x4109
 4506 0149 00       		.byte	0
 4507 014a 11       		.uleb128 0x11
 4508 014b 01       		.uleb128 0x1
 4509 014c 31       		.uleb128 0x31
 4510 014d 13       		.uleb128 0x13
 4511 014e 00       		.byte	0
 4512 014f 00       		.byte	0
 4513 0150 1A       		.uleb128 0x1a
 4514 0151 898201   		.uleb128 0x4109
 4515 0154 01       		.byte	0x1
 4516 0155 11       		.uleb128 0x11
 4517 0156 01       		.uleb128 0x1
 4518 0157 31       		.uleb128 0x31
 4519 0158 13       		.uleb128 0x13
 4520 0159 01       		.uleb128 0x1
 4521 015a 13       		.uleb128 0x13
 4522 015b 00       		.byte	0
 4523 015c 00       		.byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 142


 4524 015d 1B       		.uleb128 0x1b
 4525 015e 8A8201   		.uleb128 0x410a
 4526 0161 00       		.byte	0
 4527 0162 02       		.uleb128 0x2
 4528 0163 18       		.uleb128 0x18
 4529 0164 9142     		.uleb128 0x2111
 4530 0166 18       		.uleb128 0x18
 4531 0167 00       		.byte	0
 4532 0168 00       		.byte	0
 4533 0169 1C       		.uleb128 0x1c
 4534 016a 2E       		.uleb128 0x2e
 4535 016b 01       		.byte	0x1
 4536 016c 3F       		.uleb128 0x3f
 4537 016d 19       		.uleb128 0x19
 4538 016e 03       		.uleb128 0x3
 4539 016f 0E       		.uleb128 0xe
 4540 0170 3A       		.uleb128 0x3a
 4541 0171 0B       		.uleb128 0xb
 4542 0172 3B       		.uleb128 0x3b
 4543 0173 05       		.uleb128 0x5
 4544 0174 27       		.uleb128 0x27
 4545 0175 19       		.uleb128 0x19
 4546 0176 11       		.uleb128 0x11
 4547 0177 01       		.uleb128 0x1
 4548 0178 12       		.uleb128 0x12
 4549 0179 06       		.uleb128 0x6
 4550 017a 40       		.uleb128 0x40
 4551 017b 18       		.uleb128 0x18
 4552 017c 9742     		.uleb128 0x2117
 4553 017e 19       		.uleb128 0x19
 4554 017f 01       		.uleb128 0x1
 4555 0180 13       		.uleb128 0x13
 4556 0181 00       		.byte	0
 4557 0182 00       		.byte	0
 4558 0183 1D       		.uleb128 0x1d
 4559 0184 34       		.uleb128 0x34
 4560 0185 00       		.byte	0
 4561 0186 03       		.uleb128 0x3
 4562 0187 0E       		.uleb128 0xe
 4563 0188 3A       		.uleb128 0x3a
 4564 0189 0B       		.uleb128 0xb
 4565 018a 3B       		.uleb128 0x3b
 4566 018b 05       		.uleb128 0x5
 4567 018c 49       		.uleb128 0x49
 4568 018d 13       		.uleb128 0x13
 4569 018e 1C       		.uleb128 0x1c
 4570 018f 0B       		.uleb128 0xb
 4571 0190 00       		.byte	0
 4572 0191 00       		.byte	0
 4573 0192 1E       		.uleb128 0x1e
 4574 0193 26       		.uleb128 0x26
 4575 0194 00       		.byte	0
 4576 0195 49       		.uleb128 0x49
 4577 0196 13       		.uleb128 0x13
 4578 0197 00       		.byte	0
 4579 0198 00       		.byte	0
 4580 0199 1F       		.uleb128 0x1f
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 143


 4581 019a 898201   		.uleb128 0x4109
 4582 019d 01       		.byte	0x1
 4583 019e 11       		.uleb128 0x11
 4584 019f 01       		.uleb128 0x1
 4585 01a0 31       		.uleb128 0x31
 4586 01a1 13       		.uleb128 0x13
 4587 01a2 00       		.byte	0
 4588 01a3 00       		.byte	0
 4589 01a4 20       		.uleb128 0x20
 4590 01a5 34       		.uleb128 0x34
 4591 01a6 00       		.byte	0
 4592 01a7 03       		.uleb128 0x3
 4593 01a8 0E       		.uleb128 0xe
 4594 01a9 3A       		.uleb128 0x3a
 4595 01aa 0B       		.uleb128 0xb
 4596 01ab 3B       		.uleb128 0x3b
 4597 01ac 05       		.uleb128 0x5
 4598 01ad 49       		.uleb128 0x49
 4599 01ae 13       		.uleb128 0x13
 4600 01af 02       		.uleb128 0x2
 4601 01b0 18       		.uleb128 0x18
 4602 01b1 00       		.byte	0
 4603 01b2 00       		.byte	0
 4604 01b3 21       		.uleb128 0x21
 4605 01b4 05       		.uleb128 0x5
 4606 01b5 00       		.byte	0
 4607 01b6 03       		.uleb128 0x3
 4608 01b7 0E       		.uleb128 0xe
 4609 01b8 3A       		.uleb128 0x3a
 4610 01b9 0B       		.uleb128 0xb
 4611 01ba 3B       		.uleb128 0x3b
 4612 01bb 05       		.uleb128 0x5
 4613 01bc 49       		.uleb128 0x49
 4614 01bd 13       		.uleb128 0x13
 4615 01be 02       		.uleb128 0x2
 4616 01bf 18       		.uleb128 0x18
 4617 01c0 00       		.byte	0
 4618 01c1 00       		.byte	0
 4619 01c2 22       		.uleb128 0x22
 4620 01c3 2E       		.uleb128 0x2e
 4621 01c4 01       		.byte	0x1
 4622 01c5 03       		.uleb128 0x3
 4623 01c6 0E       		.uleb128 0xe
 4624 01c7 3A       		.uleb128 0x3a
 4625 01c8 0B       		.uleb128 0xb
 4626 01c9 3B       		.uleb128 0x3b
 4627 01ca 05       		.uleb128 0x5
 4628 01cb 27       		.uleb128 0x27
 4629 01cc 19       		.uleb128 0x19
 4630 01cd 11       		.uleb128 0x11
 4631 01ce 01       		.uleb128 0x1
 4632 01cf 12       		.uleb128 0x12
 4633 01d0 06       		.uleb128 0x6
 4634 01d1 40       		.uleb128 0x40
 4635 01d2 18       		.uleb128 0x18
 4636 01d3 9742     		.uleb128 0x2117
 4637 01d5 19       		.uleb128 0x19
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 144


 4638 01d6 01       		.uleb128 0x1
 4639 01d7 13       		.uleb128 0x13
 4640 01d8 00       		.byte	0
 4641 01d9 00       		.byte	0
 4642 01da 23       		.uleb128 0x23
 4643 01db 34       		.uleb128 0x34
 4644 01dc 00       		.byte	0
 4645 01dd 03       		.uleb128 0x3
 4646 01de 0E       		.uleb128 0xe
 4647 01df 3A       		.uleb128 0x3a
 4648 01e0 0B       		.uleb128 0xb
 4649 01e1 3B       		.uleb128 0x3b
 4650 01e2 05       		.uleb128 0x5
 4651 01e3 49       		.uleb128 0x49
 4652 01e4 13       		.uleb128 0x13
 4653 01e5 3F       		.uleb128 0x3f
 4654 01e6 19       		.uleb128 0x19
 4655 01e7 3C       		.uleb128 0x3c
 4656 01e8 19       		.uleb128 0x19
 4657 01e9 00       		.byte	0
 4658 01ea 00       		.byte	0
 4659 01eb 24       		.uleb128 0x24
 4660 01ec 34       		.uleb128 0x34
 4661 01ed 00       		.byte	0
 4662 01ee 03       		.uleb128 0x3
 4663 01ef 0E       		.uleb128 0xe
 4664 01f0 3A       		.uleb128 0x3a
 4665 01f1 0B       		.uleb128 0xb
 4666 01f2 3B       		.uleb128 0x3b
 4667 01f3 0B       		.uleb128 0xb
 4668 01f4 49       		.uleb128 0x49
 4669 01f5 13       		.uleb128 0x13
 4670 01f6 3F       		.uleb128 0x3f
 4671 01f7 19       		.uleb128 0x19
 4672 01f8 02       		.uleb128 0x2
 4673 01f9 18       		.uleb128 0x18
 4674 01fa 00       		.byte	0
 4675 01fb 00       		.byte	0
 4676 01fc 25       		.uleb128 0x25
 4677 01fd 2E       		.uleb128 0x2e
 4678 01fe 00       		.byte	0
 4679 01ff 3F       		.uleb128 0x3f
 4680 0200 19       		.uleb128 0x19
 4681 0201 3C       		.uleb128 0x3c
 4682 0202 19       		.uleb128 0x19
 4683 0203 6E       		.uleb128 0x6e
 4684 0204 0E       		.uleb128 0xe
 4685 0205 03       		.uleb128 0x3
 4686 0206 0E       		.uleb128 0xe
 4687 0207 3A       		.uleb128 0x3a
 4688 0208 0B       		.uleb128 0xb
 4689 0209 3B       		.uleb128 0x3b
 4690 020a 05       		.uleb128 0x5
 4691 020b 00       		.byte	0
 4692 020c 00       		.byte	0
 4693 020d 26       		.uleb128 0x26
 4694 020e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 145


 4695 020f 00       		.byte	0
 4696 0210 3F       		.uleb128 0x3f
 4697 0211 19       		.uleb128 0x19
 4698 0212 3C       		.uleb128 0x3c
 4699 0213 19       		.uleb128 0x19
 4700 0214 6E       		.uleb128 0x6e
 4701 0215 0E       		.uleb128 0xe
 4702 0216 03       		.uleb128 0x3
 4703 0217 0E       		.uleb128 0xe
 4704 0218 3A       		.uleb128 0x3a
 4705 0219 0B       		.uleb128 0xb
 4706 021a 3B       		.uleb128 0x3b
 4707 021b 0B       		.uleb128 0xb
 4708 021c 00       		.byte	0
 4709 021d 00       		.byte	0
 4710 021e 00       		.byte	0
 4711              		.section	.debug_loc,"",%progbits
 4712              	.Ldebug_loc0:
 4713              	.LLST0:
 4714 0000 00000000 		.4byte	.LVL0
 4715 0004 14000000 		.4byte	.LVL3
 4716 0008 0100     		.2byte	0x1
 4717 000a 50       		.byte	0x50
 4718 000b 14000000 		.4byte	.LVL3
 4719 000f 76000000 		.4byte	.LVL9
 4720 0013 0100     		.2byte	0x1
 4721 0015 54       		.byte	0x54
 4722 0016 76000000 		.4byte	.LVL9
 4723 001a 84000000 		.4byte	.LFE21
 4724 001e 0400     		.2byte	0x4
 4725 0020 F3       		.byte	0xf3
 4726 0021 01       		.uleb128 0x1
 4727 0022 50       		.byte	0x50
 4728 0023 9F       		.byte	0x9f
 4729 0024 00000000 		.4byte	0
 4730 0028 00000000 		.4byte	0
 4731              	.LLST1:
 4732 002c 00000000 		.4byte	.LVL0
 4733 0030 12000000 		.4byte	.LVL2
 4734 0034 0100     		.2byte	0x1
 4735 0036 51       		.byte	0x51
 4736 0037 12000000 		.4byte	.LVL2
 4737 003b 76000000 		.4byte	.LVL10
 4738 003f 0100     		.2byte	0x1
 4739 0041 55       		.byte	0x55
 4740 0042 76000000 		.4byte	.LVL10
 4741 0046 84000000 		.4byte	.LFE21
 4742 004a 0400     		.2byte	0x4
 4743 004c F3       		.byte	0xf3
 4744 004d 01       		.uleb128 0x1
 4745 004e 51       		.byte	0x51
 4746 004f 9F       		.byte	0x9f
 4747 0050 00000000 		.4byte	0
 4748 0054 00000000 		.4byte	0
 4749              	.LLST2:
 4750 0058 06000000 		.4byte	.LVL1
 4751 005c 76000000 		.4byte	.LVL8
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 146


 4752 0060 0200     		.2byte	0x2
 4753 0062 30       		.byte	0x30
 4754 0063 9F       		.byte	0x9f
 4755 0064 76000000 		.4byte	.LVL8
 4756 0068 84000000 		.4byte	.LFE21
 4757 006c 0100     		.2byte	0x1
 4758 006e 50       		.byte	0x50
 4759 006f 00000000 		.4byte	0
 4760 0073 00000000 		.4byte	0
 4761              	.LLST3:
 4762 0077 00000000 		.4byte	.LVL11
 4763 007b 20000000 		.4byte	.LVL15
 4764 007f 0100     		.2byte	0x1
 4765 0081 50       		.byte	0x50
 4766 0082 20000000 		.4byte	.LVL15
 4767 0086 23000000 		.4byte	.LVL16-1
 4768 008a 0100     		.2byte	0x1
 4769 008c 51       		.byte	0x51
 4770 008d 23000000 		.4byte	.LVL16-1
 4771 0091 38000000 		.4byte	.LVL21
 4772 0095 0400     		.2byte	0x4
 4773 0097 F3       		.byte	0xf3
 4774 0098 01       		.uleb128 0x1
 4775 0099 50       		.byte	0x50
 4776 009a 9F       		.byte	0x9f
 4777 009b 38000000 		.4byte	.LVL21
 4778 009f 3E000000 		.4byte	.LVL24
 4779 00a3 0100     		.2byte	0x1
 4780 00a5 50       		.byte	0x50
 4781 00a6 3E000000 		.4byte	.LVL24
 4782 00aa 42000000 		.4byte	.LFE22
 4783 00ae 0400     		.2byte	0x4
 4784 00b0 F3       		.byte	0xf3
 4785 00b1 01       		.uleb128 0x1
 4786 00b2 50       		.byte	0x50
 4787 00b3 9F       		.byte	0x9f
 4788 00b4 00000000 		.4byte	0
 4789 00b8 00000000 		.4byte	0
 4790              	.LLST4:
 4791 00bc 00000000 		.4byte	.LVL11
 4792 00c0 1E000000 		.4byte	.LVL14
 4793 00c4 0100     		.2byte	0x1
 4794 00c6 51       		.byte	0x51
 4795 00c7 1E000000 		.4byte	.LVL14
 4796 00cb 38000000 		.4byte	.LVL21
 4797 00cf 0400     		.2byte	0x4
 4798 00d1 F3       		.byte	0xf3
 4799 00d2 01       		.uleb128 0x1
 4800 00d3 51       		.byte	0x51
 4801 00d4 9F       		.byte	0x9f
 4802 00d5 38000000 		.4byte	.LVL21
 4803 00d9 3E000000 		.4byte	.LVL24
 4804 00dd 0100     		.2byte	0x1
 4805 00df 51       		.byte	0x51
 4806 00e0 3E000000 		.4byte	.LVL24
 4807 00e4 42000000 		.4byte	.LFE22
 4808 00e8 0400     		.2byte	0x4
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 147


 4809 00ea F3       		.byte	0xf3
 4810 00eb 01       		.uleb128 0x1
 4811 00ec 51       		.byte	0x51
 4812 00ed 9F       		.byte	0x9f
 4813 00ee 00000000 		.4byte	0
 4814 00f2 00000000 		.4byte	0
 4815              	.LLST5:
 4816 00f6 24000000 		.4byte	.LVL16
 4817 00fa 28000000 		.4byte	.LVL17
 4818 00fe 0200     		.2byte	0x2
 4819 0100 30       		.byte	0x30
 4820 0101 9F       		.byte	0x9f
 4821 0102 28000000 		.4byte	.LVL17
 4822 0106 38000000 		.4byte	.LVL21
 4823 010a 0100     		.2byte	0x1
 4824 010c 53       		.byte	0x53
 4825 010d 3E000000 		.4byte	.LVL24
 4826 0111 42000000 		.4byte	.LFE22
 4827 0115 0100     		.2byte	0x1
 4828 0117 53       		.byte	0x53
 4829 0118 00000000 		.4byte	0
 4830 011c 00000000 		.4byte	0
 4831              	.LLST6:
 4832 0120 10000000 		.4byte	.LVL12
 4833 0124 1C000000 		.4byte	.LVL13
 4834 0128 0100     		.2byte	0x1
 4835 012a 53       		.byte	0x53
 4836 012b 38000000 		.4byte	.LVL21
 4837 012f 3A000000 		.4byte	.LVL22
 4838 0133 0100     		.2byte	0x1
 4839 0135 53       		.byte	0x53
 4840 0136 3C000000 		.4byte	.LVL23
 4841 013a 3E000000 		.4byte	.LVL24
 4842 013e 0100     		.2byte	0x1
 4843 0140 53       		.byte	0x53
 4844 0141 00000000 		.4byte	0
 4845 0145 00000000 		.4byte	0
 4846              	.LLST7:
 4847 0149 24000000 		.4byte	.LVL16
 4848 014d 38000000 		.4byte	.LVL21
 4849 0151 0100     		.2byte	0x1
 4850 0153 50       		.byte	0x50
 4851 0154 00000000 		.4byte	0
 4852 0158 00000000 		.4byte	0
 4853              	.LLST8:
 4854 015c 00000000 		.4byte	.LVL25
 4855 0160 37000000 		.4byte	.LVL27-1
 4856 0164 0100     		.2byte	0x1
 4857 0166 50       		.byte	0x50
 4858 0167 37000000 		.4byte	.LVL27-1
 4859 016b 40000000 		.4byte	.LFE2
 4860 016f 0400     		.2byte	0x4
 4861 0171 F3       		.byte	0xf3
 4862 0172 01       		.uleb128 0x1
 4863 0173 50       		.byte	0x50
 4864 0174 9F       		.byte	0x9f
 4865 0175 00000000 		.4byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 148


 4866 0179 00000000 		.4byte	0
 4867              	.LLST9:
 4868 017d 30000000 		.4byte	.LVL26
 4869 0181 3A000000 		.4byte	.LVL28
 4870 0185 0100     		.2byte	0x1
 4871 0187 54       		.byte	0x54
 4872 0188 3A000000 		.4byte	.LVL28
 4873 018c 40000000 		.4byte	.LFE2
 4874 0190 0100     		.2byte	0x1
 4875 0192 50       		.byte	0x50
 4876 0193 00000000 		.4byte	0
 4877 0197 00000000 		.4byte	0
 4878              	.LLST10:
 4879 019b 02000000 		.4byte	.LVL29
 4880 019f 22000000 		.4byte	.LVL31
 4881 01a3 0200     		.2byte	0x2
 4882 01a5 30       		.byte	0x30
 4883 01a6 9F       		.byte	0x9f
 4884 01a7 22000000 		.4byte	.LVL31
 4885 01ab 2C000000 		.4byte	.LFE3
 4886 01af 0100     		.2byte	0x1
 4887 01b1 50       		.byte	0x50
 4888 01b2 00000000 		.4byte	0
 4889 01b6 00000000 		.4byte	0
 4890              	.LLST11:
 4891 01ba 02000000 		.4byte	.LVL32
 4892 01be 12000000 		.4byte	.LVL33
 4893 01c2 0300     		.2byte	0x3
 4894 01c4 09       		.byte	0x9
 4895 01c5 FF       		.byte	0xff
 4896 01c6 9F       		.byte	0x9f
 4897 01c7 12000000 		.4byte	.LVL33
 4898 01cb 14000000 		.4byte	.LVL34
 4899 01cf 0100     		.2byte	0x1
 4900 01d1 50       		.byte	0x50
 4901 01d2 18000000 		.4byte	.LVL35
 4902 01d6 31000000 		.4byte	.LVL36-1
 4903 01da 0100     		.2byte	0x1
 4904 01dc 50       		.byte	0x50
 4905 01dd 32000000 		.4byte	.LVL36
 4906 01e1 3C000000 		.4byte	.LVL38
 4907 01e5 0100     		.2byte	0x1
 4908 01e7 50       		.byte	0x50
 4909 01e8 3C000000 		.4byte	.LVL38
 4910 01ec 3E000000 		.4byte	.LVL39
 4911 01f0 0300     		.2byte	0x3
 4912 01f2 09       		.byte	0x9
 4913 01f3 FF       		.byte	0xff
 4914 01f4 9F       		.byte	0x9f
 4915 01f5 3E000000 		.4byte	.LVL39
 4916 01f9 48000000 		.4byte	.LFE4
 4917 01fd 0100     		.2byte	0x1
 4918 01ff 50       		.byte	0x50
 4919 0200 00000000 		.4byte	0
 4920 0204 00000000 		.4byte	0
 4921              	.LLST12:
 4922 0208 12000000 		.4byte	.LVL33
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 149


 4923 020c 3C000000 		.4byte	.LVL38
 4924 0210 0100     		.2byte	0x1
 4925 0212 54       		.byte	0x54
 4926 0213 00000000 		.4byte	0
 4927 0217 00000000 		.4byte	0
 4928              	.LLST13:
 4929 021b 00000000 		.4byte	.LVL40
 4930 021f 4B000000 		.4byte	.LVL42-1
 4931 0223 0100     		.2byte	0x1
 4932 0225 50       		.byte	0x50
 4933 0226 4B000000 		.4byte	.LVL42-1
 4934 022a 58000000 		.4byte	.LFE5
 4935 022e 0400     		.2byte	0x4
 4936 0230 F3       		.byte	0xf3
 4937 0231 01       		.uleb128 0x1
 4938 0232 50       		.byte	0x50
 4939 0233 9F       		.byte	0x9f
 4940 0234 00000000 		.4byte	0
 4941 0238 00000000 		.4byte	0
 4942              	.LLST14:
 4943 023c 00000000 		.4byte	.LVL40
 4944 0240 4B000000 		.4byte	.LVL42-1
 4945 0244 0100     		.2byte	0x1
 4946 0246 51       		.byte	0x51
 4947 0247 4B000000 		.4byte	.LVL42-1
 4948 024b 58000000 		.4byte	.LFE5
 4949 024f 0400     		.2byte	0x4
 4950 0251 F3       		.byte	0xf3
 4951 0252 01       		.uleb128 0x1
 4952 0253 51       		.byte	0x51
 4953 0254 9F       		.byte	0x9f
 4954 0255 00000000 		.4byte	0
 4955 0259 00000000 		.4byte	0
 4956              	.LLST15:
 4957 025d 44000000 		.4byte	.LVL41
 4958 0261 4E000000 		.4byte	.LVL43
 4959 0265 0100     		.2byte	0x1
 4960 0267 54       		.byte	0x54
 4961 0268 4E000000 		.4byte	.LVL43
 4962 026c 58000000 		.4byte	.LFE5
 4963 0270 0100     		.2byte	0x1
 4964 0272 50       		.byte	0x50
 4965 0273 00000000 		.4byte	0
 4966 0277 00000000 		.4byte	0
 4967              	.LLST16:
 4968 027b 02000000 		.4byte	.LVL44
 4969 027f 22000000 		.4byte	.LVL46
 4970 0283 0200     		.2byte	0x2
 4971 0285 30       		.byte	0x30
 4972 0286 9F       		.byte	0x9f
 4973 0287 22000000 		.4byte	.LVL46
 4974 028b 2C000000 		.4byte	.LFE6
 4975 028f 0100     		.2byte	0x1
 4976 0291 50       		.byte	0x50
 4977 0292 00000000 		.4byte	0
 4978 0296 00000000 		.4byte	0
 4979              	.LLST17:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 150


 4980 029a 00000000 		.4byte	.LVL47
 4981 029e 08000000 		.4byte	.LVL48
 4982 02a2 0100     		.2byte	0x1
 4983 02a4 50       		.byte	0x50
 4984 02a5 08000000 		.4byte	.LVL48
 4985 02a9 BC000000 		.4byte	.LFE8
 4986 02ad 0400     		.2byte	0x4
 4987 02af F3       		.byte	0xf3
 4988 02b0 01       		.uleb128 0x1
 4989 02b1 50       		.byte	0x50
 4990 02b2 9F       		.byte	0x9f
 4991 02b3 00000000 		.4byte	0
 4992 02b7 00000000 		.4byte	0
 4993              	.LLST18:
 4994 02bb 00000000 		.4byte	.LVL47
 4995 02bf 12000000 		.4byte	.LVL50
 4996 02c3 0100     		.2byte	0x1
 4997 02c5 51       		.byte	0x51
 4998 02c6 12000000 		.4byte	.LVL50
 4999 02ca BC000000 		.4byte	.LFE8
 5000 02ce 0400     		.2byte	0x4
 5001 02d0 F3       		.byte	0xf3
 5002 02d1 01       		.uleb128 0x1
 5003 02d2 51       		.byte	0x51
 5004 02d3 9F       		.byte	0x9f
 5005 02d4 00000000 		.4byte	0
 5006 02d8 00000000 		.4byte	0
 5007              	.LLST19:
 5008 02dc 00000000 		.4byte	.LVL47
 5009 02e0 0C000000 		.4byte	.LVL49
 5010 02e4 0100     		.2byte	0x1
 5011 02e6 52       		.byte	0x52
 5012 02e7 0C000000 		.4byte	.LVL49
 5013 02eb B4000000 		.4byte	.LVL66
 5014 02ef 0100     		.2byte	0x1
 5015 02f1 56       		.byte	0x56
 5016 02f2 B4000000 		.4byte	.LVL66
 5017 02f6 BC000000 		.4byte	.LFE8
 5018 02fa 0400     		.2byte	0x4
 5019 02fc F3       		.byte	0xf3
 5020 02fd 01       		.uleb128 0x1
 5021 02fe 52       		.byte	0x52
 5022 02ff 9F       		.byte	0x9f
 5023 0300 00000000 		.4byte	0
 5024 0304 00000000 		.4byte	0
 5025              	.LLST20:
 5026 0308 16000000 		.4byte	.LVL51
 5027 030c 1A000000 		.4byte	.LVL52
 5028 0310 0200     		.2byte	0x2
 5029 0312 30       		.byte	0x30
 5030 0313 9F       		.byte	0x9f
 5031 0314 1A000000 		.4byte	.LVL52
 5032 0318 B4000000 		.4byte	.LVL65
 5033 031c 0100     		.2byte	0x1
 5034 031e 55       		.byte	0x55
 5035 031f 00000000 		.4byte	0
 5036 0323 00000000 		.4byte	0
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 151


 5037              	.LLST21:
 5038 0327 1E000000 		.4byte	.LVL53
 5039 032b 3D000000 		.4byte	.LVL54-1
 5040 032f 0100     		.2byte	0x1
 5041 0331 50       		.byte	0x50
 5042 0332 54000000 		.4byte	.LVL55
 5043 0336 73000000 		.4byte	.LVL56-1
 5044 033a 0100     		.2byte	0x1
 5045 033c 50       		.byte	0x50
 5046 033d 7A000000 		.4byte	.LVL57
 5047 0341 8B000000 		.4byte	.LVL58-1
 5048 0345 0100     		.2byte	0x1
 5049 0347 50       		.byte	0x50
 5050 0348 9A000000 		.4byte	.LVL60
 5051 034c AB000000 		.4byte	.LVL61-1
 5052 0350 0100     		.2byte	0x1
 5053 0352 50       		.byte	0x50
 5054 0353 00000000 		.4byte	0
 5055 0357 00000000 		.4byte	0
 5056              	.LLST22:
 5057 035b 16000000 		.4byte	.LVL51
 5058 035f B4000000 		.4byte	.LVL64
 5059 0363 0100     		.2byte	0x1
 5060 0365 54       		.byte	0x54
 5061 0366 00000000 		.4byte	0
 5062 036a 00000000 		.4byte	0
 5063              	.LLST23:
 5064 036e 00000000 		.4byte	.LVL67
 5065 0372 34000000 		.4byte	.LVL71
 5066 0376 0100     		.2byte	0x1
 5067 0378 50       		.byte	0x50
 5068 0379 34000000 		.4byte	.LVL71
 5069 037d 7E000000 		.4byte	.LVL89
 5070 0381 0100     		.2byte	0x1
 5071 0383 58       		.byte	0x58
 5072 0384 7E000000 		.4byte	.LVL89
 5073 0388 8C000000 		.4byte	.LFE11
 5074 038c 0400     		.2byte	0x4
 5075 038e F3       		.byte	0xf3
 5076 038f 01       		.uleb128 0x1
 5077 0390 50       		.byte	0x50
 5078 0391 9F       		.byte	0x9f
 5079 0392 00000000 		.4byte	0
 5080 0396 00000000 		.4byte	0
 5081              	.LLST24:
 5082 039a 38000000 		.4byte	.LVL72
 5083 039e 6F000000 		.4byte	.LVL83-1
 5084 03a2 0100     		.2byte	0x1
 5085 03a4 50       		.byte	0x50
 5086 03a5 00000000 		.4byte	0
 5087 03a9 00000000 		.4byte	0
 5088              	.LLST25:
 5089 03ad 2E000000 		.4byte	.LVL70
 5090 03b1 34000000 		.4byte	.LVL71
 5091 03b5 0200     		.2byte	0x2
 5092 03b7 30       		.byte	0x30
 5093 03b8 9F       		.byte	0x9f
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 152


 5094 03b9 34000000 		.4byte	.LVL71
 5095 03bd 7E000000 		.4byte	.LVL88
 5096 03c1 0100     		.2byte	0x1
 5097 03c3 55       		.byte	0x55
 5098 03c4 00000000 		.4byte	0
 5099 03c8 00000000 		.4byte	0
 5100              	.LLST26:
 5101 03cc 1E000000 		.4byte	.LVL68
 5102 03d0 28000000 		.4byte	.LVL69
 5103 03d4 0200     		.2byte	0x2
 5104 03d6 30       		.byte	0x30
 5105 03d7 9F       		.byte	0x9f
 5106 03d8 2E000000 		.4byte	.LVL70
 5107 03dc 7E000000 		.4byte	.LVL90
 5108 03e0 0100     		.2byte	0x1
 5109 03e2 59       		.byte	0x59
 5110 03e3 00000000 		.4byte	0
 5111 03e7 00000000 		.4byte	0
 5112              	.LLST27:
 5113 03eb 1E000000 		.4byte	.LVL68
 5114 03ef 28000000 		.4byte	.LVL69
 5115 03f3 0200     		.2byte	0x2
 5116 03f5 35       		.byte	0x35
 5117 03f6 9F       		.byte	0x9f
 5118 03f7 2E000000 		.4byte	.LVL70
 5119 03fb 7E000000 		.4byte	.LVL91
 5120 03ff 0100     		.2byte	0x1
 5121 0401 5A       		.byte	0x5a
 5122 0402 00000000 		.4byte	0
 5123 0406 00000000 		.4byte	0
 5124              	.LLST28:
 5125 040a 46000000 		.4byte	.LVL75
 5126 040e 58000000 		.4byte	.LVL78
 5127 0412 0100     		.2byte	0x1
 5128 0414 52       		.byte	0x52
 5129 0415 58000000 		.4byte	.LVL78
 5130 0419 62000000 		.4byte	.LVL80
 5131 041d 0200     		.2byte	0x2
 5132 041f 76       		.byte	0x76
 5133 0420 00       		.sleb128 0
 5134 0421 66000000 		.4byte	.LVL81
 5135 0425 6F000000 		.4byte	.LVL83-1
 5136 0429 0100     		.2byte	0x1
 5137 042b 53       		.byte	0x53
 5138 042c 00000000 		.4byte	0
 5139 0430 00000000 		.4byte	0
 5140              	.LLST29:
 5141 0434 3C000000 		.4byte	.LVL73
 5142 0438 66000000 		.4byte	.LVL81
 5143 043c 0100     		.2byte	0x1
 5144 043e 53       		.byte	0x53
 5145 043f 00000000 		.4byte	0
 5146 0443 00000000 		.4byte	0
 5147              	.LLST30:
 5148 0447 34000000 		.4byte	.LVL71
 5149 044b 7E000000 		.4byte	.LVL87
 5150 044f 0100     		.2byte	0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 153


 5151 0451 54       		.byte	0x54
 5152 0452 00000000 		.4byte	0
 5153 0456 00000000 		.4byte	0
 5154              	.LLST31:
 5155 045a 16000000 		.4byte	.LVL93
 5156 045e 29000000 		.4byte	.LVL94-1
 5157 0462 0100     		.2byte	0x1
 5158 0464 50       		.byte	0x50
 5159 0465 29000000 		.4byte	.LVL94-1
 5160 0469 2C000000 		.4byte	.LVL95
 5161 046d 0100     		.2byte	0x1
 5162 046f 54       		.byte	0x54
 5163 0470 2C000000 		.4byte	.LVL95
 5164 0474 54000000 		.4byte	.LVL96
 5165 0478 0100     		.2byte	0x1
 5166 047a 50       		.byte	0x50
 5167 047b 54000000 		.4byte	.LVL96
 5168 047f 58000000 		.4byte	.LVL97
 5169 0483 0200     		.2byte	0x2
 5170 0485 30       		.byte	0x30
 5171 0486 9F       		.byte	0x9f
 5172 0487 58000000 		.4byte	.LVL97
 5173 048b 6A000000 		.4byte	.LVL98
 5174 048f 0100     		.2byte	0x1
 5175 0491 50       		.byte	0x50
 5176 0492 6A000000 		.4byte	.LVL98
 5177 0496 6E000000 		.4byte	.LVL99
 5178 049a 0100     		.2byte	0x1
 5179 049c 54       		.byte	0x54
 5180 049d 00000000 		.4byte	0
 5181 04a1 00000000 		.4byte	0
 5182              	.LLST32:
 5183 04a5 00000000 		.4byte	.LVL100
 5184 04a9 05000000 		.4byte	.LVL101-1
 5185 04ad 0100     		.2byte	0x1
 5186 04af 50       		.byte	0x50
 5187 04b0 05000000 		.4byte	.LVL101-1
 5188 04b4 08000000 		.4byte	.LFE13
 5189 04b8 0400     		.2byte	0x4
 5190 04ba F3       		.byte	0xf3
 5191 04bb 01       		.uleb128 0x1
 5192 04bc 50       		.byte	0x50
 5193 04bd 9F       		.byte	0x9f
 5194 04be 00000000 		.4byte	0
 5195 04c2 00000000 		.4byte	0
 5196              	.LLST33:
 5197 04c6 00000000 		.4byte	.LVL102
 5198 04ca 08000000 		.4byte	.LVL103
 5199 04ce 0100     		.2byte	0x1
 5200 04d0 50       		.byte	0x50
 5201 04d1 08000000 		.4byte	.LVL103
 5202 04d5 0A000000 		.4byte	.LVL104
 5203 04d9 0300     		.2byte	0x3
 5204 04db 70       		.byte	0x70
 5205 04dc 01       		.sleb128 1
 5206 04dd 9F       		.byte	0x9f
 5207 04de 0A000000 		.4byte	.LVL104
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 154


 5208 04e2 30000000 		.4byte	.LFE14
 5209 04e6 0400     		.2byte	0x4
 5210 04e8 F3       		.byte	0xf3
 5211 04e9 01       		.uleb128 0x1
 5212 04ea 50       		.byte	0x50
 5213 04eb 9F       		.byte	0x9f
 5214 04ec 00000000 		.4byte	0
 5215 04f0 00000000 		.4byte	0
 5216              	.LLST34:
 5217 04f4 00000000 		.4byte	.LVL105
 5218 04f8 0A000000 		.4byte	.LVL109
 5219 04fc 0100     		.2byte	0x1
 5220 04fe 50       		.byte	0x50
 5221 04ff 0A000000 		.4byte	.LVL109
 5222 0503 0C000000 		.4byte	.LVL110
 5223 0507 0300     		.2byte	0x3
 5224 0509 70       		.byte	0x70
 5225 050a 01       		.sleb128 1
 5226 050b 9F       		.byte	0x9f
 5227 050c 0C000000 		.4byte	.LVL110
 5228 0510 14000000 		.4byte	.LFE15
 5229 0514 0400     		.2byte	0x4
 5230 0516 F3       		.byte	0xf3
 5231 0517 01       		.uleb128 0x1
 5232 0518 50       		.byte	0x50
 5233 0519 9F       		.byte	0x9f
 5234 051a 00000000 		.4byte	0
 5235 051e 00000000 		.4byte	0
 5236              	.LLST35:
 5237 0522 04000000 		.4byte	.LVL106
 5238 0526 06000000 		.4byte	.LVL107
 5239 052a 0100     		.2byte	0x1
 5240 052c 53       		.byte	0x53
 5241 052d 08000000 		.4byte	.LVL108
 5242 0531 0C000000 		.4byte	.LVL110
 5243 0535 0100     		.2byte	0x1
 5244 0537 53       		.byte	0x53
 5245 0538 0C000000 		.4byte	.LVL110
 5246 053c 14000000 		.4byte	.LFE15
 5247 0540 0100     		.2byte	0x1
 5248 0542 50       		.byte	0x50
 5249 0543 00000000 		.4byte	0
 5250 0547 00000000 		.4byte	0
 5251              	.LLST36:
 5252 054b 00000000 		.4byte	.LVL111
 5253 054f 06000000 		.4byte	.LVL112
 5254 0553 0100     		.2byte	0x1
 5255 0555 50       		.byte	0x50
 5256 0556 06000000 		.4byte	.LVL112
 5257 055a 10000000 		.4byte	.LVL115
 5258 055e 0100     		.2byte	0x1
 5259 0560 54       		.byte	0x54
 5260 0561 10000000 		.4byte	.LVL115
 5261 0565 12000000 		.4byte	.LFE16
 5262 0569 0400     		.2byte	0x4
 5263 056b F3       		.byte	0xf3
 5264 056c 01       		.uleb128 0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 155


 5265 056d 50       		.byte	0x50
 5266 056e 9F       		.byte	0x9f
 5267 056f 00000000 		.4byte	0
 5268 0573 00000000 		.4byte	0
 5269              	.LLST37:
 5270 0577 00000000 		.4byte	.LVL111
 5271 057b 09000000 		.4byte	.LVL113-1
 5272 057f 0100     		.2byte	0x1
 5273 0581 51       		.byte	0x51
 5274 0582 09000000 		.4byte	.LVL113-1
 5275 0586 12000000 		.4byte	.LFE16
 5276 058a 0400     		.2byte	0x4
 5277 058c F3       		.byte	0xf3
 5278 058d 01       		.uleb128 0x1
 5279 058e 51       		.byte	0x51
 5280 058f 9F       		.byte	0x9f
 5281 0590 00000000 		.4byte	0
 5282 0594 00000000 		.4byte	0
 5283              	.LLST38:
 5284 0598 00000000 		.4byte	.LVL116
 5285 059c 0A000000 		.4byte	.LVL118
 5286 05a0 0100     		.2byte	0x1
 5287 05a2 50       		.byte	0x50
 5288 05a3 0A000000 		.4byte	.LVL118
 5289 05a7 0C000000 		.4byte	.LVL119
 5290 05ab 0100     		.2byte	0x1
 5291 05ad 53       		.byte	0x53
 5292 05ae 0C000000 		.4byte	.LVL119
 5293 05b2 0E000000 		.4byte	.LVL120
 5294 05b6 0100     		.2byte	0x1
 5295 05b8 50       		.byte	0x50
 5296 05b9 0E000000 		.4byte	.LVL120
 5297 05bd 19000000 		.4byte	.LVL122-1
 5298 05c1 0100     		.2byte	0x1
 5299 05c3 53       		.byte	0x53
 5300 05c4 19000000 		.4byte	.LVL122-1
 5301 05c8 1C000000 		.4byte	.LFE17
 5302 05cc 0400     		.2byte	0x4
 5303 05ce F3       		.byte	0xf3
 5304 05cf 01       		.uleb128 0x1
 5305 05d0 50       		.byte	0x50
 5306 05d1 9F       		.byte	0x9f
 5307 05d2 00000000 		.4byte	0
 5308 05d6 00000000 		.4byte	0
 5309              	.LLST39:
 5310 05da 04000000 		.4byte	.LVL117
 5311 05de 0E000000 		.4byte	.LVL120
 5312 05e2 0200     		.2byte	0x2
 5313 05e4 30       		.byte	0x30
 5314 05e5 9F       		.byte	0x9f
 5315 05e6 0E000000 		.4byte	.LVL120
 5316 05ea 16000000 		.4byte	.LVL121
 5317 05ee 0100     		.2byte	0x1
 5318 05f0 50       		.byte	0x50
 5319 05f1 1A000000 		.4byte	.LVL122
 5320 05f5 1C000000 		.4byte	.LFE17
 5321 05f9 0100     		.2byte	0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 156


 5322 05fb 50       		.byte	0x50
 5323 05fc 00000000 		.4byte	0
 5324 0600 00000000 		.4byte	0
 5325              	.LLST40:
 5326 0604 02000000 		.4byte	.LVL123
 5327 0608 08000000 		.4byte	.LVL124
 5328 060c 0200     		.2byte	0x2
 5329 060e 30       		.byte	0x30
 5330 060f 9F       		.byte	0x9f
 5331 0610 08000000 		.4byte	.LVL124
 5332 0614 18000000 		.4byte	.LVL129
 5333 0618 0100     		.2byte	0x1
 5334 061a 55       		.byte	0x55
 5335 061b 18000000 		.4byte	.LVL129
 5336 061f 1A000000 		.4byte	.LFE18
 5337 0623 0100     		.2byte	0x1
 5338 0625 50       		.byte	0x50
 5339 0626 00000000 		.4byte	0
 5340 062a 00000000 		.4byte	0
 5341              	.LLST41:
 5342 062e 02000000 		.4byte	.LVL123
 5343 0632 08000000 		.4byte	.LVL124
 5344 0636 0200     		.2byte	0x2
 5345 0638 30       		.byte	0x30
 5346 0639 9F       		.byte	0x9f
 5347 063a 08000000 		.4byte	.LVL124
 5348 063e 18000000 		.4byte	.LVL128
 5349 0642 0100     		.2byte	0x1
 5350 0644 54       		.byte	0x54
 5351 0645 00000000 		.4byte	0
 5352 0649 00000000 		.4byte	0
 5353              	.LLST42:
 5354 064d 00000000 		.4byte	.LVL130
 5355 0651 04000000 		.4byte	.LVL131
 5356 0655 0100     		.2byte	0x1
 5357 0657 50       		.byte	0x50
 5358 0658 04000000 		.4byte	.LVL131
 5359 065c 14000000 		.4byte	.LFE23
 5360 0660 0400     		.2byte	0x4
 5361 0662 F3       		.byte	0xf3
 5362 0663 01       		.uleb128 0x1
 5363 0664 50       		.byte	0x50
 5364 0665 9F       		.byte	0x9f
 5365 0666 00000000 		.4byte	0
 5366 066a 00000000 		.4byte	0
 5367              	.LLST43:
 5368 066e 00000000 		.4byte	.LVL134
 5369 0672 12000000 		.4byte	.LVL135
 5370 0676 0100     		.2byte	0x1
 5371 0678 50       		.byte	0x50
 5372 0679 12000000 		.4byte	.LVL135
 5373 067d 1A000000 		.4byte	.LVL136
 5374 0681 0400     		.2byte	0x4
 5375 0683 F3       		.byte	0xf3
 5376 0684 01       		.uleb128 0x1
 5377 0685 50       		.byte	0x50
 5378 0686 9F       		.byte	0x9f
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 157


 5379 0687 1A000000 		.4byte	.LVL136
 5380 068b 1C000000 		.4byte	.LVL137
 5381 068f 0100     		.2byte	0x1
 5382 0691 50       		.byte	0x50
 5383 0692 1C000000 		.4byte	.LVL137
 5384 0696 24000000 		.4byte	.LFE24
 5385 069a 0400     		.2byte	0x4
 5386 069c F3       		.byte	0xf3
 5387 069d 01       		.uleb128 0x1
 5388 069e 50       		.byte	0x50
 5389 069f 9F       		.byte	0x9f
 5390 06a0 00000000 		.4byte	0
 5391 06a4 00000000 		.4byte	0
 5392              	.LLST44:
 5393 06a8 20000000 		.4byte	.LVL138
 5394 06ac 22000000 		.4byte	.LVL139
 5395 06b0 0100     		.2byte	0x1
 5396 06b2 50       		.byte	0x50
 5397 06b3 00000000 		.4byte	0
 5398 06b7 00000000 		.4byte	0
 5399              	.LLST45:
 5400 06bb 00000000 		.4byte	.LVL140
 5401 06bf 07000000 		.4byte	.LVL141-1
 5402 06c3 0100     		.2byte	0x1
 5403 06c5 50       		.byte	0x50
 5404 06c6 07000000 		.4byte	.LVL141-1
 5405 06ca 3A000000 		.4byte	.LFE20
 5406 06ce 0400     		.2byte	0x4
 5407 06d0 F3       		.byte	0xf3
 5408 06d1 01       		.uleb128 0x1
 5409 06d2 50       		.byte	0x50
 5410 06d3 9F       		.byte	0x9f
 5411 06d4 00000000 		.4byte	0
 5412 06d8 00000000 		.4byte	0
 5413              	.LLST46:
 5414 06dc 00000000 		.4byte	.LVL140
 5415 06e0 07000000 		.4byte	.LVL141-1
 5416 06e4 0100     		.2byte	0x1
 5417 06e6 51       		.byte	0x51
 5418 06e7 07000000 		.4byte	.LVL141-1
 5419 06eb 38000000 		.4byte	.LVL155
 5420 06ef 0100     		.2byte	0x1
 5421 06f1 56       		.byte	0x56
 5422 06f2 38000000 		.4byte	.LVL155
 5423 06f6 3A000000 		.4byte	.LFE20
 5424 06fa 0400     		.2byte	0x4
 5425 06fc F3       		.byte	0xf3
 5426 06fd 01       		.uleb128 0x1
 5427 06fe 51       		.byte	0x51
 5428 06ff 9F       		.byte	0x9f
 5429 0700 00000000 		.4byte	0
 5430 0704 00000000 		.4byte	0
 5431              	.LLST47:
 5432 0708 1C000000 		.4byte	.LVL147
 5433 070c 20000000 		.4byte	.LVL148
 5434 0710 0100     		.2byte	0x1
 5435 0712 50       		.byte	0x50
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 158


 5436 0713 20000000 		.4byte	.LVL148
 5437 0717 38000000 		.4byte	.LVL153
 5438 071b 0100     		.2byte	0x1
 5439 071d 54       		.byte	0x54
 5440 071e 00000000 		.4byte	0
 5441 0722 00000000 		.4byte	0
 5442              	.LLST48:
 5443 0726 30000000 		.4byte	.LVL151
 5444 072a 32000000 		.4byte	.LVL152
 5445 072e 0100     		.2byte	0x1
 5446 0730 50       		.byte	0x50
 5447 0731 00000000 		.4byte	0
 5448 0735 00000000 		.4byte	0
 5449              	.LLST49:
 5450 0739 14000000 		.4byte	.LVL144
 5451 073d 16000000 		.4byte	.LVL145
 5452 0741 0100     		.2byte	0x1
 5453 0743 50       		.byte	0x50
 5454 0744 16000000 		.4byte	.LVL145
 5455 0748 19000000 		.4byte	.LVL146-1
 5456 074c 0100     		.2byte	0x1
 5457 074e 51       		.byte	0x51
 5458 074f 00000000 		.4byte	0
 5459 0753 00000000 		.4byte	0
 5460              	.LLST50:
 5461 0757 0A000000 		.4byte	.LVL142
 5462 075b 11000000 		.4byte	.LVL143-1
 5463 075f 0100     		.2byte	0x1
 5464 0761 50       		.byte	0x50
 5465 0762 11000000 		.4byte	.LVL143-1
 5466 0766 38000000 		.4byte	.LVL154
 5467 076a 0100     		.2byte	0x1
 5468 076c 55       		.byte	0x55
 5469 076d 00000000 		.4byte	0
 5470 0771 00000000 		.4byte	0
 5471              	.LLST51:
 5472 0775 02000000 		.4byte	.LVL156
 5473 0779 06000000 		.4byte	.LVL157
 5474 077d 0200     		.2byte	0x2
 5475 077f 30       		.byte	0x30
 5476 0780 9F       		.byte	0x9f
 5477 0781 06000000 		.4byte	.LVL157
 5478 0785 1E000000 		.4byte	.LVL161
 5479 0789 0100     		.2byte	0x1
 5480 078b 54       		.byte	0x54
 5481 078c 00000000 		.4byte	0
 5482 0790 00000000 		.4byte	0
 5483              	.LLST52:
 5484 0794 12000000 		.4byte	.LVL158
 5485 0798 17000000 		.4byte	.LVL159-1
 5486 079c 0100     		.2byte	0x1
 5487 079e 51       		.byte	0x51
 5488 079f 00000000 		.4byte	0
 5489 07a3 00000000 		.4byte	0
 5490              	.LLST53:
 5491 07a7 00000000 		.4byte	.LVL162
 5492 07ab 35000000 		.4byte	.LVL168-1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 159


 5493 07af 0100     		.2byte	0x1
 5494 07b1 50       		.byte	0x50
 5495 07b2 35000000 		.4byte	.LVL168-1
 5496 07b6 3C000000 		.4byte	.LVL171
 5497 07ba 0200     		.2byte	0x2
 5498 07bc 91       		.byte	0x91
 5499 07bd 54       		.sleb128 -44
 5500 07be 3C000000 		.4byte	.LVL171
 5501 07c2 C0000000 		.4byte	.LFE25
 5502 07c6 0400     		.2byte	0x4
 5503 07c8 F3       		.byte	0xf3
 5504 07c9 01       		.uleb128 0x1
 5505 07ca 50       		.byte	0x50
 5506 07cb 9F       		.byte	0x9f
 5507 07cc 00000000 		.4byte	0
 5508 07d0 00000000 		.4byte	0
 5509              	.LLST54:
 5510 07d4 1A000000 		.4byte	.LVL163
 5511 07d8 1E000000 		.4byte	.LVL164
 5512 07dc 0100     		.2byte	0x1
 5513 07de 53       		.byte	0x53
 5514 07df 1E000000 		.4byte	.LVL164
 5515 07e3 3C000000 		.4byte	.LVL171
 5516 07e7 0200     		.2byte	0x2
 5517 07e9 7D       		.byte	0x7d
 5518 07ea 00       		.sleb128 0
 5519 07eb 00000000 		.4byte	0
 5520 07ef 00000000 		.4byte	0
 5521              	.LLST55:
 5522 07f3 26000000 		.4byte	.LVL165
 5523 07f7 2C000000 		.4byte	.LVL166
 5524 07fb 0100     		.2byte	0x1
 5525 07fd 51       		.byte	0x51
 5526 07fe 2C000000 		.4byte	.LVL166
 5527 0802 A8000000 		.4byte	.LVL198
 5528 0806 0100     		.2byte	0x1
 5529 0808 58       		.byte	0x58
 5530 0809 00000000 		.4byte	0
 5531 080d 00000000 		.4byte	0
 5532              	.LLST56:
 5533 0811 32000000 		.4byte	.LVL167
 5534 0815 35000000 		.4byte	.LVL168-1
 5535 0819 0100     		.2byte	0x1
 5536 081b 51       		.byte	0x51
 5537 081c 35000000 		.4byte	.LVL168-1
 5538 0820 A8000000 		.4byte	.LVL199
 5539 0824 0100     		.2byte	0x1
 5540 0826 5A       		.byte	0x5a
 5541 0827 00000000 		.4byte	0
 5542 082b 00000000 		.4byte	0
 5543              	.LLST57:
 5544 082f 38000000 		.4byte	.LVL169
 5545 0833 3F000000 		.4byte	.LVL172-1
 5546 0837 0100     		.2byte	0x1
 5547 0839 53       		.byte	0x53
 5548 083a 46000000 		.4byte	.LVL174
 5549 083e 4F000000 		.4byte	.LVL176-1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 160


 5550 0842 0100     		.2byte	0x1
 5551 0844 53       		.byte	0x53
 5552 0845 56000000 		.4byte	.LVL178
 5553 0849 63000000 		.4byte	.LVL181-1
 5554 084d 0100     		.2byte	0x1
 5555 084f 53       		.byte	0x53
 5556 0850 72000000 		.4byte	.LVL184
 5557 0854 7F000000 		.4byte	.LVL187-1
 5558 0858 0100     		.2byte	0x1
 5559 085a 53       		.byte	0x53
 5560 085b 86000000 		.4byte	.LVL189
 5561 085f 93000000 		.4byte	.LVL192-1
 5562 0863 0100     		.2byte	0x1
 5563 0865 53       		.byte	0x53
 5564 0866 9A000000 		.4byte	.LVL194
 5565 086a A5000000 		.4byte	.LVL197-1
 5566 086e 0100     		.2byte	0x1
 5567 0870 53       		.byte	0x53
 5568 0871 00000000 		.4byte	0
 5569 0875 00000000 		.4byte	0
 5570              	.LLST58:
 5571 0879 36000000 		.4byte	.LVL168
 5572 087d 3F000000 		.4byte	.LVL172-1
 5573 0881 0100     		.2byte	0x1
 5574 0883 50       		.byte	0x50
 5575 0884 44000000 		.4byte	.LVL173
 5576 0888 4F000000 		.4byte	.LVL176-1
 5577 088c 0100     		.2byte	0x1
 5578 088e 50       		.byte	0x50
 5579 088f 54000000 		.4byte	.LVL177
 5580 0893 63000000 		.4byte	.LVL181-1
 5581 0897 0100     		.2byte	0x1
 5582 0899 50       		.byte	0x50
 5583 089a 70000000 		.4byte	.LVL183
 5584 089e 7F000000 		.4byte	.LVL187-1
 5585 08a2 0100     		.2byte	0x1
 5586 08a4 50       		.byte	0x50
 5587 08a5 84000000 		.4byte	.LVL188
 5588 08a9 93000000 		.4byte	.LVL192-1
 5589 08ad 0100     		.2byte	0x1
 5590 08af 50       		.byte	0x50
 5591 08b0 98000000 		.4byte	.LVL193
 5592 08b4 A5000000 		.4byte	.LVL197-1
 5593 08b8 0100     		.2byte	0x1
 5594 08ba 50       		.byte	0x50
 5595 08bb 00000000 		.4byte	0
 5596 08bf 00000000 		.4byte	0
 5597              	.LLST59:
 5598 08c3 00000000 		.4byte	.LVL200
 5599 08c7 10000000 		.4byte	.LVL202
 5600 08cb 0100     		.2byte	0x1
 5601 08cd 50       		.byte	0x50
 5602 08ce 10000000 		.4byte	.LVL202
 5603 08d2 1C000000 		.4byte	.LFE26
 5604 08d6 0400     		.2byte	0x4
 5605 08d8 F3       		.byte	0xf3
 5606 08d9 01       		.uleb128 0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 161


 5607 08da 50       		.byte	0x50
 5608 08db 9F       		.byte	0x9f
 5609 08dc 00000000 		.4byte	0
 5610 08e0 00000000 		.4byte	0
 5611              	.LLST60:
 5612 08e4 00000000 		.4byte	.LVL200
 5613 08e8 13000000 		.4byte	.LVL203-1
 5614 08ec 0100     		.2byte	0x1
 5615 08ee 51       		.byte	0x51
 5616 08ef 13000000 		.4byte	.LVL203-1
 5617 08f3 1C000000 		.4byte	.LFE26
 5618 08f7 0400     		.2byte	0x4
 5619 08f9 F3       		.byte	0xf3
 5620 08fa 01       		.uleb128 0x1
 5621 08fb 51       		.byte	0x51
 5622 08fc 9F       		.byte	0x9f
 5623 08fd 00000000 		.4byte	0
 5624 0901 00000000 		.4byte	0
 5625              	.LLST61:
 5626 0905 02000000 		.4byte	.LVL201
 5627 0909 14000000 		.4byte	.LVL203
 5628 090d 0200     		.2byte	0x2
 5629 090f 30       		.byte	0x30
 5630 0910 9F       		.byte	0x9f
 5631 0911 14000000 		.4byte	.LVL203
 5632 0915 16000000 		.4byte	.LVL204
 5633 0919 0200     		.2byte	0x2
 5634 091b 31       		.byte	0x31
 5635 091c 9F       		.byte	0x9f
 5636 091d 16000000 		.4byte	.LVL204
 5637 0921 1C000000 		.4byte	.LFE26
 5638 0925 0100     		.2byte	0x1
 5639 0927 50       		.byte	0x50
 5640 0928 00000000 		.4byte	0
 5641 092c 00000000 		.4byte	0
 5642              	.LLST62:
 5643 0930 00000000 		.4byte	.LVL205
 5644 0934 0B000000 		.4byte	.LVL206-1
 5645 0938 0100     		.2byte	0x1
 5646 093a 50       		.byte	0x50
 5647 093b 0B000000 		.4byte	.LVL206-1
 5648 093f 1A000000 		.4byte	.LVL209
 5649 0943 0100     		.2byte	0x1
 5650 0945 55       		.byte	0x55
 5651 0946 1A000000 		.4byte	.LVL209
 5652 094a 1C000000 		.4byte	.LFE27
 5653 094e 0400     		.2byte	0x4
 5654 0950 F3       		.byte	0xf3
 5655 0951 01       		.uleb128 0x1
 5656 0952 50       		.byte	0x50
 5657 0953 9F       		.byte	0x9f
 5658 0954 00000000 		.4byte	0
 5659 0958 00000000 		.4byte	0
 5660              	.LLST63:
 5661 095c 00000000 		.4byte	.LVL205
 5662 0960 0B000000 		.4byte	.LVL206-1
 5663 0964 0100     		.2byte	0x1
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 162


 5664 0966 51       		.byte	0x51
 5665 0967 0B000000 		.4byte	.LVL206-1
 5666 096b 1A000000 		.4byte	.LVL210
 5667 096f 0100     		.2byte	0x1
 5668 0971 56       		.byte	0x56
 5669 0972 1A000000 		.4byte	.LVL210
 5670 0976 1C000000 		.4byte	.LFE27
 5671 097a 0400     		.2byte	0x4
 5672 097c F3       		.byte	0xf3
 5673 097d 01       		.uleb128 0x1
 5674 097e 51       		.byte	0x51
 5675 097f 9F       		.byte	0x9f
 5676 0980 00000000 		.4byte	0
 5677 0984 00000000 		.4byte	0
 5678              	.LLST64:
 5679 0988 00000000 		.4byte	.LVL205
 5680 098c 0B000000 		.4byte	.LVL206-1
 5681 0990 0100     		.2byte	0x1
 5682 0992 52       		.byte	0x52
 5683 0993 0B000000 		.4byte	.LVL206-1
 5684 0997 10000000 		.4byte	.LVL207
 5685 099b 0100     		.2byte	0x1
 5686 099d 54       		.byte	0x54
 5687 099e 10000000 		.4byte	.LVL207
 5688 09a2 1C000000 		.4byte	.LFE27
 5689 09a6 0400     		.2byte	0x4
 5690 09a8 F3       		.byte	0xf3
 5691 09a9 01       		.uleb128 0x1
 5692 09aa 52       		.byte	0x52
 5693 09ab 9F       		.byte	0x9f
 5694 09ac 00000000 		.4byte	0
 5695 09b0 00000000 		.4byte	0
 5696              	.LLST65:
 5697 09b4 0C000000 		.4byte	.LVL206
 5698 09b8 19000000 		.4byte	.LVL208-1
 5699 09bc 0100     		.2byte	0x1
 5700 09be 50       		.byte	0x50
 5701 09bf 00000000 		.4byte	0
 5702 09c3 00000000 		.4byte	0
 5703              	.LLST66:
 5704 09c7 06000000 		.4byte	.LVL211
 5705 09cb 15000000 		.4byte	.LVL213-1
 5706 09cf 0100     		.2byte	0x1
 5707 09d1 53       		.byte	0x53
 5708 09d2 00000000 		.4byte	0
 5709 09d6 00000000 		.4byte	0
 5710              	.LLST67:
 5711 09da 00000000 		.4byte	.LVL216
 5712 09de 13000000 		.4byte	.LVL217-1
 5713 09e2 0100     		.2byte	0x1
 5714 09e4 50       		.byte	0x50
 5715 09e5 13000000 		.4byte	.LVL217-1
 5716 09e9 3C000000 		.4byte	.LFE10
 5717 09ed 0400     		.2byte	0x4
 5718 09ef F3       		.byte	0xf3
 5719 09f0 01       		.uleb128 0x1
 5720 09f1 50       		.byte	0x50
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 163


 5721 09f2 9F       		.byte	0x9f
 5722 09f3 00000000 		.4byte	0
 5723 09f7 00000000 		.4byte	0
 5724              		.section	.debug_aranges,"",%progbits
 5725 0000 EC000000 		.4byte	0xec
 5726 0004 0200     		.2byte	0x2
 5727 0006 00000000 		.4byte	.Ldebug_info0
 5728 000a 04       		.byte	0x4
 5729 000b 00       		.byte	0
 5730 000c 0000     		.2byte	0
 5731 000e 0000     		.2byte	0
 5732 0010 00000000 		.4byte	.LFB21
 5733 0014 84000000 		.4byte	.LFE21-.LFB21
 5734 0018 00000000 		.4byte	.LFB22
 5735 001c 42000000 		.4byte	.LFE22-.LFB22
 5736 0020 00000000 		.4byte	.LFB1
 5737 0024 10000000 		.4byte	.LFE1-.LFB1
 5738 0028 00000000 		.4byte	.LFB2
 5739 002c 40000000 		.4byte	.LFE2-.LFB2
 5740 0030 00000000 		.4byte	.LFB3
 5741 0034 2C000000 		.4byte	.LFE3-.LFB3
 5742 0038 00000000 		.4byte	.LFB4
 5743 003c 48000000 		.4byte	.LFE4-.LFB4
 5744 0040 00000000 		.4byte	.LFB5
 5745 0044 58000000 		.4byte	.LFE5-.LFB5
 5746 0048 00000000 		.4byte	.LFB6
 5747 004c 2C000000 		.4byte	.LFE6-.LFB6
 5748 0050 00000000 		.4byte	.LFB8
 5749 0054 BC000000 		.4byte	.LFE8-.LFB8
 5750 0058 00000000 		.4byte	.LFB11
 5751 005c 8C000000 		.4byte	.LFE11-.LFB11
 5752 0060 00000000 		.4byte	.LFB12
 5753 0064 78000000 		.4byte	.LFE12-.LFB12
 5754 0068 00000000 		.4byte	.LFB13
 5755 006c 08000000 		.4byte	.LFE13-.LFB13
 5756 0070 00000000 		.4byte	.LFB14
 5757 0074 30000000 		.4byte	.LFE14-.LFB14
 5758 0078 00000000 		.4byte	.LFB15
 5759 007c 14000000 		.4byte	.LFE15-.LFB15
 5760 0080 00000000 		.4byte	.LFB16
 5761 0084 12000000 		.4byte	.LFE16-.LFB16
 5762 0088 00000000 		.4byte	.LFB17
 5763 008c 1C000000 		.4byte	.LFE17-.LFB17
 5764 0090 00000000 		.4byte	.LFB18
 5765 0094 1A000000 		.4byte	.LFE18-.LFB18
 5766 0098 00000000 		.4byte	.LFB23
 5767 009c 14000000 		.4byte	.LFE23-.LFB23
 5768 00a0 00000000 		.4byte	.LFB24
 5769 00a4 24000000 		.4byte	.LFE24-.LFB24
 5770 00a8 00000000 		.4byte	.LFB20
 5771 00ac 3A000000 		.4byte	.LFE20-.LFB20
 5772 00b0 00000000 		.4byte	.LFB19
 5773 00b4 24000000 		.4byte	.LFE19-.LFB19
 5774 00b8 00000000 		.4byte	.LFB25
 5775 00bc C0000000 		.4byte	.LFE25-.LFB25
 5776 00c0 00000000 		.4byte	.LFB26
 5777 00c4 1C000000 		.4byte	.LFE26-.LFB26
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 164


 5778 00c8 00000000 		.4byte	.LFB27
 5779 00cc 1C000000 		.4byte	.LFE27-.LFB27
 5780 00d0 00000000 		.4byte	.LFB9
 5781 00d4 28000000 		.4byte	.LFE9-.LFB9
 5782 00d8 00000000 		.4byte	.LFB10
 5783 00dc 3C000000 		.4byte	.LFE10-.LFB10
 5784 00e0 00000000 		.4byte	.LFB7
 5785 00e4 28000000 		.4byte	.LFE7-.LFB7
 5786 00e8 00000000 		.4byte	0
 5787 00ec 00000000 		.4byte	0
 5788              		.section	.debug_ranges,"",%progbits
 5789              	.Ldebug_ranges0:
 5790 0000 00000000 		.4byte	.LFB21
 5791 0004 84000000 		.4byte	.LFE21
 5792 0008 00000000 		.4byte	.LFB22
 5793 000c 42000000 		.4byte	.LFE22
 5794 0010 00000000 		.4byte	.LFB1
 5795 0014 10000000 		.4byte	.LFE1
 5796 0018 00000000 		.4byte	.LFB2
 5797 001c 40000000 		.4byte	.LFE2
 5798 0020 00000000 		.4byte	.LFB3
 5799 0024 2C000000 		.4byte	.LFE3
 5800 0028 00000000 		.4byte	.LFB4
 5801 002c 48000000 		.4byte	.LFE4
 5802 0030 00000000 		.4byte	.LFB5
 5803 0034 58000000 		.4byte	.LFE5
 5804 0038 00000000 		.4byte	.LFB6
 5805 003c 2C000000 		.4byte	.LFE6
 5806 0040 00000000 		.4byte	.LFB8
 5807 0044 BC000000 		.4byte	.LFE8
 5808 0048 00000000 		.4byte	.LFB11
 5809 004c 8C000000 		.4byte	.LFE11
 5810 0050 00000000 		.4byte	.LFB12
 5811 0054 78000000 		.4byte	.LFE12
 5812 0058 00000000 		.4byte	.LFB13
 5813 005c 08000000 		.4byte	.LFE13
 5814 0060 00000000 		.4byte	.LFB14
 5815 0064 30000000 		.4byte	.LFE14
 5816 0068 00000000 		.4byte	.LFB15
 5817 006c 14000000 		.4byte	.LFE15
 5818 0070 00000000 		.4byte	.LFB16
 5819 0074 12000000 		.4byte	.LFE16
 5820 0078 00000000 		.4byte	.LFB17
 5821 007c 1C000000 		.4byte	.LFE17
 5822 0080 00000000 		.4byte	.LFB18
 5823 0084 1A000000 		.4byte	.LFE18
 5824 0088 00000000 		.4byte	.LFB23
 5825 008c 14000000 		.4byte	.LFE23
 5826 0090 00000000 		.4byte	.LFB24
 5827 0094 24000000 		.4byte	.LFE24
 5828 0098 00000000 		.4byte	.LFB20
 5829 009c 3A000000 		.4byte	.LFE20
 5830 00a0 00000000 		.4byte	.LFB19
 5831 00a4 24000000 		.4byte	.LFE19
 5832 00a8 00000000 		.4byte	.LFB25
 5833 00ac C0000000 		.4byte	.LFE25
 5834 00b0 00000000 		.4byte	.LFB26
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 165


 5835 00b4 1C000000 		.4byte	.LFE26
 5836 00b8 00000000 		.4byte	.LFB27
 5837 00bc 1C000000 		.4byte	.LFE27
 5838 00c0 00000000 		.4byte	.LFB9
 5839 00c4 28000000 		.4byte	.LFE9
 5840 00c8 00000000 		.4byte	.LFB10
 5841 00cc 3C000000 		.4byte	.LFE10
 5842 00d0 00000000 		.4byte	.LFB7
 5843 00d4 28000000 		.4byte	.LFE7
 5844 00d8 00000000 		.4byte	0
 5845 00dc 00000000 		.4byte	0
 5846              		.section	.debug_line,"",%progbits
 5847              	.Ldebug_line0:
 5848 0000 C4050000 		.section	.debug_str,"MS",%progbits,1
 5848      0200CD01 
 5848      00000201 
 5848      FB0E0D00 
 5848      01010101 
 5849              	.LASF154:
 5850 0000 43617053 		.ascii	"CapSense_SsCSDGetColSnsClkDivider\000"
 5850      656E7365 
 5850      5F537343 
 5850      53444765 
 5850      74436F6C 
 5851              	.LASF128:
 5852 0022 73656E73 		.ascii	"sensorElement\000"
 5852      6F72456C 
 5852      656D656E 
 5852      7400
 5853              	.LASF44:
 5854 0030 766F6C5F 		.ascii	"vol_up\000"
 5854      757000
 5855              	.LASF122:
 5856 0037 7363616E 		.ascii	"scanStatus\000"
 5856      53746174 
 5856      757300
 5857              	.LASF172:
 5858 0042 43617053 		.ascii	"CapSense_SsCSDDisableMode\000"
 5858      656E7365 
 5858      5F537343 
 5858      53444469 
 5858      7361626C 
 5859              	.LASF42:
 5860 005c 70726F78 		.ascii	"proxTouchTh\000"
 5860      546F7563 
 5860      68546800 
 5861              	.LASF125:
 5862 0068 43617053 		.ascii	"CapSense_SetupWidgetExt\000"
 5862      656E7365 
 5862      5F536574 
 5862      75705769 
 5862      64676574 
 5863              	.LASF179:
 5864 0080 43617053 		.ascii	"CapSense_widgetIndex\000"
 5864      656E7365 
 5864      5F776964 
 5864      67657449 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 166


 5864      6E646578 
 5865              	.LASF71:
 5866 0095 736E7254 		.ascii	"snrTestWidgetId\000"
 5866      65737457 
 5866      69646765 
 5866      74496400 
 5867              	.LASF22:
 5868 00a5 43617053 		.ascii	"CapSense_UNDEFINED_E\000"
 5868      656E7365 
 5868      5F554E44 
 5868      4546494E 
 5868      45445F45 
 5869              	.LASF8:
 5870 00ba 756E7369 		.ascii	"unsigned int\000"
 5870      676E6564 
 5870      20696E74 
 5870      00
 5871              	.LASF62:
 5872 00c7 7363616E 		.ascii	"scanCounter\000"
 5872      436F756E 
 5872      74657200 
 5873              	.LASF60:
 5874 00d3 6877436C 		.ascii	"hwClock\000"
 5874      6F636B00 
 5875              	.LASF75:
 5876 00db 7363616E 		.ascii	"scanCsdISC\000"
 5876      43736449 
 5876      534300
 5877              	.LASF175:
 5878 00e6 696E6974 		.ascii	"initStatus\000"
 5878      53746174 
 5878      757300
 5879              	.LASF194:
 5880 00f1 43617053 		.ascii	"CapSense_SsCSDSetShieldElectrodesState\000"
 5880      656E7365 
 5880      5F537343 
 5880      53445365 
 5880      74536869 
 5881              	.LASF199:
 5882 0118 43794861 		.ascii	"CyHalt\000"
 5882      6C7400
 5883              	.LASF105:
 5884 011f 43617053 		.ascii	"CapSense_BIST_CSD_SH_CAP_E\000"
 5884      656E7365 
 5884      5F424953 
 5884      545F4353 
 5884      445F5348 
 5885              	.LASF132:
 5886 013a 696E7465 		.ascii	"interruptState\000"
 5886      72727570 
 5886      74537461 
 5886      746500
 5887              	.LASF115:
 5888 0149 6C667372 		.ascii	"lfsrScale\000"
 5888      5363616C 
 5888      6500
 5889              	.LASF164:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 167


 5890 0153 64725265 		.ascii	"drReg\000"
 5890      6700
 5891              	.LASF205:
 5892 0159 443A5C71 		.ascii	"D:\\qcs40x\\Cypress\\project\\4025LQIS412_workspace"
 5892      63733430 
 5892      785C4379 
 5892      70726573 
 5892      735C7072 
 5893 0188 5C343032 		.ascii	"\\4025LQIS412-EZIIC\\EZIIC_wadge.cydsn\000"
 5893      354C5149 
 5893      53343132 
 5893      2D455A49 
 5893      49435C45 
 5894              	.LASF116:
 5895 01ad 6C667372 		.ascii	"lfsrRange\000"
 5895      52616E67 
 5895      6500
 5896              	.LASF45:
 5897 01b7 766F6C5F 		.ascii	"vol_down\000"
 5897      646F776E 
 5897      00
 5898              	.LASF206:
 5899 01c0 43617053 		.ascii	"CapSense_IsBusy\000"
 5899      656E7365 
 5899      5F497342 
 5899      75737900 
 5900              	.LASF163:
 5901 01d0 6873696F 		.ascii	"hsiomReg\000"
 5901      6D526567 
 5901      00
 5902              	.LASF146:
 5903 01d9 43617053 		.ascii	"CapSense_SsSetModClkClockDivider\000"
 5903      656E7365 
 5903      5F537353 
 5903      65744D6F 
 5903      64436C6B 
 5904              	.LASF169:
 5905 01fa 72656750 		.ascii	"regPtr\000"
 5905      747200
 5906              	.LASF50:
 5907 0201 43617053 		.ascii	"CapSense_RAM_WD_LIST_STRUCT\000"
 5907      656E7365 
 5907      5F52414D 
 5907      5F57445F 
 5907      4C495354 
 5908              	.LASF126:
 5909 021d 73656E73 		.ascii	"sensorId\000"
 5909      6F724964 
 5909      00
 5910              	.LASF177:
 5911 0226 43617053 		.ascii	"CapSense_dsFlash\000"
 5911      656E7365 
 5911      5F647346 
 5911      6C617368 
 5911      00
 5912              	.LASF156:
 5913 0237 70747257 		.ascii	"ptrWdgt\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 168


 5913      64677400 
 5914              	.LASF10:
 5915 023f 75696E74 		.ascii	"uint32_t\000"
 5915      33325F74 
 5915      00
 5916              	.LASF171:
 5917 0248 43617053 		.ascii	"CapSense_SsSetWidgetSenseClkSrc\000"
 5917      656E7365 
 5917      5F537353 
 5917      65745769 
 5917      64676574 
 5918              	.LASF36:
 5919 0268 69646163 		.ascii	"idacGainIndex\000"
 5919      4761696E 
 5919      496E6465 
 5919      7800
 5920              	.LASF136:
 5921 0276 6C6F6F70 		.ascii	"loopIndex\000"
 5921      496E6465 
 5921      7800
 5922              	.LASF113:
 5923 0280 43617053 		.ascii	"CapSense_SsCalcLfsrScale\000"
 5923      656E7365 
 5923      5F537343 
 5923      616C634C 
 5923      66737253 
 5924              	.LASF14:
 5925 0299 666C6F61 		.ascii	"float\000"
 5925      7400
 5926              	.LASF86:
 5927 029f 73686966 		.ascii	"shift\000"
 5927      7400
 5928              	.LASF203:
 5929 02a5 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5929      43313120 
 5929      352E342E 
 5929      31203230 
 5929      31363036 
 5930 02d8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 5930      20726576 
 5930      6973696F 
 5930      6E203233 
 5930      37373135 
 5931 030b 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 5931      67202D66 
 5931      66756E63 
 5931      74696F6E 
 5931      2D736563 
 5932              	.LASF187:
 5933 0337 43617053 		.ascii	"CapSense_CSDSetupWidget\000"
 5933      656E7365 
 5933      5F435344 
 5933      53657475 
 5933      70576964 
 5934              	.LASF141:
 5935 034f 736E7349 		.ascii	"snsIoPtr\000"
 5935      6F507472 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 169


 5935      00
 5936              	.LASF70:
 5937 0358 736E734C 		.ascii	"snsList\000"
 5937      69737400 
 5938              	.LASF7:
 5939 0360 6C6F6E67 		.ascii	"long long unsigned int\000"
 5939      206C6F6E 
 5939      6720756E 
 5939      7369676E 
 5939      65642069 
 5940              	.LASF180:
 5941 0377 43617053 		.ascii	"CapSense_sensorIndex\000"
 5941      656E7365 
 5941      5F73656E 
 5941      736F7249 
 5941      6E646578 
 5942              	.LASF87:
 5943 038c 43617053 		.ascii	"CapSense_FLASH_IO_STRUCT\000"
 5943      656E7365 
 5943      5F464C41 
 5943      53485F49 
 5943      4F5F5354 
 5944              	.LASF72:
 5945 03a5 736E7254 		.ascii	"snrTestSensorId\000"
 5945      65737453 
 5945      656E736F 
 5945      72496400 
 5946              	.LASF95:
 5947 03b5 77646774 		.ascii	"wdgtType\000"
 5947      54797065 
 5947      00
 5948              	.LASF114:
 5949 03be 6C667372 		.ascii	"lfsrSize\000"
 5949      53697A65 
 5949      00
 5950              	.LASF189:
 5951 03c7 43617053 		.ascii	"CapSense_CSDSetupWidgetExt\000"
 5951      656E7365 
 5951      5F435344 
 5951      53657475 
 5951      70576964 
 5952              	.LASF165:
 5953 03e2 70635265 		.ascii	"pcReg\000"
 5953      6700
 5954              	.LASF170:
 5955 03e8 76616C75 		.ascii	"value\000"
 5955      6500
 5956              	.LASF138:
 5957 03ee 6E657750 		.ascii	"newPinHsiomVal\000"
 5957      696E4873 
 5957      696F6D56 
 5957      616C00
 5958              	.LASF68:
 5959 03fd 6D6F6443 		.ascii	"modCsdClk\000"
 5959      7364436C 
 5959      6B00
 5960              	.LASF56:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 170


 5961 0407 43617053 		.ascii	"CapSense_RAM_SNS_STRUCT\000"
 5961      656E7365 
 5961      5F52414D 
 5961      5F534E53 
 5961      5F535452 
 5962              	.LASF157:
 5963 041f 43617053 		.ascii	"CapSense_SsCSDCalcPrsSize\000"
 5963      656E7365 
 5963      5F537343 
 5963      53444361 
 5963      6C635072 
 5964              	.LASF48:
 5965 0439 666F726D 		.ascii	"formation\000"
 5965      6174696F 
 5965      6E00
 5966              	.LASF80:
 5967 0443 64725074 		.ascii	"drPtr\000"
 5967      7200
 5968              	.LASF167:
 5969 0449 6D6F6465 		.ascii	"mode\000"
 5969      00
 5970              	.LASF147:
 5971 044e 6D6F6443 		.ascii	"modClk\000"
 5971      6C6B00
 5972              	.LASF137:
 5973 0455 6E657750 		.ascii	"newPinPcVal\000"
 5973      696E5063 
 5973      56616C00 
 5974              	.LASF32:
 5975 0461 68797374 		.ascii	"hysteresis\000"
 5975      65726573 
 5975      697300
 5976              	.LASF162:
 5977 046c 64697363 		.ascii	"dischargeTime\000"
 5977      68617267 
 5977      6554696D 
 5977      6500
 5978              	.LASF97:
 5979 047a 43617053 		.ascii	"CapSense_FLASH_WD_STRUCT\000"
 5979      656E7365 
 5979      5F464C41 
 5979      53485F57 
 5979      445F5354 
 5980              	.LASF130:
 5981 0493 656C7464 		.ascii	"eltdNum\000"
 5981      4E756D00 
 5982              	.LASF34:
 5983 049b 6C6F7742 		.ascii	"lowBslnRst\000"
 5983      736C6E52 
 5983      737400
 5984              	.LASF112:
 5985 04a6 43617053 		.ascii	"CapSense_SsCalcLfsrSize\000"
 5985      656E7365 
 5985      5F537343 
 5985      616C634C 
 5985      66737253 
 5986              	.LASF94:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 171


 5987 04be 746F7461 		.ascii	"totalNumSns\000"
 5987      6C4E756D 
 5987      536E7300 
 5988              	.LASF30:
 5989 04ca 6E6F6973 		.ascii	"noiseTh\000"
 5989      65546800 
 5990              	.LASF16:
 5991 04d2 63686172 		.ascii	"char\000"
 5991      00
 5992              	.LASF192:
 5993 04d7 43794578 		.ascii	"CyExitCriticalSection\000"
 5993      69744372 
 5993      69746963 
 5993      616C5365 
 5993      6374696F 
 5994              	.LASF161:
 5995 04ed 43617053 		.ascii	"CapSense_DischargeExtCapacitors\000"
 5995      656E7365 
 5995      5F446973 
 5995      63686172 
 5995      67654578 
 5996              	.LASF139:
 5997 050d 746D7050 		.ascii	"tmpPcDrRegValue\000"
 5997      63447252 
 5997      65675661 
 5997      6C756500 
 5998              	.LASF103:
 5999 051d 43617053 		.ascii	"CapSense_BIST_CSD_SNS_CAP_E\000"
 5999      656E7365 
 5999      5F424953 
 5999      545F4353 
 5999      445F534E 
 6000              	.LASF84:
 6001 0539 6873696F 		.ascii	"hsiomShift\000"
 6001      6D536869 
 6001      667400
 6002              	.LASF12:
 6003 0544 75696E74 		.ascii	"uint16\000"
 6003      313600
 6004              	.LASF111:
 6005 054b 636F6E76 		.ascii	"conversionsNum\000"
 6005      65727369 
 6005      6F6E734E 
 6005      756D00
 6006              	.LASF92:
 6007 055a 70747232 		.ascii	"ptr2DebounceArr\000"
 6007      4465626F 
 6007      756E6365 
 6007      41727200 
 6008              	.LASF201:
 6009 056a 43617053 		.ascii	"CapSense_SsCSDDisableShieldElectrodes\000"
 6009      656E7365 
 6009      5F537343 
 6009      53444469 
 6009      7361626C 
 6010              	.LASF28:
 6011 0590 7265736F 		.ascii	"resolution\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 172


 6011      6C757469 
 6011      6F6E00
 6012              	.LASF63:
 6013 059b 73746174 		.ascii	"status\000"
 6013      757300
 6014              	.LASF151:
 6015 05a2 43617053 		.ascii	"CapSense_CalibrateWidget\000"
 6015      656E7365 
 6015      5F43616C 
 6015      69627261 
 6015      74655769 
 6016              	.LASF102:
 6017 05bb 43617053 		.ascii	"CapSense_SCAN_CSX_E\000"
 6017      656E7365 
 6017      5F534341 
 6017      4E5F4353 
 6017      585F4500 
 6018              	.LASF21:
 6019 05cf 43617053 		.ascii	"CapSense_LOW_BSLN_RST_TYPE\000"
 6019      656E7365 
 6019      5F4C4F57 
 6019      5F42534C 
 6019      4E5F5253 
 6020              	.LASF148:
 6021 05ea 43617053 		.ascii	"CapSense_SsSetSnsClockDivider\000"
 6021      656E7365 
 6021      5F537353 
 6021      6574536E 
 6021      73436C6F 
 6022              	.LASF27:
 6023 0608 43617053 		.ascii	"CapSense_SENSE_METHOD_ENUM\000"
 6023      656E7365 
 6023      5F53454E 
 6023      53455F4D 
 6023      4554484F 
 6024              	.LASF166:
 6025 0623 43617053 		.ascii	"CapSense_SetInactiveElectrodeState\000"
 6025      656E7365 
 6025      5F536574 
 6025      496E6163 
 6025      74697665 
 6026              	.LASF55:
 6027 0646 69646163 		.ascii	"idacComp\000"
 6027      436F6D70 
 6027      00
 6028              	.LASF79:
 6029 064f 70635074 		.ascii	"pcPtr\000"
 6029      7200
 6030              	.LASF6:
 6031 0655 6C6F6E67 		.ascii	"long long int\000"
 6031      206C6F6E 
 6031      6720696E 
 6031      7400
 6032              	.LASF96:
 6033 0663 6E756D43 		.ascii	"numCols\000"
 6033      6F6C7300 
 6034              	.LASF202:
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 173


 6035 066b 43617053 		.ascii	"CapSense_SsCSDInitialize\000"
 6035      656E7365 
 6035      5F537343 
 6035      5344496E 
 6035      69746961 
 6036              	.LASF33:
 6037 0684 6F6E4465 		.ascii	"onDebounce\000"
 6037      626F756E 
 6037      636500
 6038              	.LASF152:
 6039 068f 63616C69 		.ascii	"calibrateStatus\000"
 6039      62726174 
 6039      65537461 
 6039      74757300 
 6040              	.LASF69:
 6041 069f 77646774 		.ascii	"wdgtList\000"
 6041      4C697374 
 6041      00
 6042              	.LASF101:
 6043 06a8 43617053 		.ascii	"CapSense_SCAN_CSD_E\000"
 6043      656E7365 
 6043      5F534341 
 6043      4E5F4353 
 6043      445F4500 
 6044              	.LASF99:
 6045 06bc 43617053 		.ascii	"CapSense_FLASH_STRUCT\000"
 6045      656E7365 
 6045      5F464C41 
 6045      53485F53 
 6045      54525543 
 6046              	.LASF121:
 6047 06d2 43617053 		.ascii	"CapSense_Scan\000"
 6047      656E7365 
 6047      5F536361 
 6047      6E00
 6048              	.LASF168:
 6049 06e0 43617053 		.ascii	"CapSense_WriteBitsSafe\000"
 6049      656E7365 
 6049      5F577269 
 6049      74654269 
 6049      74735361 
 6050              	.LASF140:
 6051 06f7 746D7048 		.ascii	"tmpHsiomRegValue\000"
 6051      73696F6D 
 6051      52656756 
 6051      616C7565 
 6051      00
 6052              	.LASF176:
 6053 0708 43617053 		.ascii	"CapSense_dsRam\000"
 6053      656E7365 
 6053      5F647352 
 6053      616D00
 6054              	.LASF74:
 6055 0717 736E7254 		.ascii	"snrTestRawCount\000"
 6055      65737452 
 6055      6177436F 
 6055      756E7400 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 174


 6056              	.LASF31:
 6057 0727 6E4E6F69 		.ascii	"nNoiseTh\000"
 6057      73655468 
 6057      00
 6058              	.LASF47:
 6059 0730 6C696265 		.ascii	"liberty_pull\000"
 6059      7274795F 
 6059      70756C6C 
 6059      00
 6060              	.LASF67:
 6061 073d 63736430 		.ascii	"csd0Config\000"
 6061      436F6E66 
 6061      696700
 6062              	.LASF19:
 6063 0748 63796973 		.ascii	"cyisraddress\000"
 6063      72616464 
 6063      72657373 
 6063      00
 6064              	.LASF127:
 6065 0755 43617053 		.ascii	"CapSense_ScanExt\000"
 6065      656E7365 
 6065      5F536361 
 6065      6E457874 
 6065      00
 6066              	.LASF40:
 6067 0766 43617053 		.ascii	"CapSense_RAM_WD_BASE_STRUCT\000"
 6067      656E7365 
 6067      5F52414D 
 6067      5F57445F 
 6067      42415345 
 6068              	.LASF78:
 6069 0782 6873696F 		.ascii	"hsiomPtr\000"
 6069      6D507472 
 6069      00
 6070              	.LASF13:
 6071 078b 75696E74 		.ascii	"uint32\000"
 6071      333200
 6072              	.LASF91:
 6073 0792 70747232 		.ascii	"ptr2FltrHistory\000"
 6073      466C7472 
 6073      48697374 
 6073      6F727900 
 6074              	.LASF108:
 6075 07a2 6761696E 		.ascii	"gainValue\000"
 6075      56616C75 
 6075      6500
 6076              	.LASF185:
 6077 07ac 43617053 		.ascii	"CapSense_curSnsIOPtr\000"
 6077      656E7365 
 6077      5F637572 
 6077      536E7349 
 6077      4F507472 
 6078              	.LASF83:
 6079 07c1 6D61736B 		.ascii	"mask\000"
 6079      00
 6080              	.LASF150:
 6081 07c6 43617053 		.ascii	"CapSense_SsSetClockDividers\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 175


 6081      656E7365 
 6081      5F537353 
 6081      6574436C 
 6081      6F636B44 
 6082              	.LASF106:
 6083 07e2 43617053 		.ascii	"CapSense_OPERATION_MODE_ENUM\000"
 6083      656E7365 
 6083      5F4F5045 
 6083      52415449 
 6083      4F4E5F4D 
 6084              	.LASF198:
 6085 07ff 43794465 		.ascii	"CyDelayUs\000"
 6085      6C617955 
 6085      7300
 6086              	.LASF124:
 6087 0809 77646774 		.ascii	"wdgtIndex\000"
 6087      496E6465 
 6087      7800
 6088              	.LASF197:
 6089 0813 43617053 		.ascii	"CapSense_SsCSDGetNumberOfConversions\000"
 6089      656E7365 
 6089      5F537343 
 6089      53444765 
 6089      744E756D 
 6090              	.LASF26:
 6091 0838 43617053 		.ascii	"CapSense_SENSE_METHOD_ISX_E\000"
 6091      656E7365 
 6091      5F53454E 
 6091      53455F4D 
 6091      4554484F 
 6092              	.LASF100:
 6093 0854 6C6F6E67 		.ascii	"long double\000"
 6093      20646F75 
 6093      626C6500 
 6094              	.LASF18:
 6095 0860 72656733 		.ascii	"reg32\000"
 6095      3200
 6096              	.LASF73:
 6097 0866 736E7254 		.ascii	"snrTestScanCounter\000"
 6097      65737453 
 6097      63616E43 
 6097      6F756E74 
 6097      657200
 6098              	.LASF58:
 6099 0879 636F6E66 		.ascii	"configId\000"
 6099      69674964 
 6099      00
 6100              	.LASF90:
 6101 0882 70747232 		.ascii	"ptr2SnsRam\000"
 6101      536E7352 
 6101      616D00
 6102              	.LASF66:
 6103 088d 736E7353 		.ascii	"snsStatus\000"
 6103      74617475 
 6103      7300
 6104              	.LASF143:
 6105 0897 706F7374 		.ascii	"postScanStatus\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 176


 6105      5363616E 
 6105      53746174 
 6105      757300
 6106              	.LASF38:
 6107 08a6 736E7343 		.ascii	"snsClkSource\000"
 6107      6C6B536F 
 6107      75726365 
 6107      00
 6108              	.LASF200:
 6109 08b3 43617053 		.ascii	"CapSense_SsCSDElectrodeCheck\000"
 6109      656E7365 
 6109      5F537343 
 6109      5344456C 
 6109      65637472 
 6110              	.LASF144:
 6111 08d0 43617053 		.ascii	"CapSense_SsIsrInitialize\000"
 6111      656E7365 
 6111      5F537349 
 6111      7372496E 
 6111      69746961 
 6112              	.LASF2:
 6113 08e9 73686F72 		.ascii	"short int\000"
 6113      7420696E 
 6113      7400
 6114              	.LASF77:
 6115 08f3 43617053 		.ascii	"CapSense_RAM_STRUCT\000"
 6115      656E7365 
 6115      5F52414D 
 6115      5F535452 
 6115      55435400 
 6116              	.LASF135:
 6117 0907 43617053 		.ascii	"CapSense_SsSetAllIOsState\000"
 6117      656E7365 
 6117      5F537353 
 6117      6574416C 
 6117      6C494F73 
 6118              	.LASF4:
 6119 0921 6C6F6E67 		.ascii	"long int\000"
 6119      20696E74 
 6119      00
 6120              	.LASF64:
 6121 092a 77646774 		.ascii	"wdgtEnable\000"
 6121      456E6162 
 6121      6C6500
 6122              	.LASF53:
 6123 0935 64696666 		.ascii	"diff\000"
 6123      00
 6124              	.LASF61:
 6125 093a 74756E65 		.ascii	"tunerCmd\000"
 6125      72436D64 
 6125      00
 6126              	.LASF24:
 6127 0943 43617053 		.ascii	"CapSense_SENSE_METHOD_CSX_E\000"
 6127      656E7365 
 6127      5F53454E 
 6127      53455F4D 
 6127      4554484F 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 177


 6128              	.LASF81:
 6129 095f 70735074 		.ascii	"psPtr\000"
 6129      7200
 6130              	.LASF120:
 6131 0965 43617053 		.ascii	"CapSense_SetupWidget\000"
 6131      656E7365 
 6131      5F536574 
 6131      75705769 
 6131      64676574 
 6132              	.LASF196:
 6133 097a 43617053 		.ascii	"CapSense_CSDCalibrateWidget\000"
 6133      656E7365 
 6133      5F435344 
 6133      43616C69 
 6133      62726174 
 6134              	.LASF107:
 6135 0996 6761696E 		.ascii	"gainReg\000"
 6135      52656700 
 6136              	.LASF153:
 6137 099e 43617053 		.ascii	"CapSense_CalibrateAllWidgets\000"
 6137      656E7365 
 6137      5F43616C 
 6137      69627261 
 6137      7465416C 
 6138              	.LASF190:
 6139 09bb 43617053 		.ascii	"CapSense_CSDScanExt\000"
 6139      656E7365 
 6139      5F435344 
 6139      5363616E 
 6139      45787400 
 6140              	.LASF65:
 6141 09cf 77646774 		.ascii	"wdgtStatus\000"
 6141      53746174 
 6141      757300
 6142              	.LASF204:
 6143 09da 47656E65 		.ascii	"Generated_Source\\PSoC4\\CapSense_Sensing.c\000"
 6143      72617465 
 6143      645F536F 
 6143      75726365 
 6143      5C50536F 
 6144              	.LASF193:
 6145 0a04 43617053 		.ascii	"CapSense_CSDConnectSns\000"
 6145      656E7365 
 6145      5F435344 
 6145      436F6E6E 
 6145      65637453 
 6146              	.LASF23:
 6147 0a1b 43617053 		.ascii	"CapSense_SENSE_METHOD_CSD_E\000"
 6147      656E7365 
 6147      5F53454E 
 6147      53455F4D 
 6147      4554484F 
 6148              	.LASF183:
 6149 0a37 43617053 		.ascii	"CapSense_currentSenseMethod\000"
 6149      656E7365 
 6149      5F637572 
 6149      72656E74 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 178


 6149      53656E73 
 6150              	.LASF158:
 6151 0a53 70727353 		.ascii	"prsSize\000"
 6151      697A6500 
 6152              	.LASF39:
 6153 0a5b 73697A65 		.ascii	"sizetype\000"
 6153      74797065 
 6153      00
 6154              	.LASF85:
 6155 0a64 64725368 		.ascii	"drShift\000"
 6155      69667400 
 6156              	.LASF5:
 6157 0a6c 6C6F6E67 		.ascii	"long unsigned int\000"
 6157      20756E73 
 6157      69676E65 
 6157      6420696E 
 6157      7400
 6158              	.LASF155:
 6159 0a7e 72657456 		.ascii	"retVal\000"
 6159      616C00
 6160              	.LASF145:
 6161 0a85 61646472 		.ascii	"address\000"
 6161      65737300 
 6162              	.LASF35:
 6163 0a8d 69646163 		.ascii	"idacMod\000"
 6163      4D6F6400 
 6164              	.LASF195:
 6165 0a95 43617053 		.ascii	"CapSense_ISR_StartEx\000"
 6165      656E7365 
 6165      5F495352 
 6165      5F537461 
 6165      72744578 
 6166              	.LASF49:
 6167 0aaa 70726F78 		.ascii	"prox\000"
 6167      00
 6168              	.LASF29:
 6169 0aaf 66696E67 		.ascii	"fingerTh\000"
 6169      65725468 
 6169      00
 6170              	.LASF52:
 6171 0ab8 62736C6E 		.ascii	"bslnExt\000"
 6171      45787400 
 6172              	.LASF109:
 6173 0ac0 43617053 		.ascii	"CapSense_IDAC_GAIN_TABLE_STRUCT\000"
 6173      656E7365 
 6173      5F494441 
 6173      435F4741 
 6173      494E5F54 
 6174              	.LASF41:
 6175 0ae0 43617053 		.ascii	"CapSense_RAM_WD_BUTTON_STRUCT\000"
 6175      656E7365 
 6175      5F52414D 
 6175      5F57445F 
 6175      42555454 
 6176              	.LASF17:
 6177 0afe 63797374 		.ascii	"cystatus\000"
 6177      61747573 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 179


 6177      00
 6178              	.LASF43:
 6179 0b07 43617053 		.ascii	"CapSense_RAM_WD_PROXIMITY_STRUCT\000"
 6179      656E7365 
 6179      5F52414D 
 6179      5F57445F 
 6179      50524F58 
 6180              	.LASF1:
 6181 0b28 756E7369 		.ascii	"unsigned char\000"
 6181      676E6564 
 6181      20636861 
 6181      7200
 6182              	.LASF9:
 6183 0b36 5F5F7569 		.ascii	"__uint32_t\000"
 6183      6E743332 
 6183      5F7400
 6184              	.LASF134:
 6185 0b41 43617053 		.ascii	"CapSense_SetPinState\000"
 6185      656E7365 
 6185      5F536574 
 6185      50696E53 
 6185      74617465 
 6186              	.LASF93:
 6187 0b56 73746174 		.ascii	"staticConfig\000"
 6187      6963436F 
 6187      6E666967 
 6187      00
 6188              	.LASF133:
 6189 0b63 696F5074 		.ascii	"ioPtr\000"
 6189      7200
 6190              	.LASF76:
 6191 0b69 7363616E 		.ascii	"scanCurrentISC\000"
 6191      43757272 
 6191      656E7449 
 6191      534300
 6192              	.LASF89:
 6193 0b78 70747232 		.ascii	"ptr2WdgtRam\000"
 6193      57646774 
 6193      52616D00 
 6194              	.LASF20:
 6195 0b84 43617053 		.ascii	"CapSense_THRESHOLD_TYPE\000"
 6195      656E7365 
 6195      5F544852 
 6195      4553484F 
 6195      4C445F54 
 6196              	.LASF188:
 6197 0b9c 43617053 		.ascii	"CapSense_CSDScan\000"
 6197      656E7365 
 6197      5F435344 
 6197      5363616E 
 6197      00
 6198              	.LASF25:
 6199 0bad 43617053 		.ascii	"CapSense_SENSE_METHOD_BIST_E\000"
 6199      656E7365 
 6199      5F53454E 
 6199      53455F4D 
 6199      4554484F 
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 180


 6200              	.LASF129:
 6201 0bca 73746174 		.ascii	"state\000"
 6201      6500
 6202              	.LASF131:
 6203 0bd0 656C7464 		.ascii	"eltdIndex\000"
 6203      496E6465 
 6203      7800
 6204              	.LASF123:
 6205 0bda 43617053 		.ascii	"CapSense_ScanAllWidgets\000"
 6205      656E7365 
 6205      5F536361 
 6205      6E416C6C 
 6205      57696467 
 6206              	.LASF82:
 6207 0bf2 6873696F 		.ascii	"hsiomMask\000"
 6207      6D4D6173 
 6207      6B00
 6208              	.LASF37:
 6209 0bfc 736E7343 		.ascii	"snsClk\000"
 6209      6C6B00
 6210              	.LASF173:
 6211 0c03 43617053 		.ascii	"CapSense_SsSwitchSensingMode\000"
 6211      656E7365 
 6211      5F537353 
 6211      77697463 
 6211      6853656E 
 6212              	.LASF191:
 6213 0c20 4379456E 		.ascii	"CyEnterCriticalSection\000"
 6213      74657243 
 6213      72697469 
 6213      63616C53 
 6213      65637469 
 6214              	.LASF182:
 6215 0c37 43617053 		.ascii	"CapSense_curRamSnsPtr\000"
 6215      656E7365 
 6215      5F637572 
 6215      52616D53 
 6215      6E735074 
 6216              	.LASF0:
 6217 0c4d 7369676E 		.ascii	"signed char\000"
 6217      65642063 
 6217      68617200 
 6218              	.LASF184:
 6219 0c59 43617053 		.ascii	"CapSense_scanFreqIndex\000"
 6219      656E7365 
 6219      5F736361 
 6219      6E467265 
 6219      71496E64 
 6220              	.LASF51:
 6221 0c70 62736C6E 		.ascii	"bsln\000"
 6221      00
 6222              	.LASF3:
 6223 0c75 73686F72 		.ascii	"short unsigned int\000"
 6223      7420756E 
 6223      7369676E 
 6223      65642069 
 6223      6E7400
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 181


 6224              	.LASF46:
 6225 0c88 706C6179 		.ascii	"play_pause\000"
 6225      5F706175 
 6225      736500
 6226              	.LASF178:
 6227 0c93 43617053 		.ascii	"CapSense_ioList\000"
 6227      656E7365 
 6227      5F696F4C 
 6227      69737400 
 6228              	.LASF142:
 6229 0ca3 43617053 		.ascii	"CapSense_SsPostAllWidgetsScan\000"
 6229      656E7365 
 6229      5F537350 
 6229      6F737441 
 6229      6C6C5769 
 6230              	.LASF88:
 6231 0cc1 70747232 		.ascii	"ptr2SnsFlash\000"
 6231      536E7346 
 6231      6C617368 
 6231      00
 6232              	.LASF117:
 6233 0cce 6C667372 		.ascii	"lfsrDither\000"
 6233      44697468 
 6233      657200
 6234              	.LASF149:
 6235 0cd9 6E657752 		.ascii	"newRegValue\000"
 6235      65675661 
 6235      6C756500 
 6236              	.LASF11:
 6237 0ce5 75696E74 		.ascii	"uint8\000"
 6237      3800
 6238              	.LASF15:
 6239 0ceb 646F7562 		.ascii	"double\000"
 6239      6C6500
 6240              	.LASF54:
 6241 0cf2 6E656742 		.ascii	"negBslnRstCnt\000"
 6241      736C6E52 
 6241      7374436E 
 6241      7400
 6242              	.LASF174:
 6243 0d00 43617053 		.ascii	"CapSense_SsInitialize\000"
 6243      656E7365 
 6243      5F537349 
 6243      6E697469 
 6243      616C697A 
 6244              	.LASF110:
 6245 0d16 736E7343 		.ascii	"snsClkDivider\000"
 6245      6C6B4469 
 6245      76696465 
 6245      7200
 6246              	.LASF159:
 6247 0d24 6D6F6443 		.ascii	"modClkDivider\000"
 6247      6C6B4469 
 6247      76696465 
 6247      7200
 6248              	.LASF59:
 6249 0d32 64657669 		.ascii	"deviceId\000"
ARM GAS  C:\Users\zack.li\AppData\Local\Temp\cc0tx8mc.s 			page 182


 6249      63654964 
 6249      00
 6250              	.LASF119:
 6251 0d3b 77696467 		.ascii	"widgetStatus\000"
 6251      65745374 
 6251      61747573 
 6251      00
 6252              	.LASF104:
 6253 0d48 43617053 		.ascii	"CapSense_BIST_CSX_SNS_CAP_E\000"
 6253      656E7365 
 6253      5F424953 
 6253      545F4353 
 6253      585F534E 
 6254              	.LASF118:
 6255 0d64 77696467 		.ascii	"widgetId\000"
 6255      65744964 
 6255      00
 6256              	.LASF181:
 6257 0d6d 43617053 		.ascii	"CapSense_requestScanAllWidget\000"
 6257      656E7365 
 6257      5F726571 
 6257      75657374 
 6257      5363616E 
 6258              	.LASF160:
 6259 0d8b 43617053 		.ascii	"CapSense_SsInitializeSourceSenseClk\000"
 6259      656E7365 
 6259      5F537349 
 6259      6E697469 
 6259      616C697A 
 6260              	.LASF186:
 6261 0daf 43617053 		.ascii	"CapSense_idacGainTable\000"
 6261      656E7365 
 6261      5F696461 
 6261      63476169 
 6261      6E546162 
 6262              	.LASF57:
 6263 0dc6 43617053 		.ascii	"CapSense_RAM_SNS_LIST_STRUCT\000"
 6263      656E7365 
 6263      5F52414D 
 6263      5F534E53 
 6263      5F4C4953 
 6264              	.LASF98:
 6265 0de3 77646774 		.ascii	"wdgtArray\000"
 6265      41727261 
 6265      7900
 6266              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
